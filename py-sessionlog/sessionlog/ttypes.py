#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
<<<<<<< HEAD
    from thrift.protocol import fastbinary
except:
    fastbinary = None
=======
  from thrift.protocol import fastbinary
except:
  fastbinary = None
>>>>>>> refs/remotes/sohu/master



class AdInfoOperation:
  """
  Attributes:
   - adId
   - adpId
   - adPos
   - adpX
   - adpY
   - adType
   - browser
   - clickX
   - clickY
   - contentUrl
   - ext
   - freq
   - getUrl
   - impressionId
   - latency
   - monitorKey
   - os
   - refer
   - region
   - reqType
   - resolution
   - suv
   - timestamp
   - turn
   - userAgent
   - userIp
   - yyId
   - repeat
   - supportFlash
   - ecpm
   - ctr
   - statusCode
  """
  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'adId', None, None, ), # 1
    (2, TType.STRING, 'adpId', None, None, ), # 2
    (3, TType.STRING, 'adPos', None, None, ), # 3
    (4, TType.I32, 'adpX', None, None, ), # 4
    (5, TType.I32, 'adpY', None, None, ), # 5
    (6, TType.STRING, 'adType', None, None, ), # 6
    (7, TType.STRING, 'browser', None, None, ), # 7
    (8, TType.I32, 'clickX', None, None, ), # 8
    (9, TType.I32, 'clickY', None, None, ), # 9
    (10, TType.STRING, 'contentUrl', None, None, ), # 10
    (11, TType.STRING, 'ext', None, None, ), # 11
    (12, TType.STRING, 'freq', None, None, ), # 12
    (13, TType.STRING, 'getUrl', None, None, ), # 13
    (14, TType.STRING, 'impressionId', None, None, ), # 14
    (15, TType.I64, 'latency', None, None, ), # 15
    (16, TType.STRING, 'monitorKey', None, None, ), # 16
    (17, TType.STRING, 'os', None, None, ), # 17
    (18, TType.STRING, 'refer', None, None, ), # 18
    (19, TType.STRING, 'region', None, None, ), # 19
    (20, TType.STRING, 'reqType', None, None, ), # 20
    (21, TType.STRING, 'resolution', None, None, ), # 21
    (22, TType.STRING, 'suv', None, None, ), # 22
    (23, TType.I64, 'timestamp', None, None, ), # 23
    (24, TType.STRING, 'turn', None, None, ), # 24
    (25, TType.STRING, 'userAgent', None, None, ), # 25
    (26, TType.STRING, 'userIp', None, None, ), # 26
    (27, TType.STRING, 'yyId', None, None, ), # 27
    (28, TType.I32, 'repeat', None, None, ), # 28
    (29, TType.STRING, 'supportFlash', None, None, ), # 29
    (30, TType.DOUBLE, 'ecpm', None, None, ), # 30
    (31, TType.DOUBLE, 'ctr', None, None, ), # 31
    (32, TType.I32, 'statusCode', None, None, ), # 32
  )

  def __init__(self, adId=None, adpId=None, adPos=None, adpX=None, adpY=None, adType=None, browser=None, clickX=None, clickY=None, contentUrl=None, ext=None, freq=None, getUrl=None, impressionId=None, latency=None, monitorKey=None, os=None, refer=None, region=None, reqType=None, resolution=None, suv=None, timestamp=None, turn=None, userAgent=None, userIp=None, yyId=None, repeat=None, supportFlash=None, ecpm=None, ctr=None, statusCode=None,):
    self.adId = adId
    self.adpId = adpId
    self.adPos = adPos
    self.adpX = adpX
    self.adpY = adpY
    self.adType = adType
    self.browser = browser
    self.clickX = clickX
    self.clickY = clickY
    self.contentUrl = contentUrl
    self.ext = ext
    self.freq = freq
    self.getUrl = getUrl
    self.impressionId = impressionId
    self.latency = latency
    self.monitorKey = monitorKey
    self.os = os
    self.refer = refer
    self.region = region
    self.reqType = reqType
    self.resolution = resolution
    self.suv = suv
    self.timestamp = timestamp
    self.turn = turn
    self.userAgent = userAgent
    self.userIp = userIp
    self.yyId = yyId
    self.repeat = repeat
    self.supportFlash = supportFlash
    self.ecpm = ecpm
    self.ctr = ctr
    self.statusCode = statusCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.adId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.adpId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.adPos = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.adpX = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.adpY = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.adType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.browser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.clickX = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.clickY = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.contentUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.freq = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.getUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.impressionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.latency = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.monitorKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.os = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.refer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.reqType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.resolution = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.suv = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.turn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.userAgent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.userIp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.yyId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.repeat = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.supportFlash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.ecpm = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.ctr = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.statusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdInfoOperation')
    if self.adId is not None:
      oprot.writeFieldBegin('adId', TType.STRING, 1)
      oprot.writeString(self.adId)
      oprot.writeFieldEnd()
    if self.adpId is not None:
      oprot.writeFieldBegin('adpId', TType.STRING, 2)
      oprot.writeString(self.adpId)
      oprot.writeFieldEnd()
    if self.adPos is not None:
      oprot.writeFieldBegin('adPos', TType.STRING, 3)
      oprot.writeString(self.adPos)
      oprot.writeFieldEnd()
    if self.adpX is not None:
      oprot.writeFieldBegin('adpX', TType.I32, 4)
      oprot.writeI32(self.adpX)
      oprot.writeFieldEnd()
    if self.adpY is not None:
      oprot.writeFieldBegin('adpY', TType.I32, 5)
      oprot.writeI32(self.adpY)
      oprot.writeFieldEnd()
    if self.adType is not None:
      oprot.writeFieldBegin('adType', TType.STRING, 6)
      oprot.writeString(self.adType)
      oprot.writeFieldEnd()
    if self.browser is not None:
      oprot.writeFieldBegin('browser', TType.STRING, 7)
      oprot.writeString(self.browser)
      oprot.writeFieldEnd()
    if self.clickX is not None:
      oprot.writeFieldBegin('clickX', TType.I32, 8)
      oprot.writeI32(self.clickX)
      oprot.writeFieldEnd()
    if self.clickY is not None:
      oprot.writeFieldBegin('clickY', TType.I32, 9)
      oprot.writeI32(self.clickY)
      oprot.writeFieldEnd()
    if self.contentUrl is not None:
      oprot.writeFieldBegin('contentUrl', TType.STRING, 10)
      oprot.writeString(self.contentUrl)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 11)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    if self.freq is not None:
      oprot.writeFieldBegin('freq', TType.STRING, 12)
      oprot.writeString(self.freq)
      oprot.writeFieldEnd()
    if self.getUrl is not None:
      oprot.writeFieldBegin('getUrl', TType.STRING, 13)
      oprot.writeString(self.getUrl)
      oprot.writeFieldEnd()
    if self.impressionId is not None:
      oprot.writeFieldBegin('impressionId', TType.STRING, 14)
      oprot.writeString(self.impressionId)
      oprot.writeFieldEnd()
    if self.latency is not None:
      oprot.writeFieldBegin('latency', TType.I64, 15)
      oprot.writeI64(self.latency)
      oprot.writeFieldEnd()
    if self.monitorKey is not None:
      oprot.writeFieldBegin('monitorKey', TType.STRING, 16)
      oprot.writeString(self.monitorKey)
      oprot.writeFieldEnd()
    if self.os is not None:
      oprot.writeFieldBegin('os', TType.STRING, 17)
      oprot.writeString(self.os)
      oprot.writeFieldEnd()
    if self.refer is not None:
      oprot.writeFieldBegin('refer', TType.STRING, 18)
      oprot.writeString(self.refer)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 19)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.reqType is not None:
      oprot.writeFieldBegin('reqType', TType.STRING, 20)
      oprot.writeString(self.reqType)
      oprot.writeFieldEnd()
    if self.resolution is not None:
      oprot.writeFieldBegin('resolution', TType.STRING, 21)
      oprot.writeString(self.resolution)
      oprot.writeFieldEnd()
    if self.suv is not None:
      oprot.writeFieldBegin('suv', TType.STRING, 22)
      oprot.writeString(self.suv)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 23)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.turn is not None:
      oprot.writeFieldBegin('turn', TType.STRING, 24)
      oprot.writeString(self.turn)
      oprot.writeFieldEnd()
    if self.userAgent is not None:
      oprot.writeFieldBegin('userAgent', TType.STRING, 25)
      oprot.writeString(self.userAgent)
      oprot.writeFieldEnd()
    if self.userIp is not None:
      oprot.writeFieldBegin('userIp', TType.STRING, 26)
      oprot.writeString(self.userIp)
      oprot.writeFieldEnd()
    if self.yyId is not None:
      oprot.writeFieldBegin('yyId', TType.STRING, 27)
      oprot.writeString(self.yyId)
      oprot.writeFieldEnd()
    if self.repeat is not None:
      oprot.writeFieldBegin('repeat', TType.I32, 28)
      oprot.writeI32(self.repeat)
      oprot.writeFieldEnd()
    if self.supportFlash is not None:
      oprot.writeFieldBegin('supportFlash', TType.STRING, 29)
      oprot.writeString(self.supportFlash)
      oprot.writeFieldEnd()
    if self.ecpm is not None:
      oprot.writeFieldBegin('ecpm', TType.DOUBLE, 30)
      oprot.writeDouble(self.ecpm)
      oprot.writeFieldEnd()
    if self.ctr is not None:
      oprot.writeFieldBegin('ctr', TType.DOUBLE, 31)
      oprot.writeDouble(self.ctr)
      oprot.writeFieldEnd()
    if self.statusCode is not None:
      oprot.writeFieldBegin('statusCode', TType.I32, 32)
      oprot.writeI32(self.statusCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PvOperation:
  """
  Attributes:
   - yyid
   - sohupass
   - suv
   - ip
   - useragent
   - region
   - timestamp
   - url
   - flag
   - refUrl
   - statusCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'yyid', None, None, ), # 1
    (2, TType.STRING, 'sohupass', None, None, ), # 2
    (3, TType.STRING, 'suv', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.STRING, 'useragent', None, None, ), # 5
    (6, TType.STRING, 'region', None, None, ), # 6
    (7, TType.I64, 'timestamp', None, None, ), # 7
    (8, TType.STRING, 'url', None, None, ), # 8
    (9, TType.BYTE, 'flag', None, None, ), # 9
    (10, TType.STRING, 'refUrl', None, None, ), # 10
    (11, TType.I32, 'statusCode', None, None, ), # 11
  )

  def __init__(self, yyid=None, sohupass=None, suv=None, ip=None, useragent=None, region=None, timestamp=None, url=None, flag=None, refUrl=None, statusCode=None,):
    self.yyid = yyid
    self.sohupass = sohupass
    self.suv = suv
    self.ip = ip
    self.useragent = useragent
    self.region = region
    self.timestamp = timestamp
    self.url = url
    self.flag = flag
    self.refUrl = refUrl
    self.statusCode = statusCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.yyid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sohupass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.suv = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.useragent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BYTE:
          self.flag = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.refUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.statusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PvOperation')
    if self.yyid is not None:
      oprot.writeFieldBegin('yyid', TType.STRING, 1)
      oprot.writeString(self.yyid)
      oprot.writeFieldEnd()
    if self.sohupass is not None:
      oprot.writeFieldBegin('sohupass', TType.STRING, 2)
      oprot.writeString(self.sohupass)
      oprot.writeFieldEnd()
    if self.suv is not None:
      oprot.writeFieldBegin('suv', TType.STRING, 3)
      oprot.writeString(self.suv)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.useragent is not None:
      oprot.writeFieldBegin('useragent', TType.STRING, 5)
      oprot.writeString(self.useragent)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 6)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 7)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 8)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.BYTE, 9)
      oprot.writeByte(self.flag)
      oprot.writeFieldEnd()
    if self.refUrl is not None:
      oprot.writeFieldBegin('refUrl', TType.STRING, 10)
      oprot.writeString(self.refUrl)
      oprot.writeFieldEnd()
    if self.statusCode is not None:
      oprot.writeFieldBegin('statusCode', TType.I32, 11)
      oprot.writeI32(self.statusCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchOperation:
  """
  Attributes:
   - yyid
   - sohupass
   - suv
   - ip
   - useragent
   - region
   - timestamp
   - domain
   - keywords
   - flag
   - statusCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'yyid', None, None, ), # 1
    (2, TType.STRING, 'sohupass', None, None, ), # 2
    (3, TType.STRING, 'suv', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.STRING, 'useragent', None, None, ), # 5
    (6, TType.STRING, 'region', None, None, ), # 6
    (7, TType.I64, 'timestamp', None, None, ), # 7
    (8, TType.STRING, 'domain', None, None, ), # 8
    (9, TType.STRING, 'keywords', None, None, ), # 9
    (10, TType.BYTE, 'flag', None, None, ), # 10
    (11, TType.I32, 'statusCode', None, None, ), # 11
  )

  def __init__(self, yyid=None, sohupass=None, suv=None, ip=None, useragent=None, region=None, timestamp=None, domain=None, keywords=None, flag=None, statusCode=None,):
    self.yyid = yyid
    self.sohupass = sohupass
    self.suv = suv
    self.ip = ip
    self.useragent = useragent
    self.region = region
    self.timestamp = timestamp
    self.domain = domain
    self.keywords = keywords
    self.flag = flag
    self.statusCode = statusCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.yyid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sohupass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.suv = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.useragent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.keywords = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BYTE:
          self.flag = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.statusCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchOperation')
    if self.yyid is not None:
      oprot.writeFieldBegin('yyid', TType.STRING, 1)
      oprot.writeString(self.yyid)
      oprot.writeFieldEnd()
    if self.sohupass is not None:
      oprot.writeFieldBegin('sohupass', TType.STRING, 2)
      oprot.writeString(self.sohupass)
      oprot.writeFieldEnd()
    if self.suv is not None:
      oprot.writeFieldBegin('suv', TType.STRING, 3)
      oprot.writeString(self.suv)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.useragent is not None:
      oprot.writeFieldBegin('useragent', TType.STRING, 5)
      oprot.writeString(self.useragent)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 6)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 7)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 8)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.keywords is not None:
      oprot.writeFieldBegin('keywords', TType.STRING, 9)
      oprot.writeString(self.keywords)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.BYTE, 10)
      oprot.writeByte(self.flag)
      oprot.writeFieldEnd()
    if self.statusCode is not None:
      oprot.writeFieldBegin('statusCode', TType.I32, 11)
      oprot.writeI32(self.statusCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
