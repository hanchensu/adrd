
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 20 15:53:52 CST 2013
//----------------------------------------------------

package com.cloudera.impala.analysis;

import com.cloudera.impala.catalog.FileFormat;
import com.cloudera.impala.catalog.RowFormat;
import com.cloudera.impala.catalog.PrimitiveType;
import com.cloudera.impala.analysis.UnionStmt.UnionOperand;
import com.cloudera.impala.analysis.UnionStmt.Qualifier;
import com.cloudera.impala.thrift.TDescribeTableOutputStyle;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import com.google.common.collect.Lists;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 20 15:53:52 CST 2013
  */
public class SqlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\020\013" +
    "\000\002\155\003\000\002\155\002\000\002\021\004\000" +
    "\002\021\005\000\002\021\004\000\002\106\004\000\002" +
    "\106\004\000\002\105\014\000\002\105\011\000\002\105" +
    "\014\000\002\105\011\000\002\006\003\000\002\006\002" +
    "\000\002\037\003\000\002\037\002\000\002\154\003\000" +
    "\002\154\002\000\002\116\012\000\002\116\011\000\002" +
    "\116\010\000\002\116\011\000\002\116\010\000\002\116" +
    "\011\000\002\116\011\000\002\116\010\000\002\153\003" +
    "\000\002\153\002\000\002\142\003\000\002\142\003\000" +
    "\002\122\010\000\002\123\016\000\002\123\013\000\002" +
    "\124\017\000\002\134\004\000\002\134\002\000\002\143" +
    "\004\000\002\143\002\000\002\135\003\000\002\135\002" +
    "\000\002\141\005\000\002\141\002\000\002\144\010\000" +
    "\002\144\002\000\002\147\005\000\002\147\002\000\002" +
    "\146\004\000\002\146\002\000\002\145\004\000\002\145" +
    "\002\000\002\150\005\000\002\137\005\000\002\137\002" +
    "\000\002\136\003\000\002\136\003\000\002\136\003\000" +
    "\002\136\003\000\002\132\007\000\002\132\002\000\002" +
    "\130\003\000\002\130\005\000\002\126\005\000\002\125" +
    "\012\000\002\133\005\000\002\133\002\000\002\131\003" +
    "\000\002\131\005\000\002\127\004\000\002\117\007\000" +
    "\002\117\010\000\002\120\006\000\002\121\006\000\002" +
    "\121\006\000\002\151\003\000\002\151\003\000\002\152" +
    "\003\000\002\152\003\000\002\140\004\000\002\140\002" +
    "\000\002\110\006\000\002\110\002\000\002\112\003\000" +
    "\002\112\005\000\002\107\006\000\002\107\002\000\002" +
    "\111\003\000\002\111\005\000\002\113\003\000\002\113" +
    "\003\000\002\114\005\000\002\005\004\000\002\005\004" +
    "\000\002\072\004\000\002\072\002\000\002\076\007\000" +
    "\002\076\007\000\002\071\003\000\002\071\005\000\002" +
    "\022\006\000\002\022\005\000\002\022\010\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\005\000\002\115\003\000\002\115\004\000" +
    "\002\115\004\000\002\004\006\000\002\004\010\000\002" +
    "\011\005\000\002\011\007\000\002\012\004\000\002\013" +
    "\004\000\002\013\005\000\002\013\006\000\002\013\007" +
    "\000\002\014\004\000\002\014\005\000\002\015\003\000" +
    "\002\015\004\000\002\016\005\000\002\017\003\000\002" +
    "\017\002\000\002\003\003\000\002\003\011\000\002\023" +
    "\004\000\002\023\005\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\004\000\002\025\003\000" +
    "\002\025\003\000\002\035\004\000\002\035\003\000\002" +
    "\035\004\000\002\035\003\000\002\026\003\000\002\026" +
    "\005\000\002\026\007\000\002\040\003\000\002\040\005" +
    "\000\002\067\004\000\002\070\003\000\002\070\005\000" +
    "\002\070\006\000\002\070\010\000\002\070\012\000\002" +
    "\073\003\000\002\073\003\000\002\075\006\000\002\074" +
    "\004\000\002\074\003\000\002\077\004\000\002\077\005" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\100\003\000\002\100\002\000\002\101\003\000\002" +
    "\101\002\000\002\102\005\000\002\102\002\000\002\036" +
    "\003\000\002\036\005\000\002\033\003\000\002\033\005" +
    "\000\002\041\004\000\002\041\002\000\002\050\005\000" +
    "\002\050\002\000\002\051\004\000\002\051\002\000\002" +
    "\053\005\000\002\053\002\000\002\052\003\000\002\052" +
    "\005\000\002\054\003\000\002\054\004\000\002\054\004" +
    "\000\002\055\004\000\002\055\002\000\002\056\010\000" +
    "\002\062\007\000\002\062\006\000\002\063\006\000\002" +
    "\063\007\000\002\057\004\000\002\057\002\000\002\104" +
    "\004\000\002\104\004\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\030\006\000\002\030\006\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\034\003" +
    "\000\002\034\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\004\000\002\032\007\000\002\032\007" +
    "\000\002\032\007\000\002\032\012\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\004\000\002\061" +
    "\003\000\002\060\006\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\064\003\000\002" +
    "\064\004\000\002\064\003\000\002\064\004\000\002\064" +
    "\004\000\002\042\005\000\002\042\006\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\005\000\002\044\005\000\002" +
    "\044\006\000\002\044\006\000\002\044\006\000\002\044" +
    "\006\000\002\044\005\000\002\044\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\006\000" +
    "\002\047\006\000\002\047\006\000\002\043\007\000\002" +
    "\043\007\000\002\043\010\000\002\043\010\000\002\046" +
    "\007\000\002\046\010\000\002\045\005\000\002\045\005" +
    "\000\002\045\004\000\002\045\004\000\002\066\003\000" +
    "\002\066\005\000\002\066\007\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u024c\000\040\006\006\026\021\036\041\044\025\051" +
    "\027\071\uff92\075\033\104\026\124\016\135\uff92\141\007" +
    "\160\031\162\uff92\166\012\172\uff92\001\002\000\004\002" +
    "\ufff5\001\002\000\004\002\000\001\002\000\006\146\u022a" +
    "\163\u0229\001\002\000\010\031\u021e\134\u021f\147\u0220\001" +
    "\002\000\012\071\u01fc\135\u0139\162\u013a\172\u0138\001\002" +
    "\000\004\002\ufffc\001\002\000\006\212\u01ee\216\u01ef\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufff2\001\002" +
    "\000\004\002\ufff0\001\002\000\004\212\045\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\ufff6\001\002\000\014" +
    "\030\u010f\052\u011c\133\u010d\146\uffc8\163\u011d\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufff8\001\002\000\012\030\u010f\133\u010d\146\u0110\163" +
    "\u0111\001\002\000\004\027\056\001\002\000\014\071\uff92" +
    "\135\uff92\162\uff92\166\012\172\uff92\001\002\000\004\002" +
    "\ufffd\001\002\000\004\212\053\001\002\000\004\002\ufff3" +
    "\001\002\000\004\107\051\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\ufff1\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\050\001\002\000" +
    "\006\060\043\212\uff73\001\002\000\004\212\045\001\002" +
    "\000\004\212\uff74\001\002\000\004\002\uff75\001\002\000" +
    "\110\002\uff61\004\uff61\010\uff61\021\uff61\024\uff61\044\uff61" +
    "\062\uff61\063\uff61\064\uff61\067\uff61\077\uff61\100\uff61\101" +
    "\uff61\102\uff61\105\uff61\113\uff61\115\uff61\121\uff61\126\uff61" +
    "\127\uff61\130\uff61\135\uff61\140\uff61\143\uff61\157\uff61\161" +
    "\uff61\162\uff61\165\uff61\166\uff61\167\uff61\170\046\172\uff61" +
    "\173\uff61\212\uff61\216\uff61\001\002\000\004\212\047\001" +
    "\002\000\106\002\uff60\004\uff60\010\uff60\021\uff60\024\uff60" +
    "\044\uff60\062\uff60\063\uff60\064\uff60\067\uff60\077\uff60\100" +
    "\uff60\101\uff60\102\uff60\105\uff60\113\uff60\115\uff60\121\uff60" +
    "\126\uff60\127\uff60\130\uff60\135\uff60\140\uff60\143\uff60\157" +
    "\uff60\161\uff60\162\uff60\165\uff60\166\uff60\167\uff60\172\uff60" +
    "\173\uff60\212\uff60\216\uff60\001\002\000\004\002\001\001" +
    "\002\000\006\002\uffec\212\045\001\002\000\004\002\uffeb" +
    "\001\002\000\004\002\uff7e\001\002\000\004\002\uffe9\001" +
    "\002\000\004\002\uffe8\001\002\000\004\070\057\001\002" +
    "\000\004\216\060\001\002\000\006\074\uffed\117\061\001" +
    "\002\000\004\074\uffee\001\002\000\004\074\063\001\002" +
    "\000\004\146\064\001\002\000\004\212\045\001\002\000" +
    "\006\002\uff9b\121\067\001\002\000\004\002\uffef\001\002" +
    "\000\004\172\070\001\002\000\004\212\071\001\002\000" +
    "\004\206\077\001\002\000\006\167\uff9a\173\uff9a\001\002" +
    "\000\006\167\074\173\075\001\002\000\004\212\071\001" +
    "\002\000\010\002\uff9c\105\uff9c\140\uff9c\001\002\000\006" +
    "\167\uff99\173\uff99\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\136\002" +
    "\ufef6\007\ufef6\010\ufef6\011\ufef6\013\ufef6\035\ufef6\042\ufef6" +
    "\045\ufef6\046\ufef6\061\ufef6\062\ufef6\063\ufef6\064\ufef6\066" +
    "\ufef6\067\ufef6\076\ufef6\077\ufef6\100\ufef6\101\ufef6\102\ufef6" +
    "\111\ufef6\114\ufef6\115\ufef6\125\ufef6\130\ufef6\131\ufef6\152" +
    "\ufef6\157\ufef6\164\ufef6\165\ufef6\167\ufef6\171\ufef6\173\ufef6" +
    "\176\ufef6\177\ufef6\200\ufef6\201\ufef6\202\ufef6\203\ufef6\204" +
    "\ufef6\206\ufef6\207\ufef6\210\ufef6\211\ufef6\212\ufef6\216\ufef6" +
    "\001\002\000\136\002\uff25\007\uff25\010\uff25\011\uff25\013" +
    "\uff25\035\uff25\042\uff25\045\uff25\046\uff25\061\uff25\062\uff25" +
    "\063\uff25\064\uff25\066\uff25\067\uff25\076\uff25\077\uff25\100" +
    "\uff25\101\uff25\102\uff25\111\uff25\114\uff25\115\uff25\125\uff25" +
    "\130\uff25\131\uff25\152\uff25\157\uff25\164\uff25\165\uff25\167" +
    "\uff25\171\uff25\173\uff25\176\uff25\177\uff25\200\uff25\201\uff25" +
    "\202\uff25\203\uff25\204\uff25\206\uff25\207\uff25\210\uff25\211" +
    "\uff25\212\uff25\216\uff25\001\002\000\136\002\ufef7\007\ufef7" +
    "\010\ufef7\011\ufef7\013\ufef7\035\ufef7\042\ufef7\045\ufef7\046" +
    "\ufef7\061\ufef7\062\ufef7\063\ufef7\064\ufef7\066\ufef7\067\ufef7" +
    "\076\ufef7\077\ufef7\100\ufef7\101\ufef7\102\ufef7\111\ufef7\114" +
    "\ufef7\115\ufef7\125\ufef7\130\ufef7\131\ufef7\152\ufef7\157\ufef7" +
    "\164\ufef7\165\ufef7\167\ufef7\171\ufef7\173\ufef7\176\ufef7\177" +
    "\ufef7\200\ufef7\201\ufef7\202\ufef7\203\ufef7\204\ufef7\206\ufef7" +
    "\207\ufef7\210\ufef7\211\ufef7\212\ufef7\216\ufef7\001\002\000" +
    "\004\172\uff06\001\002\000\136\002\uff0b\007\uff0b\010\uff0b" +
    "\011\uff0b\013\uff0b\035\uff0b\042\uff0b\045\uff0b\046\uff0b\061" +
    "\uff0b\062\uff0b\063\uff0b\064\uff0b\066\uff0b\067\uff0b\076\uff0b" +
    "\077\uff0b\100\uff0b\101\uff0b\102\uff0b\111\uff0b\114\uff0b\115" +
    "\uff0b\125\uff0b\130\uff0b\131\uff0b\152\uff0b\157\uff0b\164\uff0b" +
    "\165\uff0b\167\uff0b\171\uff0b\173\uff0b\176\uff0b\177\uff0b\200" +
    "\uff0b\201\uff0b\202\uff0b\203\uff0b\204\uff0b\206\uff0b\207\uff0b" +
    "\210\uff0b\211\uff0b\212\uff0b\216\uff0b\001\002\000\136\002" +
    "\uff0d\007\uff0d\010\uff0d\011\uff0d\013\uff0d\035\uff0d\042\uff0d" +
    "\045\uff0d\046\uff0d\061\uff0d\062\uff0d\063\uff0d\064\uff0d\066" +
    "\uff0d\067\uff0d\076\uff0d\077\uff0d\100\uff0d\101\uff0d\102\uff0d" +
    "\111\uff0d\114\uff0d\115\uff0d\125\uff0d\130\uff0d\131\uff0d\152" +
    "\uff0d\157\uff0d\164\uff0d\165\uff0d\167\uff0d\171\uff0d\173\uff0d" +
    "\176\uff0d\177\uff0d\200\uff0d\201\uff0d\202\uff0d\203\uff0d\204" +
    "\uff0d\206\uff0d\207\uff0d\210\uff0d\211\uff0d\212\uff0d\216\uff0d" +
    "\001\002\000\136\002\ufef4\007\ufef4\010\ufef4\011\ufef4\013" +
    "\ufef4\035\ufef4\042\ufef4\045\ufef4\046\ufef4\061\ufef4\062\ufef4" +
    "\063\ufef4\064\ufef4\066\ufef4\067\ufef4\076\ufef4\077\ufef4\100" +
    "\ufef4\101\ufef4\102\ufef4\111\ufef4\114\ufef4\115\ufef4\125\ufef4" +
    "\130\ufef4\131\ufef4\152\ufef4\157\ufef4\164\ufef4\165\ufef4\167" +
    "\ufef4\171\ufef4\173\ufef4\176\ufef4\177\ufef4\200\ufef4\201\ufef4" +
    "\202\ufef4\203\ufef4\204\ufef4\206\ufef4\207\ufef4\210\ufef4\211" +
    "\ufef4\212\ufef4\216\ufef4\001\002\000\004\172\375\001\002" +
    "\000\004\172\uff03\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\136\002\uff2a\007\uff2a\010\uff2a\011\uff2a\013\uff2a" +
    "\035\uff2a\042\uff2a\045\uff2a\046\uff2a\061\uff2a\062\uff2a\063" +
    "\uff2a\064\uff2a\066\uff2a\067\uff2a\076\uff2a\077\uff2a\100\uff2a" +
    "\101\uff2a\102\uff2a\111\uff2a\114\uff2a\115\uff2a\125\uff2a\130" +
    "\uff2a\131\uff2a\152\uff2a\157\uff2a\164\uff2a\165\uff2a\167\uff2a" +
    "\171\uff2a\173\uff2a\176\uff2a\177\uff2a\200\uff2a\201\uff2a\202" +
    "\uff2a\203\uff2a\204\uff2a\206\uff2a\207\uff2a\210\uff2a\211\uff2a" +
    "\212\uff2a\216\uff2a\001\002\000\136\002\uff2b\007\uff2b\010" +
    "\uff2b\011\uff2b\013\uff2b\035\uff2b\042\uff2b\045\uff2b\046\uff2b" +
    "\061\uff2b\062\uff2b\063\uff2b\064\uff2b\066\uff2b\067\uff2b\076" +
    "\uff2b\077\uff2b\100\uff2b\101\uff2b\102\uff2b\111\uff2b\114\uff2b" +
    "\115\uff2b\125\uff2b\130\uff2b\131\uff2b\152\uff2b\157\uff2b\164" +
    "\uff2b\165\uff2b\167\uff2b\171\uff2b\173\uff2b\176\uff2b\177\uff2b" +
    "\200\uff2b\201\uff2b\202\uff2b\203\uff2b\204\uff2b\206\uff2b\207" +
    "\uff2b\210\uff2b\211\uff2b\212\uff2b\216\uff2b\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\070\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\164\347\172\112\200" +
    "\130\201\111\205\146\207\122\212\134\213\141\214\151" +
    "\215\136\216\105\217\133\001\002\000\136\002\uff2c\007" +
    "\uff2c\010\uff2c\011\uff2c\013\uff2c\035\uff2c\042\uff2c\045\uff2c" +
    "\046\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\066\uff2c\067" +
    "\uff2c\076\uff2c\077\uff2c\100\uff2c\101\uff2c\102\uff2c\111\uff2c" +
    "\114\uff2c\115\uff2c\125\uff2c\130\uff2c\131\uff2c\152\uff2c\157" +
    "\uff2c\164\uff2c\165\uff2c\167\uff2c\171\uff2c\173\uff2c\176\uff2c" +
    "\177\uff2c\200\uff2c\201\uff2c\202\uff2c\203\uff2c\204\uff2c\206" +
    "\uff2c\207\uff2c\210\uff2c\211\uff2c\212\uff2c\216\uff2c\001\002" +
    "\000\004\172\uff02\001\002\000\136\002\ufef8\007\ufef8\010" +
    "\ufef8\011\ufef8\013\ufef8\035\ufef8\042\ufef8\045\ufef8\046\ufef8" +
    "\061\ufef8\062\ufef8\063\ufef8\064\ufef8\066\ufef8\067\ufef8\076" +
    "\ufef8\077\ufef8\100\ufef8\101\ufef8\102\ufef8\111\ufef8\114\ufef8" +
    "\115\ufef8\125\ufef8\130\ufef8\131\ufef8\152\ufef8\157\ufef8\164" +
    "\ufef8\165\ufef8\167\ufef8\171\ufef8\173\ufef8\176\ufef8\177\ufef8" +
    "\200\ufef8\201\ufef8\202\ufef8\203\ufef8\204\ufef8\206\ufef8\207" +
    "\ufef8\210\ufef8\211\ufef8\212\ufef8\216\ufef8\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\004\172\uff05\001\002\000" +
    "\136\002\uff22\007\uff22\010\uff22\011\uff22\013\uff22\035\uff22" +
    "\042\uff22\045\uff22\046\uff22\061\uff22\062\uff22\063\uff22\064" +
    "\uff22\066\uff22\067\uff22\076\uff22\077\uff22\100\uff22\101\uff22" +
    "\102\uff22\111\uff22\114\uff22\115\uff22\125\uff22\130\uff22\131" +
    "\uff22\152\uff22\157\uff22\164\uff22\165\uff22\167\uff22\171\uff22" +
    "\173\uff22\176\uff22\177\uff22\200\uff22\201\uff22\202\uff22\203" +
    "\uff22\204\uff22\206\uff22\207\uff22\210\uff22\211\uff22\212\uff22" +
    "\216\uff22\001\002\000\004\172\326\001\002\000\136\002" +
    "\uff23\007\uff23\010\uff23\011\uff23\013\uff23\035\uff23\042\uff23" +
    "\045\uff23\046\uff23\061\uff23\062\uff23\063\uff23\064\uff23\066" +
    "\uff23\067\uff23\076\uff23\077\uff23\100\uff23\101\uff23\102\uff23" +
    "\111\uff23\114\uff23\115\uff23\125\uff23\130\uff23\131\uff23\152" +
    "\uff23\157\uff23\164\uff23\165\uff23\167\uff23\171\uff23\173\uff23" +
    "\176\uff23\177\uff23\200\uff23\201\uff23\202\uff23\203\uff23\204" +
    "\uff23\206\uff23\207\uff23\210\uff23\211\uff23\212\uff23\216\uff23" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\004\172\uff00\001\002\000" +
    "\136\002\ufef5\007\ufef5\010\ufef5\011\ufef5\013\ufef5\035\ufef5" +
    "\042\ufef5\045\ufef5\046\ufef5\061\ufef5\062\ufef5\063\ufef5\064" +
    "\ufef5\066\ufef5\067\ufef5\076\ufef5\077\ufef5\100\ufef5\101\ufef5" +
    "\102\ufef5\111\ufef5\114\ufef5\115\ufef5\125\ufef5\130\ufef5\131" +
    "\ufef5\152\ufef5\157\ufef5\164\ufef5\165\ufef5\167\ufef5\171\ufef5" +
    "\173\ufef5\176\ufef5\177\ufef5\200\ufef5\201\ufef5\202\ufef5\203" +
    "\ufef5\204\ufef5\206\ufef5\207\ufef5\210\ufef5\211\ufef5\212\ufef5" +
    "\216\ufef5\001\002\000\066\012\131\017\116\020\107\025" +
    "\103\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\172\112\200" +
    "\130\201\111\205\146\207\122\212\134\213\141\214\151" +
    "\215\136\216\105\217\133\001\002\000\142\002\ufedb\007" +
    "\ufedb\010\ufedb\011\ufedb\013\ufedb\035\ufedb\042\ufedb\045\ufedb" +
    "\046\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb\066\ufedb\067" +
    "\ufedb\076\ufedb\077\ufedb\100\ufedb\101\ufedb\102\ufedb\111\ufedb" +
    "\114\ufedb\115\ufedb\125\ufedb\130\ufedb\131\ufedb\152\ufedb\157" +
    "\ufedb\164\ufedb\165\ufedb\167\ufedb\170\310\171\ufedb\172\307" +
    "\173\ufedb\176\ufedb\177\ufedb\200\ufedb\201\ufedb\202\ufedb\203" +
    "\ufedb\204\ufedb\206\ufedb\207\ufedb\210\ufedb\211\ufedb\212\ufedb" +
    "\216\ufedb\001\002\000\136\002\uff0c\007\uff0c\010\uff0c\011" +
    "\uff0c\013\uff0c\035\uff0c\042\uff0c\045\uff0c\046\uff0c\061\uff0c" +
    "\062\uff0c\063\uff0c\064\uff0c\066\uff0c\067\uff0c\076\uff0c\077" +
    "\uff0c\100\uff0c\101\uff0c\102\uff0c\111\uff0c\114\uff0c\115\uff0c" +
    "\125\uff0c\130\uff0c\131\uff0c\152\uff0c\157\uff0c\164\uff0c\165" +
    "\uff0c\167\uff0c\171\uff0c\173\uff0c\176\uff0c\177\uff0c\200\uff0c" +
    "\201\uff0c\202\uff0c\203\uff0c\204\uff0c\206\uff0c\207\uff0c\210" +
    "\uff0c\211\uff0c\212\uff0c\216\uff0c\001\002\000\136\002\uff0e" +
    "\007\uff0e\010\uff0e\011\uff0e\013\uff0e\035\uff0e\042\uff0e\045" +
    "\uff0e\046\uff0e\061\uff0e\062\uff0e\063\uff0e\064\uff0e\066\uff0e" +
    "\067\uff0e\076\uff0e\077\uff0e\100\uff0e\101\uff0e\102\uff0e\111" +
    "\uff0e\114\uff0e\115\uff0e\125\uff0e\130\uff0e\131\uff0e\152\uff0e" +
    "\157\uff0e\164\uff0e\165\uff0e\167\uff0e\171\uff0e\173\uff0e\176" +
    "\uff0e\177\uff0e\200\uff0e\201\uff0e\202\uff0e\203\uff0e\204\uff0e" +
    "\206\uff0e\207\uff0e\210\uff0e\211\uff0e\212\uff0e\216\uff0e\001" +
    "\002\000\004\172\304\001\002\000\136\002\uff0a\007\uff0a" +
    "\010\uff0a\011\uff0a\013\uff0a\035\uff0a\042\uff0a\045\uff0a\046" +
    "\uff0a\061\uff0a\062\uff0a\063\uff0a\064\uff0a\066\uff0a\067\uff0a" +
    "\076\uff0a\077\uff0a\100\uff0a\101\uff0a\102\uff0a\111\uff0a\114" +
    "\uff0a\115\uff0a\125\uff0a\130\uff0a\131\uff0a\152\uff0a\157\uff0a" +
    "\164\uff0a\165\uff0a\167\uff0a\171\uff0a\173\uff0a\176\uff0a\177" +
    "\uff0a\200\uff0a\201\uff0a\202\uff0a\203\uff0a\204\uff0a\206\uff0a" +
    "\207\uff0a\210\uff0a\211\uff0a\212\uff0a\216\uff0a\001\002\000" +
    "\136\002\uff08\007\uff08\010\uff08\011\uff08\013\uff08\035\uff08" +
    "\042\uff08\045\uff08\046\uff08\061\uff08\062\uff08\063\uff08\064" +
    "\uff08\066\uff08\067\uff08\076\uff08\077\uff08\100\uff08\101\uff08" +
    "\102\uff08\111\uff08\114\uff08\115\uff08\125\uff08\130\uff08\131" +
    "\uff08\152\uff08\157\uff08\164\uff08\165\uff08\167\uff08\171\uff08" +
    "\173\uff08\176\uff08\177\uff08\200\uff08\201\uff08\202\uff08\203" +
    "\uff08\204\uff08\206\uff08\207\uff08\210\uff08\211\uff08\212\uff08" +
    "\216\uff08\001\002\000\136\002\uff26\007\uff26\010\uff26\011" +
    "\uff26\013\uff26\035\uff26\042\uff26\045\uff26\046\uff26\061\uff26" +
    "\062\uff26\063\uff26\064\uff26\066\uff26\067\uff26\076\uff26\077" +
    "\uff26\100\uff26\101\uff26\102\uff26\111\uff26\114\uff26\115\uff26" +
    "\125\uff26\130\uff26\131\uff26\152\uff26\157\uff26\164\uff26\165" +
    "\uff26\167\uff26\171\uff26\173\uff26\176\uff26\177\uff26\200\uff26" +
    "\201\uff26\202\uff26\203\uff26\204\uff26\206\uff26\207\uff26\210" +
    "\uff26\211\uff26\212\uff26\216\uff26\001\002\000\004\172\uff01" +
    "\001\002\000\062\007\175\013\172\042\164\066\201\076" +
    "\174\101\166\111\156\114\177\125\176\131\171\167\uff96" +
    "\171\161\173\uff96\176\167\177\154\200\170\201\163\202" +
    "\155\203\160\204\173\206\157\207\162\210\165\211\200" +
    "\001\002\000\004\172\uff04\001\002\000\066\012\131\017" +
    "\116\020\107\025\103\040\110\041\120\053\104\065\137" +
    "\073\123\106\145\110\124\111\115\112\140\145\143\156" +
    "\135\172\112\200\130\201\111\205\146\207\122\212\134" +
    "\213\141\214\151\215\136\216\105\217\133\001\002\000" +
    "\136\002\uff21\007\uff21\010\uff21\011\uff21\013\uff21\035\uff21" +
    "\042\uff21\045\uff21\046\uff21\061\uff21\062\uff21\063\uff21\064" +
    "\uff21\066\uff21\067\uff21\076\uff21\077\uff21\100\uff21\101\uff21" +
    "\102\uff21\111\uff21\114\uff21\115\uff21\125\uff21\130\uff21\131" +
    "\uff21\152\uff21\157\uff21\164\uff21\165\uff21\167\uff21\171\uff21" +
    "\173\uff21\176\uff21\177\uff21\200\uff21\201\uff21\202\uff21\203" +
    "\uff21\204\uff21\206\uff21\207\uff21\210\uff21\211\uff21\212\uff21" +
    "\216\uff21\001\002\000\136\002\uff24\007\uff24\010\uff24\011" +
    "\uff24\013\uff24\035\uff24\042\uff24\045\uff24\046\uff24\061\uff24" +
    "\062\uff24\063\uff24\064\uff24\066\uff24\067\uff24\076\uff24\077" +
    "\uff24\100\uff24\101\uff24\102\uff24\111\uff24\114\uff24\115\uff24" +
    "\125\uff24\130\uff24\131\uff24\152\uff24\157\uff24\164\uff24\165" +
    "\uff24\167\uff24\171\uff24\173\uff24\176\uff24\177\uff24\200\uff24" +
    "\201\uff24\202\uff24\203\uff24\204\uff24\206\uff24\207\uff24\210" +
    "\uff24\211\uff24\212\uff24\216\uff24\001\002\000\136\002\uff0f" +
    "\007\uff0f\010\uff0f\011\uff0f\013\uff0f\035\uff0f\042\uff0f\045" +
    "\uff0f\046\uff0f\061\uff0f\062\uff0f\063\uff0f\064\uff0f\066\uff0f" +
    "\067\uff0f\076\uff0f\077\uff0f\100\uff0f\101\uff0f\102\uff0f\111" +
    "\uff0f\114\uff0f\115\uff0f\125\uff0f\130\uff0f\131\uff0f\152\uff0f" +
    "\157\uff0f\164\uff0f\165\uff0f\167\uff0f\171\uff0f\173\uff0f\176" +
    "\uff0f\177\uff0f\200\uff0f\201\uff0f\202\uff0f\203\uff0f\204\uff0f" +
    "\206\uff0f\207\uff0f\210\uff0f\211\uff0f\212\uff0f\216\uff0f\001" +
    "\002\000\136\002\uff2d\007\uff2d\010\uff2d\011\uff2d\013\uff2d" +
    "\035\uff2d\042\uff2d\045\uff2d\046\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\066\uff2d\067\uff2d\076\uff2d\077\uff2d\100\uff2d" +
    "\101\uff2d\102\uff2d\111\uff2d\114\uff2d\115\uff2d\125\uff2d\130" +
    "\uff2d\131\uff2d\152\uff2d\157\uff2d\164\uff2d\165\uff2d\167\uff2d" +
    "\171\uff2d\173\uff2d\176\uff2d\177\uff2d\200\uff2d\201\uff2d\202" +
    "\uff2d\203\uff2d\204\uff2d\206\uff2d\207\uff2d\210\uff2d\211\uff2d" +
    "\212\uff2d\216\uff2d\001\002\000\136\002\uff14\007\uff14\010" +
    "\uff14\011\uff14\013\uff14\035\uff14\042\uff14\045\uff14\046\uff14" +
    "\061\uff14\062\uff14\063\uff14\064\uff14\066\uff14\067\uff14\076" +
    "\uff14\077\uff14\100\uff14\101\uff14\102\uff14\111\uff14\114\uff14" +
    "\115\uff14\125\uff14\130\uff14\131\uff14\152\uff14\157\uff14\164" +
    "\uff14\165\uff14\167\uff14\171\uff14\173\uff14\176\uff14\177\uff14" +
    "\200\uff14\201\uff14\202\uff14\203\uff14\204\uff14\206\uff14\207" +
    "\uff14\210\uff14\211\uff14\212\uff14\216\uff14\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\014\013\261\066\265\101" +
    "\264\125\263\131\262\001\002\000\066\012\131\017\116" +
    "\020\107\025\103\040\110\041\120\053\104\065\137\073" +
    "\123\106\145\110\124\111\115\112\140\145\143\156\135" +
    "\172\112\200\130\201\111\205\146\207\122\212\134\213" +
    "\141\214\151\215\136\216\105\217\133\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\004\206\254\001\002\000" +
    "\066\012\131\017\116\020\107\025\103\040\110\041\120" +
    "\053\104\065\137\073\250\106\145\110\124\111\115\112" +
    "\140\145\143\156\135\172\112\200\130\201\111\205\146" +
    "\207\122\212\134\213\141\214\151\215\136\216\105\217" +
    "\133\001\002\000\066\012\131\017\116\020\107\025\103" +
    "\040\110\041\120\053\104\065\137\073\123\106\145\110" +
    "\124\111\115\112\140\145\143\156\135\172\112\200\130" +
    "\201\111\205\146\207\122\212\134\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\072\012\131\017\116" +
    "\020\107\025\103\040\110\041\120\053\104\065\137\073" +
    "\123\106\145\110\124\111\115\112\140\145\143\156\135" +
    "\172\112\200\130\201\111\205\146\206\243\207\122\211" +
    "\242\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\232\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\066\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\172\112\200\130\201\111" +
    "\205\146\207\122\212\134\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\066\012\131\017\116\020\107" +
    "\025\103\040\110\041\120\053\104\065\137\073\123\106" +
    "\145\110\124\111\115\112\140\145\143\156\135\172\112" +
    "\200\130\201\111\205\146\207\122\212\134\213\141\214" +
    "\151\215\136\216\105\217\133\001\002\000\066\012\131" +
    "\017\116\020\107\025\103\040\110\041\120\053\104\065" +
    "\137\073\123\106\145\110\124\111\115\112\140\145\143" +
    "\156\135\172\112\200\130\201\111\205\146\207\122\212" +
    "\134\213\141\214\151\215\136\216\105\217\133\001\002" +
    "\000\006\111\217\112\216\001\002\000\066\012\131\017" +
    "\116\020\107\025\103\040\110\041\120\053\104\065\137" +
    "\073\123\106\145\110\124\111\115\112\140\145\143\156" +
    "\135\172\112\200\130\201\111\205\146\207\122\212\134" +
    "\213\141\214\151\215\136\216\105\217\133\001\002\000" +
    "\066\012\131\017\116\020\107\025\103\040\110\041\120" +
    "\053\104\065\137\073\123\106\145\110\124\111\115\112" +
    "\140\145\143\156\135\172\112\200\130\201\111\205\146" +
    "\207\122\212\134\213\141\214\151\215\136\216\105\217" +
    "\133\001\002\000\066\012\131\017\116\020\107\025\103" +
    "\040\110\041\120\053\104\065\137\073\123\106\145\110" +
    "\124\111\115\112\140\145\143\156\135\172\112\200\130" +
    "\201\111\205\146\207\122\212\134\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\070\012\131\017\116" +
    "\020\107\025\103\040\110\041\120\053\104\065\137\073" +
    "\123\106\145\110\124\111\115\112\140\145\143\156\135" +
    "\172\112\200\130\201\111\205\146\206\210\207\122\212" +
    "\134\213\141\214\151\215\136\216\105\217\133\001\002" +
    "\000\004\172\202\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\006\167" +
    "\205\173\206\001\002\000\062\007\175\013\172\042\164" +
    "\066\201\076\174\101\166\111\156\114\177\125\176\131" +
    "\171\167\uff1f\171\161\173\uff1f\176\167\177\154\200\170" +
    "\201\163\202\155\203\160\204\173\206\157\207\162\210" +
    "\165\211\200\001\002\000\066\012\131\017\116\020\107" +
    "\025\103\040\110\041\120\053\104\065\137\073\123\106" +
    "\145\110\124\111\115\112\140\145\143\156\135\172\112" +
    "\200\130\201\111\205\146\207\122\212\134\213\141\214" +
    "\151\215\136\216\105\217\133\001\002\000\136\002\ufee1" +
    "\007\ufee1\010\ufee1\011\ufee1\013\ufee1\035\ufee1\042\ufee1\045" +
    "\ufee1\046\ufee1\061\ufee1\062\ufee1\063\ufee1\064\ufee1\066\ufee1" +
    "\067\ufee1\076\ufee1\077\ufee1\100\ufee1\101\ufee1\102\ufee1\111" +
    "\ufee1\114\ufee1\115\ufee1\125\ufee1\130\ufee1\131\ufee1\152\ufee1" +
    "\157\ufee1\164\ufee1\165\ufee1\167\ufee1\171\ufee1\173\ufee1\176" +
    "\ufee1\177\ufee1\200\ufee1\201\ufee1\202\ufee1\203\ufee1\204\ufee1" +
    "\206\ufee1\207\ufee1\210\ufee1\211\ufee1\212\ufee1\216\ufee1\001" +
    "\002\000\062\007\175\013\172\042\164\066\201\076\174" +
    "\101\166\111\156\114\177\125\176\131\171\167\uff1e\171" +
    "\161\173\uff1e\176\167\177\154\200\170\201\163\202\155" +
    "\203\160\204\173\206\157\207\162\210\165\211\200\001" +
    "\002\000\066\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\172\112\200\130\201\111" +
    "\205\146\207\122\212\134\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\136\002\ufeec\007\ufeec\010\ufeec" +
    "\011\ufeec\013\ufeec\035\ufeec\042\164\045\ufeec\046\ufeec\061" +
    "\ufeec\062\ufeec\063\ufeec\064\ufeec\066\ufeec\067\ufeec\076\ufeec" +
    "\077\ufeec\100\ufeec\101\ufeec\102\ufeec\111\ufeec\114\ufeec\115" +
    "\ufeec\125\ufeec\130\ufeec\131\ufeec\152\ufeec\157\ufeec\164\ufeec" +
    "\165\ufeec\167\ufeec\171\161\173\ufeec\176\167\177\154\200" +
    "\170\201\163\202\155\203\160\204\173\206\ufeec\207\ufeec" +
    "\210\ufeec\211\ufeec\212\ufeec\216\ufeec\001\002\000\136\002" +
    "\ufeee\007\ufeee\010\ufeee\011\ufeee\013\ufeee\035\ufeee\042\164" +
    "\045\ufeee\046\ufeee\061\ufeee\062\ufeee\063\ufeee\064\ufeee\066" +
    "\ufeee\067\ufeee\076\ufeee\077\ufeee\100\ufeee\101\ufeee\102\ufeee" +
    "\111\ufeee\114\ufeee\115\ufeee\125\ufeee\130\ufeee\131\ufeee\152" +
    "\ufeee\157\ufeee\164\ufeee\165\ufeee\167\ufeee\171\161\173\ufeee" +
    "\176\167\177\154\200\170\201\163\202\155\203\160\204" +
    "\173\206\ufeee\207\ufeee\210\ufeee\211\ufeee\212\ufeee\216\ufeee" +
    "\001\002\000\136\002\ufede\007\175\010\ufede\011\ufede\013" +
    "\172\035\ufede\042\164\045\ufede\046\ufede\061\ufede\062\ufede" +
    "\063\ufede\064\ufede\066\201\067\ufede\076\174\077\ufede\100" +
    "\ufede\101\166\102\ufede\111\156\114\ufede\115\ufede\125\176" +
    "\130\ufede\131\171\152\ufede\157\ufede\164\ufede\165\ufede\167" +
    "\ufede\171\161\173\ufede\176\167\177\154\200\170\201\163" +
    "\202\155\203\160\204\173\206\157\207\162\210\165\211" +
    "\200\212\ufede\216\ufede\001\002\000\136\002\ufee9\007\ufee9" +
    "\010\ufee9\011\ufee9\013\ufee9\035\ufee9\042\164\045\ufee9\046" +
    "\ufee9\061\ufee9\062\ufee9\063\ufee9\064\ufee9\066\ufee9\067\ufee9" +
    "\076\ufee9\077\ufee9\100\ufee9\101\ufee9\102\ufee9\111\ufee9\114" +
    "\ufee9\115\ufee9\125\ufee9\130\ufee9\131\ufee9\152\ufee9\157\ufee9" +
    "\164\ufee9\165\ufee9\167\ufee9\171\161\173\ufee9\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\157" +
    "\207\ufee9\210\165\211\200\212\ufee9\216\ufee9\001\002\000" +
    "\136\002\ufedf\007\ufedf\010\ufedf\011\ufedf\013\172\035\ufedf" +
    "\042\164\045\ufedf\046\ufedf\061\ufedf\062\ufedf\063\ufedf\064" +
    "\ufedf\066\201\067\ufedf\076\174\077\ufedf\100\ufedf\101\166" +
    "\102\ufedf\111\156\114\ufedf\115\ufedf\125\176\130\ufedf\131" +
    "\171\152\ufedf\157\ufedf\164\ufedf\165\ufedf\167\ufedf\171\161" +
    "\173\ufedf\176\167\177\154\200\170\201\163\202\155\203" +
    "\160\204\173\206\157\207\162\210\165\211\200\212\ufedf" +
    "\216\ufedf\001\002\000\136\002\ufefa\007\ufefa\010\ufefa\011" +
    "\ufefa\013\ufefa\035\ufefa\042\ufefa\045\ufefa\046\ufefa\061\ufefa" +
    "\062\ufefa\063\ufefa\064\ufefa\066\ufefa\067\ufefa\076\ufefa\077" +
    "\ufefa\100\ufefa\101\ufefa\102\ufefa\111\ufefa\114\ufefa\115\ufefa" +
    "\125\ufefa\130\ufefa\131\ufefa\152\ufefa\157\ufefa\164\ufefa\165" +
    "\ufefa\167\ufefa\171\ufefa\173\ufefa\176\ufefa\177\ufefa\200\ufefa" +
    "\201\ufefa\202\ufefa\203\ufefa\204\ufefa\206\ufefa\207\ufefa\210" +
    "\ufefa\211\ufefa\212\ufefa\216\ufefa\001\002\000\004\112\220" +
    "\001\002\000\136\002\ufef9\007\ufef9\010\ufef9\011\ufef9\013" +
    "\ufef9\035\ufef9\042\ufef9\045\ufef9\046\ufef9\061\ufef9\062\ufef9" +
    "\063\ufef9\064\ufef9\066\ufef9\067\ufef9\076\ufef9\077\ufef9\100" +
    "\ufef9\101\ufef9\102\ufef9\111\ufef9\114\ufef9\115\ufef9\125\ufef9" +
    "\130\ufef9\131\ufef9\152\ufef9\157\ufef9\164\ufef9\165\ufef9\167" +
    "\ufef9\171\ufef9\173\ufef9\176\ufef9\177\ufef9\200\ufef9\201\ufef9" +
    "\202\ufef9\203\ufef9\204\ufef9\206\ufef9\207\ufef9\210\ufef9\211" +
    "\ufef9\212\ufef9\216\ufef9\001\002\000\136\002\uff15\007\uff15" +
    "\010\uff15\011\uff15\013\uff15\035\uff15\042\uff15\045\uff15\046" +
    "\uff15\061\uff15\062\uff15\063\uff15\064\uff15\066\uff15\067\uff15" +
    "\076\uff15\077\uff15\100\uff15\101\uff15\102\uff15\111\uff15\114" +
    "\uff15\115\uff15\125\uff15\130\uff15\131\uff15\152\uff15\157\uff15" +
    "\164\uff15\165\uff15\167\uff15\171\uff15\173\uff15\176\uff15\177" +
    "\uff15\200\uff15\201\uff15\202\uff15\203\uff15\204\uff15\206\uff15" +
    "\207\uff15\210\uff15\211\uff15\212\uff15\216\uff15\001\002\000" +
    "\056\007\227\013\uff2c\042\uff2c\066\uff2c\076\uff2c\101\uff2c" +
    "\111\uff2c\114\uff2c\125\uff2c\131\uff2c\171\uff2c\176\uff2c\177" +
    "\uff2c\200\uff2c\201\uff2c\202\uff2c\203\uff2c\204\uff2c\206\uff2c" +
    "\207\uff2c\210\uff2c\211\uff2c\001\002\000\056\007\175\013" +
    "\172\042\164\066\201\076\174\101\166\111\156\114\177" +
    "\125\176\131\171\171\161\176\167\177\154\200\170\201" +
    "\163\202\155\203\160\204\173\206\157\207\162\210\165" +
    "\211\200\001\002\000\056\007\225\013\uff2d\042\uff2d\066" +
    "\uff2d\076\uff2d\101\uff2d\111\uff2d\114\uff2d\125\uff2d\131\uff2d" +
    "\171\uff2d\176\uff2d\177\uff2d\200\uff2d\201\uff2d\202\uff2d\203" +
    "\uff2d\204\uff2d\206\uff2d\207\uff2d\210\uff2d\211\uff2d\001\002" +
    "\000\066\012\131\017\116\020\107\025\103\040\110\041" +
    "\120\053\104\065\137\073\123\106\145\110\124\111\115" +
    "\112\140\145\143\156\135\172\112\200\130\201\111\205" +
    "\146\207\122\212\134\213\141\214\151\215\136\216\105" +
    "\217\133\001\002\000\136\002\ufee5\007\ufee5\010\ufee5\011" +
    "\ufee5\013\172\035\ufee5\042\164\045\ufee5\046\ufee5\061\ufee5" +
    "\062\ufee5\063\ufee5\064\ufee5\066\201\067\ufee5\076\174\077" +
    "\ufee5\100\ufee5\101\166\102\ufee5\111\156\114\ufee5\115\ufee5" +
    "\125\176\130\ufee5\131\171\152\ufee5\157\ufee5\164\ufee5\165" +
    "\ufee5\167\ufee5\171\161\173\ufee5\176\167\177\154\200\170" +
    "\201\163\202\155\203\160\204\173\206\157\207\162\210" +
    "\165\211\200\212\ufee5\216\ufee5\001\002\000\066\012\131" +
    "\017\116\020\107\025\103\040\110\041\120\053\104\065" +
    "\137\073\123\106\145\110\124\111\115\112\140\145\143" +
    "\156\135\172\112\200\130\201\111\205\146\207\122\212" +
    "\134\213\141\214\151\215\136\216\105\217\133\001\002" +
    "\000\136\002\ufee4\007\ufee4\010\ufee4\011\ufee4\013\172\035" +
    "\ufee4\042\164\045\ufee4\046\ufee4\061\ufee4\062\ufee4\063\ufee4" +
    "\064\ufee4\066\201\067\ufee4\076\174\077\ufee4\100\ufee4\101" +
    "\166\102\ufee4\111\156\114\ufee4\115\ufee4\125\176\130\ufee4" +
    "\131\171\152\ufee4\157\ufee4\164\ufee4\165\ufee4\167\ufee4\171" +
    "\161\173\ufee4\176\167\177\154\200\170\201\163\202\155" +
    "\203\160\204\173\206\157\207\162\210\165\211\200\212" +
    "\ufee4\216\ufee4\001\002\000\136\002\ufeea\007\ufeea\010\ufeea" +
    "\011\ufeea\013\ufeea\035\ufeea\042\164\045\ufeea\046\ufeea\061" +
    "\ufeea\062\ufeea\063\ufeea\064\ufeea\066\ufeea\067\ufeea\076\ufeea" +
    "\077\ufeea\100\ufeea\101\ufeea\102\ufeea\111\ufeea\114\ufeea\115" +
    "\ufeea\125\ufeea\130\ufeea\131\ufeea\152\ufeea\157\ufeea\164\ufeea" +
    "\165\ufeea\167\ufeea\171\161\173\ufeea\176\167\177\154\200" +
    "\170\201\163\202\155\203\160\204\173\206\157\207\ufeea" +
    "\210\165\211\200\212\ufeea\216\ufeea\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\136\002\uff19\007\uff19\010\uff19\011\uff19\013\uff19" +
    "\035\uff19\042\164\045\uff19\046\uff19\061\uff19\062\uff19\063" +
    "\uff19\064\uff19\066\uff19\067\uff19\076\uff19\077\uff19\100\uff19" +
    "\101\uff19\102\uff19\111\uff19\114\uff19\115\uff19\125\uff19\130" +
    "\uff19\131\uff19\152\uff19\157\uff19\164\uff19\165\uff19\167\uff19" +
    "\171\161\173\uff19\176\167\177\154\200\uff19\201\uff19\202" +
    "\155\203\160\204\173\206\uff19\207\uff19\210\uff19\211\uff19" +
    "\212\uff19\216\uff19\001\002\000\060\007\175\013\172\042" +
    "\164\066\201\076\174\101\166\111\156\114\177\125\176" +
    "\131\171\171\161\176\167\177\154\200\170\201\163\202" +
    "\155\203\160\204\173\206\157\207\162\210\165\211\200" +
    "\212\235\001\002\000\136\002\uff12\007\uff12\010\uff12\011" +
    "\uff12\013\uff12\035\uff12\042\uff12\045\uff12\046\uff12\061\uff12" +
    "\062\uff12\063\uff12\064\uff12\066\uff12\067\uff12\076\uff12\077" +
    "\uff12\100\uff12\101\uff12\102\uff12\111\uff12\114\uff12\115\uff12" +
    "\125\uff12\130\uff12\131\uff12\152\uff12\157\uff12\164\uff12\165" +
    "\uff12\167\uff12\171\uff12\173\uff12\176\uff12\177\uff12\200\uff12" +
    "\201\uff12\202\uff12\203\uff12\204\uff12\206\uff12\207\uff12\210" +
    "\uff12\211\uff12\212\uff12\216\uff12\001\002\000\066\012\131" +
    "\017\116\020\107\025\103\040\110\041\120\053\104\065" +
    "\137\073\123\106\145\110\124\111\115\112\140\145\143" +
    "\156\135\172\112\200\130\201\111\205\146\207\122\212" +
    "\134\213\141\214\151\215\136\216\105\217\133\001\002" +
    "\000\136\002\uff13\007\uff13\010\uff13\011\uff13\013\uff13\035" +
    "\uff13\042\164\045\uff13\046\uff13\061\uff13\062\uff13\063\uff13" +
    "\064\uff13\066\uff13\067\uff13\076\uff13\077\uff13\100\uff13\101" +
    "\uff13\102\uff13\111\uff13\114\uff13\115\uff13\125\uff13\130\uff13" +
    "\131\uff13\152\uff13\157\uff13\164\uff13\165\uff13\167\uff13\171" +
    "\161\173\uff13\176\167\177\154\200\uff13\201\uff13\202\155" +
    "\203\160\204\173\206\uff13\207\uff13\210\uff13\211\uff13\212" +
    "\uff13\216\uff13\001\002\000\136\002\uff1c\007\uff1c\010\uff1c" +
    "\011\uff1c\013\uff1c\035\uff1c\042\uff1c\045\uff1c\046\uff1c\061" +
    "\uff1c\062\uff1c\063\uff1c\064\uff1c\066\uff1c\067\uff1c\076\uff1c" +
    "\077\uff1c\100\uff1c\101\uff1c\102\uff1c\111\uff1c\114\uff1c\115" +
    "\uff1c\125\uff1c\130\uff1c\131\uff1c\152\uff1c\157\uff1c\164\uff1c" +
    "\165\uff1c\167\uff1c\171\uff1c\173\uff1c\176\uff1c\177\uff1c\200" +
    "\uff1c\201\uff1c\202\155\203\160\204\173\206\uff1c\207\uff1c" +
    "\210\uff1c\211\uff1c\212\uff1c\216\uff1c\001\002\000\136\002" +
    "\ufeeb\007\ufeeb\010\ufeeb\011\ufeeb\013\ufeeb\035\ufeeb\042\164" +
    "\045\ufeeb\046\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb\066" +
    "\ufeeb\067\ufeeb\076\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb\102\ufeeb" +
    "\111\ufeeb\114\ufeeb\115\ufeeb\125\ufeeb\130\ufeeb\131\ufeeb\152" +
    "\ufeeb\157\ufeeb\164\ufeeb\165\ufeeb\167\ufeeb\171\161\173\ufeeb" +
    "\176\167\177\154\200\170\201\163\202\155\203\160\204" +
    "\173\206\157\207\ufeeb\210\165\211\200\212\ufeeb\216\ufeeb" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\136\002" +
    "\ufeed\007\ufeed\010\ufeed\011\ufeed\013\ufeed\035\ufeed\042\164" +
    "\045\ufeed\046\ufeed\061\ufeed\062\ufeed\063\ufeed\064\ufeed\066" +
    "\ufeed\067\ufeed\076\ufeed\077\ufeed\100\ufeed\101\ufeed\102\ufeed" +
    "\111\ufeed\114\ufeed\115\ufeed\125\ufeed\130\ufeed\131\ufeed\152" +
    "\ufeed\157\ufeed\164\ufeed\165\ufeed\167\ufeed\171\161\173\ufeed" +
    "\176\167\177\154\200\170\201\163\202\155\203\160\204" +
    "\173\206\ufeed\207\ufeed\210\ufeed\211\ufeed\212\ufeed\216\ufeed" +
    "\001\002\000\136\002\ufeef\007\ufeef\010\ufeef\011\ufeef\013" +
    "\ufeef\035\ufeef\042\164\045\ufeef\046\ufeef\061\ufeef\062\ufeef" +
    "\063\ufeef\064\ufeef\066\ufeef\067\ufeef\076\ufeef\077\ufeef\100" +
    "\ufeef\101\ufeef\102\ufeef\111\ufeef\114\ufeef\115\ufeef\125\ufeef" +
    "\130\ufeef\131\ufeef\152\ufeef\157\ufeef\164\ufeef\165\ufeef\167" +
    "\ufeef\171\161\173\ufeef\176\167\177\154\200\170\201\163" +
    "\202\155\203\160\204\173\206\ufeef\207\ufeef\210\ufeef\211" +
    "\ufeef\212\ufeef\216\ufeef\001\002\000\136\002\ufef0\007\ufef0" +
    "\010\ufef0\011\ufef0\013\ufef0\035\ufef0\042\164\045\ufef0\046" +
    "\ufef0\061\ufef0\062\ufef0\063\ufef0\064\ufef0\066\ufef0\067\ufef0" +
    "\076\ufef0\077\ufef0\100\ufef0\101\ufef0\102\ufef0\111\ufef0\114" +
    "\ufef0\115\ufef0\125\ufef0\130\ufef0\131\ufef0\152\ufef0\157\ufef0" +
    "\164\ufef0\165\ufef0\167\ufef0\171\161\173\ufef0\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\ufef0" +
    "\207\ufef0\210\ufef0\211\ufef0\212\ufef0\216\ufef0\001\002\000" +
    "\136\002\uff1a\007\uff1a\010\uff1a\011\uff1a\013\uff1a\035\uff1a" +
    "\042\uff1a\045\uff1a\046\uff1a\061\uff1a\062\uff1a\063\uff1a\064" +
    "\uff1a\066\uff1a\067\uff1a\076\uff1a\077\uff1a\100\uff1a\101\uff1a" +
    "\102\uff1a\111\uff1a\114\uff1a\115\uff1a\125\uff1a\130\uff1a\131" +
    "\uff1a\152\uff1a\157\uff1a\164\uff1a\165\uff1a\167\uff1a\171\uff1a" +
    "\173\uff1a\176\uff1a\177\uff1a\200\uff1a\201\uff1a\202\155\203" +
    "\160\204\173\206\uff1a\207\uff1a\210\uff1a\211\uff1a\212\uff1a" +
    "\216\uff1a\001\002\000\066\012\131\017\116\020\107\025" +
    "\103\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\172\112\200" +
    "\130\201\111\205\146\207\122\212\134\213\141\214\151" +
    "\215\136\216\105\217\133\001\002\000\136\002\uff18\007" +
    "\uff18\010\uff18\011\uff18\013\uff18\035\uff18\042\164\045\uff18" +
    "\046\uff18\061\uff18\062\uff18\063\uff18\064\uff18\066\uff18\067" +
    "\uff18\076\uff18\077\uff18\100\uff18\101\uff18\102\uff18\111\uff18" +
    "\114\uff18\115\uff18\125\uff18\130\uff18\131\uff18\152\uff18\157" +
    "\uff18\164\uff18\165\uff18\167\uff18\171\161\173\uff18\176\167" +
    "\177\154\200\uff18\201\uff18\202\155\203\160\204\173\206" +
    "\uff18\207\uff18\210\uff18\211\uff18\212\uff18\216\uff18\001\002" +
    "\000\060\007\175\013\172\042\164\066\201\076\174\101" +
    "\166\111\156\114\177\125\176\131\171\171\161\176\167" +
    "\177\154\200\170\201\163\202\155\203\160\204\173\206" +
    "\157\207\162\210\165\211\200\212\253\001\002\000\136" +
    "\002\uff11\007\uff11\010\uff11\011\uff11\013\uff11\035\uff11\042" +
    "\uff11\045\uff11\046\uff11\061\uff11\062\uff11\063\uff11\064\uff11" +
    "\066\uff11\067\uff11\076\uff11\077\uff11\100\uff11\101\uff11\102" +
    "\uff11\111\uff11\114\uff11\115\uff11\125\uff11\130\uff11\131\uff11" +
    "\152\uff11\157\uff11\164\uff11\165\uff11\167\uff11\171\uff11\173" +
    "\uff11\176\uff11\177\uff11\200\uff11\201\uff11\202\uff11\203\uff11" +
    "\204\uff11\206\uff11\207\uff11\210\uff11\211\uff11\212\uff11\216" +
    "\uff11\001\002\000\066\012\131\017\116\020\107\025\103" +
    "\040\110\041\120\053\104\065\137\073\123\106\145\110" +
    "\124\111\115\112\140\145\143\156\135\172\112\200\130" +
    "\201\111\205\146\207\122\212\134\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\136\002\ufef1\007\ufef1" +
    "\010\ufef1\011\ufef1\013\ufef1\035\ufef1\042\164\045\ufef1\046" +
    "\ufef1\061\ufef1\062\ufef1\063\ufef1\064\ufef1\066\ufef1\067\ufef1" +
    "\076\ufef1\077\ufef1\100\ufef1\101\ufef1\102\ufef1\111\ufef1\114" +
    "\ufef1\115\ufef1\125\ufef1\130\ufef1\131\ufef1\152\ufef1\157\ufef1" +
    "\164\ufef1\165\ufef1\167\ufef1\171\161\173\ufef1\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\ufef1" +
    "\207\ufef1\210\ufef1\211\ufef1\212\ufef1\216\ufef1\001\002\000" +
    "\136\002\uff1d\007\uff1d\010\uff1d\011\uff1d\013\uff1d\035\uff1d" +
    "\042\uff1d\045\uff1d\046\uff1d\061\uff1d\062\uff1d\063\uff1d\064" +
    "\uff1d\066\uff1d\067\uff1d\076\uff1d\077\uff1d\100\uff1d\101\uff1d" +
    "\102\uff1d\111\uff1d\114\uff1d\115\uff1d\125\uff1d\130\uff1d\131" +
    "\uff1d\152\uff1d\157\uff1d\164\uff1d\165\uff1d\167\uff1d\171\uff1d" +
    "\173\uff1d\176\uff1d\177\uff1d\200\uff1d\201\uff1d\202\155\203" +
    "\160\204\173\206\uff1d\207\uff1d\210\uff1d\211\uff1d\212\uff1d" +
    "\216\uff1d\001\002\000\136\002\uff16\007\uff16\010\uff16\011" +
    "\uff16\013\uff16\035\uff16\042\uff16\045\uff16\046\uff16\061\uff16" +
    "\062\uff16\063\uff16\064\uff16\066\uff16\067\uff16\076\uff16\077" +
    "\uff16\100\uff16\101\uff16\102\uff16\111\uff16\114\uff16\115\uff16" +
    "\125\uff16\130\uff16\131\uff16\152\uff16\157\uff16\164\uff16\165" +
    "\uff16\167\uff16\171\uff16\173\uff16\176\uff16\177\uff16\200\uff16" +
    "\201\uff16\202\uff16\203\uff16\204\uff16\206\uff16\207\uff16\210" +
    "\uff16\211\uff16\212\uff16\216\uff16\001\002\000\136\002\ufef2" +
    "\007\ufef2\010\ufef2\011\ufef2\013\ufef2\035\ufef2\042\164\045" +
    "\ufef2\046\ufef2\061\ufef2\062\ufef2\063\ufef2\064\ufef2\066\ufef2" +
    "\067\ufef2\076\ufef2\077\ufef2\100\ufef2\101\ufef2\102\ufef2\111" +
    "\ufef2\114\ufef2\115\ufef2\125\ufef2\130\ufef2\131\ufef2\152\ufef2" +
    "\157\ufef2\164\ufef2\165\ufef2\167\ufef2\171\161\173\ufef2\176" +
    "\167\177\154\200\170\201\163\202\155\203\160\204\173" +
    "\206\ufef2\207\ufef2\210\ufef2\211\ufef2\212\ufef2\216\ufef2\001" +
    "\002\000\066\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\172\112\200\130\201\111" +
    "\205\146\207\122\212\134\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\066\012\131\017\116\020\107" +
    "\025\103\040\110\041\120\053\104\065\137\073\123\106" +
    "\145\110\124\111\115\112\140\145\143\156\135\172\112" +
    "\200\130\201\111\205\146\207\122\212\134\213\141\214" +
    "\151\215\136\216\105\217\133\001\002\000\066\012\131" +
    "\017\116\020\107\025\103\040\110\041\120\053\104\065" +
    "\137\073\123\106\145\110\124\111\115\112\140\145\143" +
    "\156\135\172\112\200\130\201\111\205\146\207\122\212" +
    "\134\213\141\214\151\215\136\216\105\217\133\001\002" +
    "\000\066\012\131\017\116\020\107\025\103\040\110\041" +
    "\120\053\104\065\137\073\123\106\145\110\124\111\115" +
    "\112\140\145\143\156\135\172\112\200\130\201\111\205" +
    "\146\207\122\212\134\213\141\214\151\215\136\216\105" +
    "\217\133\001\002\000\004\172\266\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\006\167\205\173\270\001\002\000\136\002\ufee0" +
    "\007\ufee0\010\ufee0\011\ufee0\013\ufee0\035\ufee0\042\ufee0\045" +
    "\ufee0\046\ufee0\061\ufee0\062\ufee0\063\ufee0\064\ufee0\066\ufee0" +
    "\067\ufee0\076\ufee0\077\ufee0\100\ufee0\101\ufee0\102\ufee0\111" +
    "\ufee0\114\ufee0\115\ufee0\125\ufee0\130\ufee0\131\ufee0\152\ufee0" +
    "\157\ufee0\164\ufee0\165\ufee0\167\ufee0\171\ufee0\173\ufee0\176" +
    "\ufee0\177\ufee0\200\ufee0\201\ufee0\202\ufee0\203\ufee0\204\ufee0" +
    "\206\ufee0\207\ufee0\210\ufee0\211\ufee0\212\ufee0\216\ufee0\001" +
    "\002\000\136\002\ufee8\007\ufee8\010\ufee8\011\ufee8\013\ufee8" +
    "\035\ufee8\042\164\045\ufee8\046\ufee8\061\ufee8\062\ufee8\063" +
    "\ufee8\064\ufee8\066\ufee8\067\ufee8\076\ufee8\077\ufee8\100\ufee8" +
    "\101\ufee8\102\ufee8\111\ufee8\114\ufee8\115\ufee8\125\ufee8\130" +
    "\ufee8\131\ufee8\152\ufee8\157\ufee8\164\ufee8\165\ufee8\167\ufee8" +
    "\171\161\173\ufee8\176\167\177\154\200\170\201\163\202" +
    "\155\203\160\204\173\206\157\207\ufee8\210\165\211\200" +
    "\212\ufee8\216\ufee8\001\002\000\136\002\ufee6\007\ufee6\010" +
    "\ufee6\011\ufee6\013\ufee6\035\ufee6\042\164\045\ufee6\046\ufee6" +
    "\061\ufee6\062\ufee6\063\ufee6\064\ufee6\066\ufee6\067\ufee6\076" +
    "\ufee6\077\ufee6\100\ufee6\101\ufee6\102\ufee6\111\ufee6\114\ufee6" +
    "\115\ufee6\125\ufee6\130\ufee6\131\ufee6\152\ufee6\157\ufee6\164" +
    "\ufee6\165\ufee6\167\ufee6\171\161\173\ufee6\176\167\177\154" +
    "\200\170\201\163\202\155\203\160\204\173\206\157\207" +
    "\ufee6\210\165\211\200\212\ufee6\216\ufee6\001\002\000\136" +
    "\002\ufee7\007\ufee7\010\ufee7\011\ufee7\013\ufee7\035\ufee7\042" +
    "\164\045\ufee7\046\ufee7\061\ufee7\062\ufee7\063\ufee7\064\ufee7" +
    "\066\ufee7\067\ufee7\076\ufee7\077\ufee7\100\ufee7\101\ufee7\102" +
    "\ufee7\111\ufee7\114\ufee7\115\ufee7\125\ufee7\130\ufee7\131\ufee7" +
    "\152\ufee7\157\ufee7\164\ufee7\165\ufee7\167\ufee7\171\161\173" +
    "\ufee7\176\167\177\154\200\170\201\163\202\155\203\160" +
    "\204\173\206\157\207\ufee7\210\165\211\200\212\ufee7\216" +
    "\ufee7\001\002\000\056\007\300\013\uff2c\042\uff2c\066\uff2c" +
    "\076\uff2c\101\uff2c\111\uff2c\114\uff2c\125\uff2c\131\uff2c\171" +
    "\uff2c\176\uff2c\177\uff2c\200\uff2c\201\uff2c\202\uff2c\203\uff2c" +
    "\204\uff2c\206\uff2c\207\uff2c\210\uff2c\211\uff2c\001\002\000" +
    "\056\007\276\013\uff2d\042\uff2d\066\uff2d\076\uff2d\101\uff2d" +
    "\111\uff2d\114\uff2d\125\uff2d\131\uff2d\171\uff2d\176\uff2d\177" +
    "\uff2d\200\uff2d\201\uff2d\202\uff2d\203\uff2d\204\uff2d\206\uff2d" +
    "\207\uff2d\210\uff2d\211\uff2d\001\002\000\066\012\131\017" +
    "\116\020\107\025\103\040\110\041\120\053\104\065\137" +
    "\073\123\106\145\110\124\111\115\112\140\145\143\156" +
    "\135\172\112\200\130\201\111\205\146\207\122\212\134" +
    "\213\141\214\151\215\136\216\105\217\133\001\002\000" +
    "\136\002\ufee3\007\ufee3\010\ufee3\011\ufee3\013\172\035\ufee3" +
    "\042\164\045\ufee3\046\ufee3\061\ufee3\062\ufee3\063\ufee3\064" +
    "\ufee3\066\201\067\ufee3\076\174\077\ufee3\100\ufee3\101\166" +
    "\102\ufee3\111\156\114\ufee3\115\ufee3\125\176\130\ufee3\131" +
    "\171\152\ufee3\157\ufee3\164\ufee3\165\ufee3\167\ufee3\171\161" +
    "\173\ufee3\176\167\177\154\200\170\201\163\202\155\203" +
    "\160\204\173\206\157\207\162\210\165\211\200\212\ufee3" +
    "\216\ufee3\001\002\000\066\012\131\017\116\020\107\025" +
    "\103\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\172\112\200" +
    "\130\201\111\205\146\207\122\212\134\213\141\214\151" +
    "\215\136\216\105\217\133\001\002\000\136\002\ufee2\007" +
    "\ufee2\010\ufee2\011\ufee2\013\172\035\ufee2\042\164\045\ufee2" +
    "\046\ufee2\061\ufee2\062\ufee2\063\ufee2\064\ufee2\066\201\067" +
    "\ufee2\076\174\077\ufee2\100\ufee2\101\166\102\ufee2\111\156" +
    "\114\ufee2\115\ufee2\125\176\130\ufee2\131\171\152\ufee2\157" +
    "\ufee2\164\ufee2\165\ufee2\167\ufee2\171\161\173\ufee2\176\167" +
    "\177\154\200\170\201\163\202\155\203\160\204\173\206" +
    "\157\207\162\210\165\211\200\212\ufee2\216\ufee2\001\002" +
    "\000\136\002\uff17\007\uff17\010\uff17\011\uff17\013\uff17\035" +
    "\uff17\042\uff17\045\uff17\046\uff17\061\uff17\062\uff17\063\uff17" +
    "\064\uff17\066\uff17\067\uff17\076\uff17\077\uff17\100\uff17\101" +
    "\uff17\102\uff17\111\uff17\114\uff17\115\uff17\125\uff17\130\uff17" +
    "\131\uff17\152\uff17\157\uff17\164\uff17\165\uff17\167\uff17\171" +
    "\uff17\173\uff17\176\uff17\177\uff17\200\uff17\201\uff17\202\uff17" +
    "\203\uff17\204\uff17\206\uff17\207\uff17\210\uff17\211\uff17\212" +
    "\uff17\216\uff17\001\002\000\136\002\uff1b\007\uff1b\010\uff1b" +
    "\011\uff1b\013\uff1b\035\uff1b\042\uff1b\045\uff1b\046\uff1b\061" +
    "\uff1b\062\uff1b\063\uff1b\064\uff1b\066\uff1b\067\uff1b\076\uff1b" +
    "\077\uff1b\100\uff1b\101\uff1b\102\uff1b\111\uff1b\114\uff1b\115" +
    "\uff1b\125\uff1b\130\uff1b\131\uff1b\152\uff1b\157\uff1b\164\uff1b" +
    "\165\uff1b\167\uff1b\171\uff1b\173\uff1b\176\uff1b\177\uff1b\200" +
    "\uff1b\201\uff1b\202\155\203\160\204\173\206\uff1b\207\uff1b" +
    "\210\uff1b\211\uff1b\212\uff1b\216\uff1b\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\006\167\205\173\306\001\002\000\136\002\uff27" +
    "\007\uff27\010\uff27\011\uff27\013\uff27\035\uff27\042\uff27\045" +
    "\uff27\046\uff27\061\uff27\062\uff27\063\uff27\064\uff27\066\uff27" +
    "\067\uff27\076\uff27\077\uff27\100\uff27\101\uff27\102\uff27\111" +
    "\uff27\114\uff27\115\uff27\125\uff27\130\uff27\131\uff27\152\uff27" +
    "\157\uff27\164\uff27\165\uff27\167\uff27\171\uff27\173\uff27\176" +
    "\uff27\177\uff27\200\uff27\201\uff27\202\uff27\203\uff27\204\uff27" +
    "\206\uff27\207\uff27\210\uff27\211\uff27\212\uff27\216\uff27\001" +
    "\002\000\070\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\172\112\173\315\200\130" +
    "\201\111\205\146\207\122\212\134\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\004\212\311\001\002" +
    "\000\140\002\ufeda\007\ufeda\010\ufeda\011\ufeda\013\ufeda\035" +
    "\ufeda\042\ufeda\045\ufeda\046\ufeda\061\ufeda\062\ufeda\063\ufeda" +
    "\064\ufeda\066\ufeda\067\ufeda\076\ufeda\077\ufeda\100\ufeda\101" +
    "\ufeda\102\ufeda\111\ufeda\114\ufeda\115\ufeda\125\ufeda\130\ufeda" +
    "\131\ufeda\152\ufeda\157\ufeda\164\ufeda\165\ufeda\167\ufeda\170" +
    "\312\171\ufeda\173\ufeda\176\ufeda\177\ufeda\200\ufeda\201\ufeda" +
    "\202\ufeda\203\ufeda\204\ufeda\206\ufeda\207\ufeda\210\ufeda\211" +
    "\ufeda\212\ufeda\216\ufeda\001\002\000\004\212\313\001\002" +
    "\000\136\002\ufed9\007\ufed9\010\ufed9\011\ufed9\013\ufed9\035" +
    "\ufed9\042\ufed9\045\ufed9\046\ufed9\061\ufed9\062\ufed9\063\ufed9" +
    "\064\ufed9\066\ufed9\067\ufed9\076\ufed9\077\ufed9\100\ufed9\101" +
    "\ufed9\102\ufed9\111\ufed9\114\ufed9\115\ufed9\125\ufed9\130\ufed9" +
    "\131\ufed9\152\ufed9\157\ufed9\164\ufed9\165\ufed9\167\ufed9\171" +
    "\ufed9\173\ufed9\176\ufed9\177\ufed9\200\ufed9\201\ufed9\202\ufed9" +
    "\203\ufed9\204\ufed9\206\ufed9\207\ufed9\210\ufed9\211\ufed9\212" +
    "\ufed9\216\ufed9\001\002\000\006\167\316\173\317\001\002" +
    "\000\136\002\uff29\007\uff29\010\uff29\011\uff29\013\uff29\035" +
    "\uff29\042\uff29\045\uff29\046\uff29\061\uff29\062\uff29\063\uff29" +
    "\064\uff29\066\uff29\067\uff29\076\uff29\077\uff29\100\uff29\101" +
    "\uff29\102\uff29\111\uff29\114\uff29\115\uff29\125\uff29\130\uff29" +
    "\131\uff29\152\uff29\157\uff29\164\uff29\165\uff29\167\uff29\171" +
    "\uff29\173\uff29\176\uff29\177\uff29\200\uff29\201\uff29\202\uff29" +
    "\203\uff29\204\uff29\206\uff29\207\uff29\210\uff29\211\uff29\212" +
    "\uff29\216\uff29\001\002\000\066\012\131\017\116\020\107" +
    "\025\103\040\110\041\120\053\104\065\137\073\320\106" +
    "\145\110\124\111\115\112\140\145\143\156\135\172\112" +
    "\200\130\201\111\205\146\207\122\212\134\213\141\214" +
    "\151\215\136\216\105\217\133\001\002\000\136\002\uff28" +
    "\007\uff28\010\uff28\011\uff28\013\uff28\035\uff28\042\uff28\045" +
    "\uff28\046\uff28\061\uff28\062\uff28\063\uff28\064\uff28\066\uff28" +
    "\067\uff28\076\uff28\077\uff28\100\uff28\101\uff28\102\uff28\111" +
    "\uff28\114\uff28\115\uff28\125\uff28\130\uff28\131\uff28\152\uff28" +
    "\157\uff28\164\uff28\165\uff28\167\uff28\171\uff28\173\uff28\176" +
    "\uff28\177\uff28\200\uff28\201\uff28\202\uff28\203\uff28\204\uff28" +
    "\206\uff28\207\uff28\210\uff28\211\uff28\212\uff28\216\uff28\001" +
    "\002\000\066\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\172\112\200\130\201\111" +
    "\205\146\207\122\212\134\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\060\007\175\013\172\042\164" +
    "\066\201\076\174\101\166\111\156\114\177\125\176\131" +
    "\171\171\161\176\167\177\154\200\170\201\163\202\155" +
    "\203\160\204\173\206\157\207\162\210\165\211\200\212" +
    "\322\001\002\000\006\173\323\200\236\001\002\000\136" +
    "\002\uff10\007\uff10\010\uff10\011\uff10\013\uff10\035\uff10\042" +
    "\uff10\045\uff10\046\uff10\061\uff10\062\uff10\063\uff10\064\uff10" +
    "\066\uff10\067\uff10\076\uff10\077\uff10\100\uff10\101\uff10\102" +
    "\uff10\111\uff10\114\uff10\115\uff10\125\uff10\130\uff10\131\uff10" +
    "\152\uff10\157\uff10\164\uff10\165\uff10\167\uff10\171\uff10\173" +
    "\uff10\176\uff10\177\uff10\200\uff10\201\uff10\202\uff10\203\uff10" +
    "\204\uff10\206\uff10\207\uff10\210\uff10\211\uff10\212\uff10\216" +
    "\uff10\001\002\000\136\002\uff09\007\175\010\uff09\011\uff09" +
    "\013\172\035\uff09\042\164\045\uff09\046\uff09\061\uff09\062" +
    "\uff09\063\uff09\064\uff09\066\201\067\uff09\076\174\077\uff09" +
    "\100\uff09\101\166\102\uff09\111\156\114\177\115\uff09\125" +
    "\176\130\uff09\131\171\152\uff09\157\uff09\164\uff09\165\uff09" +
    "\167\uff09\171\161\173\uff09\176\167\177\154\200\170\201" +
    "\163\202\155\203\160\204\173\206\157\207\162\210\165" +
    "\211\200\212\uff09\216\uff09\001\002\000\136\002\uff2e\007" +
    "\uff2e\010\uff2e\011\uff2e\013\uff2e\035\uff2e\042\164\045\uff2e" +
    "\046\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\066\uff2e\067" +
    "\uff2e\076\uff2e\077\uff2e\100\uff2e\101\uff2e\102\uff2e\111\uff2e" +
    "\114\uff2e\115\uff2e\125\uff2e\130\uff2e\131\uff2e\152\uff2e\157" +
    "\uff2e\164\uff2e\165\uff2e\167\uff2e\171\161\173\uff2e\176\167" +
    "\177\154\200\uff2e\201\uff2e\202\155\203\160\204\173\206" +
    "\uff2e\207\uff2e\210\uff2e\211\uff2e\212\uff2e\216\uff2e\001\002" +
    "\000\074\005\331\012\131\017\116\020\107\025\103\037" +
    "\332\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\171\330\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\004\173" +
    "\342\001\002\000\004\173\ufeff\001\002\000\070\012\131" +
    "\017\116\020\107\025\103\040\110\041\120\053\104\065" +
    "\137\073\123\106\145\110\124\111\115\112\140\145\143" +
    "\156\135\171\340\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\074\002\uff47\007\175\013" +
    "\172\042\164\064\uff47\066\201\076\174\101\166\102\uff47" +
    "\111\156\114\177\115\uff47\125\176\131\171\157\uff47\167" +
    "\uff47\171\161\173\uff47\176\167\177\154\200\170\201\163" +
    "\202\155\203\160\204\173\206\157\207\162\210\165\211" +
    "\200\001\002\000\006\167\335\173\ufefd\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\074\002\uff46\007\175\013\172\042\164\064" +
    "\uff46\066\201\076\174\101\166\102\uff46\111\156\114\177" +
    "\115\uff46\125\176\131\171\157\uff46\167\uff46\171\161\173" +
    "\uff46\176\167\177\154\200\170\201\163\202\155\203\160" +
    "\204\173\206\157\207\162\210\165\211\200\001\002\000" +
    "\006\167\335\173\ufefb\001\002\000\004\173\ufefe\001\002" +
    "\000\006\167\335\173\ufefc\001\002\000\136\002\uff07\007" +
    "\uff07\010\uff07\011\uff07\013\uff07\035\uff07\042\uff07\045\uff07" +
    "\046\uff07\061\uff07\062\uff07\063\uff07\064\uff07\066\uff07\067" +
    "\uff07\076\uff07\077\uff07\100\uff07\101\uff07\102\uff07\111\uff07" +
    "\114\uff07\115\uff07\125\uff07\130\uff07\131\uff07\152\uff07\157" +
    "\uff07\164\uff07\165\uff07\167\uff07\171\uff07\173\uff07\176\uff07" +
    "\177\uff07\200\uff07\201\uff07\202\uff07\203\uff07\204\uff07\206" +
    "\uff07\207\uff07\210\uff07\211\uff07\212\uff07\216\uff07\001\002" +
    "\000\060\007\175\013\172\042\164\066\201\076\174\101" +
    "\166\111\156\114\177\125\176\131\171\171\161\176\167" +
    "\177\154\200\170\201\163\202\155\203\160\204\173\206" +
    "\157\207\162\210\165\211\200\212\344\001\002\000\004" +
    "\200\236\001\002\000\136\002\ufedc\007\ufedc\010\ufedc\011" +
    "\ufedc\013\172\035\ufedc\042\164\045\ufedc\046\ufedc\061\ufedc" +
    "\062\ufedc\063\ufedc\064\ufedc\066\201\067\ufedc\076\174\077" +
    "\ufedc\100\ufedc\101\166\102\ufedc\111\ufedc\114\ufedc\115\ufedc" +
    "\125\176\130\ufedc\131\171\152\ufedc\157\ufedc\164\ufedc\165" +
    "\ufedc\167\ufedc\171\161\173\ufedc\176\167\177\154\200\170" +
    "\201\163\202\155\203\160\204\173\206\157\207\ufedc\210" +
    "\165\211\200\212\ufedc\216\ufedc\001\002\000\010\045\353" +
    "\046\uff30\164\354\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\060\007" +
    "\175\013\172\042\164\066\201\076\174\101\166\111\156" +
    "\114\177\125\176\131\171\164\347\171\161\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\157" +
    "\207\162\210\165\211\200\001\002\000\010\045\353\046" +
    "\uff30\164\354\001\002\000\004\046\361\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\060\007\175\013\172\042" +
    "\164\066\201\076\174\101\166\111\156\114\177\125\176" +
    "\131\171\152\356\171\161\176\167\177\154\200\170\201" +
    "\163\202\155\203\160\204\173\206\157\207\162\210\165" +
    "\211\200\001\002\000\066\012\131\017\116\020\107\025" +
    "\103\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\172\112\200" +
    "\130\201\111\205\146\207\122\212\134\213\141\214\151" +
    "\215\136\216\105\217\133\001\002\000\064\007\175\013" +
    "\172\042\164\045\uff32\046\uff32\066\201\076\174\101\166" +
    "\111\156\114\177\125\176\131\171\164\uff32\171\161\176" +
    "\167\177\154\200\170\201\163\202\155\203\160\204\173" +
    "\206\157\207\162\210\165\211\200\001\002\000\060\007" +
    "\175\013\172\042\164\046\uff31\066\201\076\174\101\166" +
    "\111\156\114\177\125\176\131\171\171\161\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\157" +
    "\207\162\210\165\211\200\001\002\000\136\002\uff35\007" +
    "\uff35\010\uff35\011\uff35\013\uff35\035\uff35\042\uff35\045\uff35" +
    "\046\uff35\061\uff35\062\uff35\063\uff35\064\uff35\066\uff35\067" +
    "\uff35\076\uff35\077\uff35\100\uff35\101\uff35\102\uff35\111\uff35" +
    "\114\uff35\115\uff35\125\uff35\130\uff35\131\uff35\152\uff35\157" +
    "\uff35\164\uff35\165\uff35\167\uff35\171\uff35\173\uff35\176\uff35" +
    "\177\uff35\200\uff35\201\uff35\202\uff35\203\uff35\204\uff35\206" +
    "\uff35\207\uff35\210\uff35\211\uff35\212\uff35\216\uff35\001\002" +
    "\000\060\007\175\013\172\042\164\066\201\076\174\101" +
    "\166\111\156\114\177\125\176\131\171\152\363\171\161" +
    "\176\167\177\154\200\170\201\163\202\155\203\160\204" +
    "\173\206\157\207\162\210\165\211\200\001\002\000\066" +
    "\012\131\017\116\020\107\025\103\040\110\041\120\053" +
    "\104\065\137\073\123\106\145\110\124\111\115\112\140" +
    "\145\143\156\135\172\112\200\130\201\111\205\146\207" +
    "\122\212\134\213\141\214\151\215\136\216\105\217\133" +
    "\001\002\000\064\007\175\013\172\042\164\045\uff33\046" +
    "\uff33\066\201\076\174\101\166\111\156\114\177\125\176" +
    "\131\171\164\uff33\171\161\176\167\177\154\200\170\201" +
    "\163\202\155\203\160\204\173\206\157\207\162\210\165" +
    "\211\200\001\002\000\004\046\366\001\002\000\136\002" +
    "\uff34\007\uff34\010\uff34\011\uff34\013\uff34\035\uff34\042\uff34" +
    "\045\uff34\046\uff34\061\uff34\062\uff34\063\uff34\064\uff34\066" +
    "\uff34\067\uff34\076\uff34\077\uff34\100\uff34\101\uff34\102\uff34" +
    "\111\uff34\114\uff34\115\uff34\125\uff34\130\uff34\131\uff34\152" +
    "\uff34\157\uff34\164\uff34\165\uff34\167\uff34\171\uff34\173\uff34" +
    "\176\uff34\177\uff34\200\uff34\201\uff34\202\uff34\203\uff34\204" +
    "\uff34\206\uff34\207\uff34\210\uff34\211\uff34\212\uff34\216\uff34" +
    "\001\002\000\136\002\ufedd\007\ufedd\010\ufedd\011\ufedd\013" +
    "\172\035\ufedd\042\164\045\ufedd\046\ufedd\061\ufedd\062\ufedd" +
    "\063\ufedd\064\ufedd\066\201\067\ufedd\076\174\077\ufedd\100" +
    "\ufedd\101\166\102\ufedd\111\ufedd\114\ufedd\115\ufedd\125\176" +
    "\130\ufedd\131\171\152\ufedd\157\ufedd\164\ufedd\165\ufedd\167" +
    "\ufedd\171\161\173\ufedd\176\167\177\154\200\170\201\163" +
    "\202\155\203\160\204\173\206\157\207\ufedd\210\165\211" +
    "\200\212\ufedd\216\ufedd\001\002\000\070\007\uff2c\010\uff2c" +
    "\013\uff2c\042\uff2c\066\uff2c\076\uff2c\101\uff2c\111\uff2c\114" +
    "\uff2c\125\uff2c\131\uff2c\167\uff2c\171\uff2c\173\373\176\uff2c" +
    "\177\uff2c\200\uff2c\201\uff2c\202\uff2c\203\uff2c\204\uff2c\206" +
    "\uff2c\207\uff2c\210\uff2c\211\uff2c\212\uff2c\216\uff2c\001\002" +
    "\000\070\007\uff2d\010\uff2d\013\uff2d\042\uff2d\066\uff2d\076" +
    "\uff2d\101\uff2d\111\uff2d\114\uff2d\125\uff2d\131\uff2d\167\uff2d" +
    "\171\uff2d\173\372\176\uff2d\177\uff2d\200\uff2d\201\uff2d\202" +
    "\uff2d\203\uff2d\204\uff2d\206\uff2d\207\uff2d\210\uff2d\211\uff2d" +
    "\212\uff2d\216\uff2d\001\002\000\136\002\uff20\007\uff20\010" +
    "\uff20\011\uff20\013\uff20\035\uff20\042\uff20\045\uff20\046\uff20" +
    "\061\uff20\062\uff20\063\uff20\064\uff20\066\uff20\067\uff20\076" +
    "\uff20\077\uff20\100\uff20\101\uff20\102\uff20\111\uff20\114\uff20" +
    "\115\uff20\125\uff20\130\uff20\131\uff20\152\uff20\157\uff20\164" +
    "\uff20\165\uff20\167\uff20\171\uff20\173\uff20\176\uff20\177\uff20" +
    "\200\uff20\201\uff20\202\uff20\203\uff20\204\uff20\206\uff20\207" +
    "\uff20\210\uff20\211\uff20\212\uff20\216\uff20\001\002\000\136" +
    "\002\ufef3\007\ufef3\010\ufef3\011\ufef3\013\ufef3\035\ufef3\042" +
    "\ufef3\045\ufef3\046\ufef3\061\ufef3\062\ufef3\063\ufef3\064\ufef3" +
    "\066\ufef3\067\ufef3\076\ufef3\077\ufef3\100\ufef3\101\ufef3\102" +
    "\ufef3\111\ufef3\114\ufef3\115\ufef3\125\ufef3\130\ufef3\131\ufef3" +
    "\152\ufef3\157\ufef3\164\ufef3\165\ufef3\167\ufef3\171\ufef3\173" +
    "\ufef3\176\ufef3\177\ufef3\200\ufef3\201\ufef3\202\ufef3\203\ufef3" +
    "\204\ufef3\206\ufef3\207\ufef3\210\ufef3\211\ufef3\212\ufef3\216" +
    "\ufef3\001\002\000\136\002\uff2f\007\uff2f\010\uff2f\011\uff2f" +
    "\013\uff2f\035\uff2f\042\164\045\uff2f\046\uff2f\061\uff2f\062" +
    "\uff2f\063\uff2f\064\uff2f\066\uff2f\067\uff2f\076\uff2f\077\uff2f" +
    "\100\uff2f\101\uff2f\102\uff2f\111\uff2f\114\uff2f\115\uff2f\125" +
    "\uff2f\130\uff2f\131\uff2f\152\uff2f\157\uff2f\164\uff2f\165\uff2f" +
    "\167\uff2f\171\161\173\uff2f\176\167\177\154\200\uff2f\201" +
    "\uff2f\202\155\203\160\204\173\206\uff2f\207\uff2f\210\uff2f" +
    "\211\uff2f\212\uff2f\216\uff2f\001\002\000\066\012\131\017" +
    "\116\020\107\025\103\040\110\041\120\053\104\065\137" +
    "\073\123\106\145\110\124\111\115\112\140\145\143\156" +
    "\135\172\112\200\130\201\111\205\146\207\122\212\134" +
    "\213\141\214\151\215\136\216\105\217\133\001\002\000" +
    "\060\007\175\010\377\013\172\042\164\066\201\076\174" +
    "\101\166\111\156\114\177\125\176\131\171\171\161\176" +
    "\167\177\154\200\170\201\163\202\155\203\160\204\173" +
    "\206\157\207\162\210\165\211\200\001\002\000\030\014" +
    "\u0108\015\u0107\032\u0102\033\u0100\043\u010b\056\u010a\072\u0109" +
    "\142\u0106\144\u0105\153\u0103\154\u0101\001\002\000\012\002" +
    "\ufed0\024\ufed0\167\ufed0\173\ufed0\001\002\000\012\002\ufed8" +
    "\024\ufed8\167\ufed8\173\ufed8\001\002\000\012\002\ufed1\024" +
    "\ufed1\167\ufed1\173\ufed1\001\002\000\012\002\ufecf\024\ufecf" +
    "\167\ufecf\173\ufecf\001\002\000\004\173\u010c\001\002\000" +
    "\012\002\ufece\024\ufece\167\ufece\173\ufece\001\002\000\012" +
    "\002\ufed7\024\ufed7\167\ufed7\173\ufed7\001\002\000\012\002" +
    "\ufed4\024\ufed4\167\ufed4\173\ufed4\001\002\000\012\002\ufed5" +
    "\024\ufed5\167\ufed5\173\ufed5\001\002\000\012\002\ufed6\024" +
    "\ufed6\167\ufed6\173\ufed6\001\002\000\012\002\ufed3\024\ufed3" +
    "\167\ufed3\173\ufed3\001\002\000\012\002\ufed2\024\ufed2\167" +
    "\ufed2\173\ufed2\001\002\000\136\002\uff36\007\uff36\010\uff36" +
    "\011\uff36\013\uff36\035\uff36\042\uff36\045\uff36\046\uff36\061" +
    "\uff36\062\uff36\063\uff36\064\uff36\066\uff36\067\uff36\076\uff36" +
    "\077\uff36\100\uff36\101\uff36\102\uff36\111\uff36\114\uff36\115" +
    "\uff36\125\uff36\130\uff36\131\uff36\152\uff36\157\uff36\164\uff36" +
    "\165\uff36\167\uff36\171\uff36\173\uff36\176\uff36\177\uff36\200" +
    "\uff36\201\uff36\202\uff36\203\uff36\204\uff36\206\uff36\207\uff36" +
    "\210\uff36\211\uff36\212\uff36\216\uff36\001\002\000\006\065" +
    "\uffa5\212\uffa5\001\002\000\006\065\u0112\212\uffa1\001\002" +
    "\000\006\065\uffa6\212\uffa6\001\002\000\006\065\u0112\212" +
    "\uffa1\001\002\000\006\065\u0112\212\uffa1\001\002\000\004" +
    "\050\u0115\001\002\000\004\212\045\001\002\000\004\002" +
    "\uffa7\001\002\000\010\002\uffa2\121\uffa2\212\uffa2\001\002" +
    "\000\004\212\045\001\002\000\004\002\uffa8\001\002\000" +
    "\004\212\u0119\001\002\000\004\002\uffa9\001\002\000\004" +
    "\146\u01b8\001\002\000\006\065\u011f\212\uffc6\001\002\000" +
    "\004\146\uffc9\001\002\000\006\065\u011f\212\uffc6\001\002" +
    "\000\004\212\045\001\002\000\004\111\u0120\001\002\000" +
    "\004\050\u0121\001\002\000\012\002\uffc7\105\uffc7\121\uffc7" +
    "\212\uffc7\001\002\000\010\010\uffaf\024\uffaf\172\u0124\001" +
    "\002\000\006\010\uffcc\024\u0128\001\002\000\004\212\u0126" +
    "\001\002\000\006\167\u012b\173\u012c\001\002\000\010\024" +
    "\u0128\167\uffcc\173\uffcc\001\002\000\006\167\uffae\173\uffae" +
    "\001\002\000\004\216\u012a\001\002\000\006\167\uffac\173" +
    "\uffac\001\002\000\020\002\uffcd\010\uffcd\105\uffcd\132\uffcd" +
    "\143\uffcd\167\uffcd\173\uffcd\001\002\000\004\212\u0126\001" +
    "\002\000\006\010\uffb0\024\uffb0\001\002\000\006\167\uffad" +
    "\173\uffad\001\002\000\004\010\u012f\001\002\000\012\135" +
    "\uff92\162\uff92\166\012\172\uff92\001\002\000\010\135\u0139" +
    "\162\u013a\172\u0138\001\002\000\004\002\uffb1\001\002\000" +
    "\014\002\uff95\102\u01a8\115\u01a7\157\u01a6\173\uff95\001\002" +
    "\000\014\002\uff87\102\uff87\115\uff87\157\uff87\173\uff87\001" +
    "\002\000\014\002\uff8a\102\uff8a\115\uff8a\157\uff8a\173\uff8a" +
    "\001\002\000\006\002\uff94\173\uff94\001\002\000\014\002" +
    "\uff89\102\uff89\115\uff89\157\uff89\173\uff89\001\002\000\016" +
    "\002\uff72\061\u016f\102\uff72\115\uff72\157\uff72\173\uff72\001" +
    "\002\000\012\135\uff92\162\uff92\166\012\172\uff92\001\002" +
    "\000\074\005\u0168\012\131\017\116\020\107\025\103\037" +
    "\u0169\040\110\041\120\053\104\065\137\073\123\106\145" +
    "\110\124\111\115\112\140\145\143\156\135\171\u013e\172" +
    "\112\200\130\201\111\205\146\207\122\212\u0141\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\004\172" +
    "\u013c\001\002\000\016\002\uff3e\102\uff3e\115\u0156\157\uff3e" +
    "\167\u0153\173\uff3e\001\002\000\070\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\171" +
    "\u013e\172\u013d\200\130\201\111\205\146\207\122\212\u0141" +
    "\213\141\214\151\215\136\216\105\217\133\001\002\000" +
    "\070\012\131\017\116\020\107\025\103\040\110\041\120" +
    "\053\104\065\137\073\123\106\145\110\124\111\115\112" +
    "\140\145\143\156\135\171\u013e\172\112\200\130\201\111" +
    "\205\146\207\122\212\u0141\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\020\002\uff64\061\uff64\102\uff64" +
    "\115\uff64\157\uff64\167\uff64\173\uff64\001\002\000\020\002" +
    "\uff6d\061\uff6d\102\uff6d\115\uff6d\157\uff6d\167\uff6d\173\uff6d" +
    "\001\002\000\006\167\u0153\173\u0154\001\002\000\106\002" +
    "\ufedb\007\ufedb\010\ufedb\013\ufedb\042\ufedb\061\ufedb\066\ufedb" +
    "\076\ufedb\101\ufedb\102\ufedb\111\ufedb\114\ufedb\115\ufedb\125" +
    "\ufedb\131\ufedb\157\ufedb\167\ufedb\170\u014e\171\ufedb\172\307" +
    "\173\ufedb\176\ufedb\177\ufedb\200\ufedb\201\ufedb\202\ufedb\203" +
    "\ufedb\204\ufedb\206\ufedb\207\ufedb\210\ufedb\211\ufedb\212\ufedb" +
    "\216\ufedb\001\002\000\006\167\u014b\173\u014c\001\002\000" +
    "\102\002\uff6a\007\175\010\u0146\013\172\042\164\061\uff6a" +
    "\066\201\076\174\101\166\102\uff6a\111\156\114\177\115" +
    "\uff6a\125\176\131\171\157\uff6a\167\uff6a\171\161\173\uff6a" +
    "\176\167\177\154\200\170\201\163\202\155\203\160\204" +
    "\173\206\157\207\162\210\165\211\200\212\u0145\216\u0148" +
    "\001\002\000\020\002\uff69\061\uff69\102\uff69\115\uff69\157" +
    "\uff69\167\uff69\173\uff69\001\002\000\044\002\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\067\uff67\077\uff67\100\uff67\102" +
    "\uff67\113\uff67\115\uff67\130\uff67\157\uff67\161\uff67\165\uff67" +
    "\167\uff67\173\uff67\001\002\000\006\212\u0149\216\u014a\001" +
    "\002\000\020\002\uff6b\061\uff6b\102\uff6b\115\uff6b\157\uff6b" +
    "\167\uff6b\173\uff6b\001\002\000\044\002\uff65\061\uff65\062" +
    "\uff65\063\uff65\064\uff65\067\uff65\077\uff65\100\uff65\102\uff65" +
    "\113\uff65\115\uff65\130\uff65\157\uff65\161\uff65\165\uff65\167" +
    "\uff65\173\uff65\001\002\000\044\002\uff68\061\uff68\062\uff68" +
    "\063\uff68\064\uff68\067\uff68\077\uff68\100\uff68\102\uff68\113" +
    "\uff68\115\uff68\130\uff68\157\uff68\161\uff68\165\uff68\167\uff68" +
    "\173\uff68\001\002\000\044\002\uff66\061\uff66\062\uff66\063" +
    "\uff66\064\uff66\067\uff66\077\uff66\100\uff66\102\uff66\113\uff66" +
    "\115\uff66\130\uff66\157\uff66\161\uff66\165\uff66\167\uff66\173" +
    "\uff66\001\002\000\070\012\131\017\116\020\107\025\103" +
    "\040\110\041\120\053\104\065\137\073\123\106\145\110" +
    "\124\111\115\112\140\145\143\156\135\171\u013e\172\112" +
    "\200\130\201\111\205\146\207\122\212\u0141\213\141\214" +
    "\151\215\136\216\105\217\133\001\002\000\016\002\uff80" +
    "\102\uff80\115\uff80\157\uff80\167\uff80\173\uff80\001\002\000" +
    "\020\002\uff6c\061\uff6c\102\uff6c\115\uff6c\157\uff6c\167\uff6c" +
    "\173\uff6c\001\002\000\006\171\u014f\212\u0150\001\002\000" +
    "\020\002\uff63\061\uff63\102\uff63\115\uff63\157\uff63\167\uff63" +
    "\173\uff63\001\002\000\104\002\ufeda\007\ufeda\010\ufeda\013" +
    "\ufeda\042\ufeda\061\ufeda\066\ufeda\076\ufeda\101\ufeda\102\ufeda" +
    "\111\ufeda\114\ufeda\115\ufeda\125\ufeda\131\ufeda\157\ufeda\167" +
    "\ufeda\170\u0151\171\ufeda\173\ufeda\176\ufeda\177\ufeda\200\ufeda" +
    "\201\ufeda\202\ufeda\203\ufeda\204\ufeda\206\ufeda\207\ufeda\210" +
    "\ufeda\211\ufeda\212\ufeda\216\ufeda\001\002\000\006\171\u0152" +
    "\212\313\001\002\000\020\002\uff62\061\uff62\102\uff62\115" +
    "\uff62\157\uff62\167\uff62\173\uff62\001\002\000\004\172\u0162" +
    "\001\002\000\014\002\uff3e\102\uff3e\115\u0156\157\uff3e\173" +
    "\uff3e\001\002\000\014\002\uff37\102\u0160\115\uff37\157\uff37" +
    "\173\uff37\001\002\000\004\016\u0157\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\016\002\uff3f\102\uff3f\115\uff3f\157\uff3f\167\u015d" +
    "\173\uff3f\001\002\000\016\002\uff3d\102\uff3d\115\uff3d\157" +
    "\uff3d\167\uff3d\173\uff3d\001\002\000\076\002\uff3b\007\175" +
    "\011\u015b\013\172\035\u015c\042\164\066\201\076\174\101" +
    "\166\102\uff3b\111\156\114\177\115\uff3b\125\176\131\171" +
    "\157\uff3b\167\uff3b\171\161\173\uff3b\176\167\177\154\200" +
    "\170\201\163\202\155\203\160\204\173\206\157\207\162" +
    "\210\165\211\200\001\002\000\016\002\uff3a\102\uff3a\115" +
    "\uff3a\157\uff3a\167\uff3a\173\uff3a\001\002\000\016\002\uff39" +
    "\102\uff39\115\uff39\157\uff39\167\uff39\173\uff39\001\002\000" +
    "\066\012\131\017\116\020\107\025\103\040\110\041\120" +
    "\053\104\065\137\073\123\106\145\110\124\111\115\112" +
    "\140\145\143\156\135\172\112\200\130\201\111\205\146" +
    "\207\122\212\134\213\141\214\151\215\136\216\105\217" +
    "\133\001\002\000\016\002\uff3c\102\uff3c\115\uff3c\157\uff3c" +
    "\167\uff3c\173\uff3c\001\002\000\014\002\uff81\102\uff81\115" +
    "\uff81\157\uff81\173\uff81\001\002\000\004\214\u0161\001\002" +
    "\000\014\002\uff38\102\uff38\115\uff38\157\uff38\173\uff38\001" +
    "\002\000\070\012\131\017\116\020\107\025\103\040\110" +
    "\041\120\053\104\065\137\073\123\106\145\110\124\111" +
    "\115\112\140\145\143\156\135\171\u013e\172\112\200\130" +
    "\201\111\205\146\207\122\212\u0141\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\006\167\u014b\173\u0164" +
    "\001\002\000\016\002\uff7f\102\uff7f\115\uff7f\157\uff7f\167" +
    "\uff7f\173\uff7f\001\002\000\014\002\uff37\102\u0160\115\uff37" +
    "\157\uff37\173\uff37\001\002\000\014\002\uff82\102\uff82\115" +
    "\uff82\157\uff82\173\uff82\001\002\000\020\002\uff70\061\uff70" +
    "\102\uff70\115\uff70\157\uff70\167\u014b\173\uff70\001\002\000" +
    "\070\012\131\017\116\020\107\025\103\040\110\041\120" +
    "\053\104\065\137\073\123\106\145\110\124\111\115\112" +
    "\140\145\143\156\135\171\u013e\172\112\200\130\201\111" +
    "\205\146\207\122\212\u0141\213\141\214\151\215\136\216" +
    "\105\217\133\001\002\000\070\012\131\017\116\020\107" +
    "\025\103\040\110\041\120\053\104\065\137\073\123\106" +
    "\145\110\124\111\115\112\140\145\143\156\135\171\u013e" +
    "\172\112\200\130\201\111\205\146\207\122\212\u0141\213" +
    "\141\214\151\215\136\216\105\217\133\001\002\000\020" +
    "\002\uff6e\061\uff6e\102\uff6e\115\uff6e\157\uff6e\167\u014b\173" +
    "\uff6e\001\002\000\020\002\uff6f\061\uff6f\102\uff6f\115\uff6f" +
    "\157\uff6f\167\u014b\173\uff6f\001\002\000\004\173\u016d\001" +
    "\002\000\014\002\uff88\102\uff88\115\uff88\157\uff88\173\uff88" +
    "\001\002\000\022\002\uff44\063\uff44\064\uff44\102\uff44\115" +
    "\uff44\157\uff44\165\u019b\173\uff44\001\002\000\006\172\u0173" +
    "\212\045\001\002\000\050\002\uff55\010\u0146\062\uff55\063" +
    "\uff55\064\uff55\067\uff55\077\uff55\100\uff55\102\uff55\113\uff55" +
    "\115\uff55\130\uff55\157\uff55\161\uff55\165\uff55\167\uff55\173" +
    "\uff55\212\u0145\216\u0148\001\002\000\042\002\uff59\062\uff59" +
    "\063\uff59\064\uff59\067\uff59\077\uff59\100\uff59\102\uff59\113" +
    "\uff59\115\uff59\130\uff59\157\uff59\161\uff59\165\uff59\167\uff59" +
    "\173\uff59\001\002\000\042\002\uff58\062\uff58\063\uff58\064" +
    "\uff58\067\uff58\077\uff58\100\uff58\102\uff58\113\uff58\115\uff58" +
    "\130\uff58\157\uff58\161\uff58\165\uff58\167\uff58\173\uff58\001" +
    "\002\000\012\135\uff92\162\uff92\166\012\172\uff92\001\002" +
    "\000\036\002\uff5f\062\u0177\063\uff5f\064\uff5f\067\u0179\077" +
    "\uff4e\100\u0178\102\uff5f\115\uff5f\130\u017c\157\uff5f\165\uff5f" +
    "\167\u0176\173\uff5f\001\002\000\036\002\uff5e\062\uff5e\063" +
    "\uff5e\064\uff5e\067\uff5e\077\uff5e\100\uff5e\102\uff5e\115\uff5e" +
    "\130\uff5e\157\uff5e\165\uff5e\167\uff5e\173\uff5e\001\002\000" +
    "\006\172\u0173\212\045\001\002\000\006\077\uff4c\116\u017d" +
    "\001\002\000\010\077\uff4c\116\u017d\136\u0190\001\002\000" +
    "\004\077\uff4f\001\002\000\004\077\u018e\001\002\000\010" +
    "\172\uff4a\174\u0181\212\uff4a\001\002\000\006\077\uff4c\116" +
    "\u017d\001\002\000\004\077\uff4d\001\002\000\004\077\u017f" +
    "\001\002\000\010\172\uff52\174\uff52\212\uff52\001\002\000" +
    "\006\172\u0173\212\045\001\002\000\004\212\u0183\001\002" +
    "\000\006\167\u0184\175\u0185\001\002\000\010\167\uff49\173" +
    "\uff49\175\uff49\001\002\000\004\212\u0186\001\002\000\006" +
    "\172\uff4b\212\uff4b\001\002\000\010\167\uff48\173\uff48\175" +
    "\uff48\001\002\000\042\002\uff5c\062\uff5c\063\uff5c\064\uff5c" +
    "\067\uff5c\077\uff5c\100\uff5c\102\uff5c\113\u0189\115\uff5c\130" +
    "\uff5c\157\uff5c\161\u0188\165\uff5c\167\uff5c\173\uff5c\001\002" +
    "\000\004\172\u018b\001\002\000\066\012\131\017\116\020" +
    "\107\025\103\040\110\041\120\053\104\065\137\073\123" +
    "\106\145\110\124\111\115\112\140\145\143\156\135\172" +
    "\112\200\130\201\111\205\146\207\122\212\134\213\141" +
    "\214\151\215\136\216\105\217\133\001\002\000\112\002" +
    "\uff5b\007\175\013\172\042\164\062\uff5b\063\uff5b\064\uff5b" +
    "\066\201\067\uff5b\076\174\077\uff5b\100\uff5b\101\166\102" +
    "\uff5b\111\156\114\177\115\uff5b\125\176\130\uff5b\131\171" +
    "\157\uff5b\165\uff5b\167\uff5b\171\161\173\uff5b\176\167\177" +
    "\154\200\170\201\163\202\155\203\160\204\173\206\157" +
    "\207\162\210\165\211\200\001\002\000\004\212\u0183\001" +
    "\002\000\006\167\u0184\173\u018d\001\002\000\036\002\uff5a" +
    "\062\uff5a\063\uff5a\064\uff5a\067\uff5a\077\uff5a\100\uff5a\102" +
    "\uff5a\115\uff5a\130\uff5a\157\uff5a\165\uff5a\167\uff5a\173\uff5a" +
    "\001\002\000\010\172\uff54\174\uff54\212\uff54\001\002\000" +
    "\004\077\u0192\001\002\000\004\077\u0191\001\002\000\010" +
    "\172\uff50\174\uff50\212\uff50\001\002\000\010\172\uff53\174" +
    "\uff53\212\uff53\001\002\000\004\077\u0194\001\002\000\010" +
    "\172\uff51\174\uff51\212\uff51\001\002\000\036\002\uff5d\062" +
    "\uff5d\063\uff5d\064\uff5d\067\uff5d\077\uff5d\100\uff5d\102\uff5d" +
    "\115\uff5d\130\uff5d\157\uff5d\165\uff5d\167\uff5d\173\uff5d\001" +
    "\002\000\004\173\u0197\001\002\000\010\010\u0146\212\u0145" +
    "\216\u0148\001\002\000\042\002\uff57\062\uff57\063\uff57\064" +
    "\uff57\067\uff57\077\uff57\100\uff57\102\uff57\113\uff57\115\uff57" +
    "\130\uff57\157\uff57\161\uff57\165\uff57\167\uff57\173\uff57\001" +
    "\002\000\042\002\uff56\062\uff56\063\uff56\064\uff56\067\uff56" +
    "\077\uff56\100\uff56\102\uff56\113\uff56\115\uff56\130\uff56\157" +
    "\uff56\161\uff56\165\uff56\167\uff56\173\uff56\001\002\000\020" +
    "\002\uff42\063\u019e\064\uff42\102\uff42\115\uff42\157\uff42\173" +
    "\uff42\001\002\000\066\012\131\017\116\020\107\025\103" +
    "\040\110\041\120\053\104\065\137\073\123\106\145\110" +
    "\124\111\115\112\140\145\143\156\135\172\112\200\130" +
    "\201\111\205\146\207\122\212\134\213\141\214\151\215" +
    "\136\216\105\217\133\001\002\000\074\002\uff45\007\175" +
    "\013\172\042\164\063\uff45\064\uff45\066\201\076\174\101" +
    "\166\102\uff45\111\156\114\177\115\uff45\125\176\131\171" +
    "\157\uff45\171\161\173\uff45\176\167\177\154\200\170\201" +
    "\163\202\155\203\160\204\173\206\157\207\162\210\165" +
    "\211\200\001\002\000\016\002\uff40\064\u01a2\102\uff40\115" +
    "\uff40\157\uff40\173\uff40\001\002\000\004\016\u019f\001\002" +
    "\000\066\012\131\017\116\020\107\025\103\040\110\041" +
    "\120\053\104\065\137\073\123\106\145\110\124\111\115" +
    "\112\140\145\143\156\135\172\112\200\130\201\111\205" +
    "\146\207\122\212\134\213\141\214\151\215\136\216\105" +
    "\217\133\001\002\000\020\002\uff43\064\uff43\102\uff43\115" +
    "\uff43\157\uff43\167\335\173\uff43\001\002\000\014\002\uff3e" +
    "\102\uff3e\115\u0156\157\uff3e\173\uff3e\001\002\000\066\012" +
    "\131\017\116\020\107\025\103\040\110\041\120\053\104" +
    "\065\137\073\123\106\145\110\124\111\115\112\140\145" +
    "\143\156\135\172\112\200\130\201\111\205\146\207\122" +
    "\212\134\213\141\214\151\215\136\216\105\217\133\001" +
    "\002\000\070\002\uff41\007\175\013\172\042\164\066\201" +
    "\076\174\101\166\102\uff41\111\156\114\177\115\uff41\125" +
    "\176\131\171\157\uff41\171\161\173\uff41\176\167\177\154" +
    "\200\170\201\163\202\155\203\160\204\173\206\157\207" +
    "\162\210\165\211\200\001\002\000\014\002\uff37\102\u0160" +
    "\115\uff37\157\uff37\173\uff37\001\002\000\014\002\uff71\102" +
    "\uff71\115\uff71\157\uff71\173\uff71\001\002\000\014\005\u01b0" +
    "\037\u01b1\135\uff85\162\uff85\172\uff85\001\002\000\004\016" +
    "\u01ac\001\002\000\004\214\u01ab\001\002\000\010\135\u0139" +
    "\162\u013a\172\u0138\001\002\000\014\002\uff86\102\uff86\115" +
    "\uff86\157\uff86\173\uff86\001\002\000\006\002\uff8c\173\uff8c" +
    "\001\002\000\066\012\131\017\116\020\107\025\103\040" +
    "\110\041\120\053\104\065\137\073\123\106\145\110\124" +
    "\111\115\112\140\145\143\156\135\172\112\200\130\201" +
    "\111\205\146\207\122\212\134\213\141\214\151\215\136" +
    "\216\105\217\133\001\002\000\012\002\uff8d\102\u01ae\167" +
    "\u015d\173\uff8d\001\002\000\004\214\u01af\001\002\000\006" +
    "\002\uff8b\173\uff8b\001\002\000\010\135\uff83\162\uff83\172" +
    "\uff83\001\002\000\010\135\uff84\162\uff84\172\uff84\001\002" +
    "\000\004\212\u01b3\001\002\000\010\002\uffcc\024\u0128\105" +
    "\uffcc\001\002\000\006\002\uffca\105\u01b5\001\002\000\004" +
    "\216\u01b7\001\002\000\004\002\uffd1\001\002\000\004\002" +
    "\uffcb\001\002\000\006\065\u011f\212\uffc6\001\002\000\004" +
    "\212\045\001\002\000\006\101\u01bb\172\u01bc\001\002\000" +
    "\004\212\045\001\002\000\004\212\u01bd\001\002\000\030" +
    "\014\u0108\015\u0107\032\u0102\033\u0100\043\u010b\056\u010a\072" +
    "\u0109\142\u0106\144\u0105\153\u0103\154\u0101\001\002\000\006" +
    "\167\u01c0\173\u01c1\001\002\000\006\167\uffb4\173\uffb4\001" +
    "\002\000\004\212\u01bd\001\002\000\016\002\uffb5\024\uffb5" +
    "\105\uffb5\122\u01c2\132\uffb5\143\uffb5\001\002\000\004\016" +
    "\u01df\001\002\000\014\002\uffcc\024\u0128\105\uffcc\132\uffcc" +
    "\143\uffcc\001\002\000\012\002\uffc4\105\uffc4\132\u01c5\143" +
    "\uffc4\001\002\000\004\057\u01d0\001\002\000\010\002\uffbb" +
    "\105\uffbb\143\u01c7\001\002\000\004\010\u01ca\001\002\000" +
    "\006\002\uffca\105\u01b5\001\002\000\004\002\uffce\001\002" +
    "\000\012\120\u01cc\123\u01ce\137\u01cd\151\u01cf\001\002\000" +
    "\006\002\uffbc\105\uffbc\001\002\000\006\002\uffba\105\uffba" +
    "\001\002\000\006\002\uffb8\105\uffb8\001\002\000\006\002" +
    "\uffb7\105\uffb7\001\002\000\006\002\uffb9\105\uffb9\001\002" +
    "\000\004\034\u01d1\001\002\000\016\002\uffbe\047\uffbe\054" +
    "\u01d2\103\uffbe\105\uffbe\143\uffbe\001\002\000\004\150\u01d9" +
    "\001\002\000\014\002\uffc2\047\u01d4\103\uffc2\105\uffc2\143" +
    "\uffc2\001\002\000\004\016\u01dc\001\002\000\012\002\uffc0" +
    "\103\u01d7\105\uffc0\143\uffc0\001\002\000\010\002\uffc5\105" +
    "\uffc5\143\uffc5\001\002\000\004\150\u01d9\001\002\000\010" +
    "\002\uffc1\105\uffc1\143\uffc1\001\002\000\004\016\u01da\001" +
    "\002\000\004\216\u01db\001\002\000\014\002\uffbd\047\uffbd" +
    "\103\uffbd\105\uffbd\143\uffbd\001\002\000\004\216\u01dd\001" +
    "\002\000\012\002\uffc3\103\uffc3\105\uffc3\143\uffc3\001\002" +
    "\000\014\002\uffbf\047\uffbf\103\uffbf\105\uffbf\143\uffbf\001" +
    "\002\000\004\172\u01e0\001\002\000\004\212\u01bd\001\002" +
    "\000\006\167\u01c0\173\u01e2\001\002\000\014\002\uffb6\024" +
    "\uffb6\105\uffb6\132\uffb6\143\uffb6\001\002\000\006\167\uffb3" +
    "\173\uffb3\001\002\000\012\002\uffcc\024\u0128\167\uffcc\173" +
    "\uffcc\001\002\000\010\002\uffb2\167\uffb2\173\uffb2\001\002" +
    "\000\012\002\uffcc\024\u0128\105\uffcc\143\uffcc\001\002\000" +
    "\010\002\uffca\105\u01b5\143\u01e8\001\002\000\004\010\u01ea" +
    "\001\002\000\004\002\uffcf\001\002\000\012\120\u01cc\123" +
    "\u01ce\137\u01cd\151\u01cf\001\002\000\006\002\uffca\105\u01b5" +
    "\001\002\000\004\002\uffd0\001\002\000\004\002\uffea\001" +
    "\002\000\004\010\u01f8\001\002\000\004\010\u01f4\001\002" +
    "\000\014\071\uff8f\135\uff8f\162\uff8f\167\uff8f\172\uff8f\001" +
    "\002\000\014\071\uff93\135\uff93\162\uff93\167\u01f2\172\uff93" +
    "\001\002\000\006\212\u01ee\216\u01ef\001\002\000\014\071" +
    "\uff8e\135\uff8e\162\uff8e\167\uff8e\172\uff8e\001\002\000\004" +
    "\172\u01f5\001\002\000\012\135\uff92\162\uff92\166\012\172" +
    "\uff92\001\002\000\004\173\u01f7\001\002\000\014\071\uff90" +
    "\135\uff90\162\uff90\167\uff90\172\uff90\001\002\000\004\172" +
    "\u01f9\001\002\000\012\135\uff92\162\uff92\166\012\172\uff92" +
    "\001\002\000\004\173\u01fb\001\002\000\014\071\uff91\135" +
    "\uff91\162\uff91\167\uff91\172\uff91\001\002\000\006\074\u01fd" +
    "\117\u01fe\001\002\000\006\146\u0200\212\uffde\001\002\000" +
    "\006\146\u0200\212\uffde\001\002\000\004\212\045\001\002" +
    "\000\004\212\uffdf\001\002\000\014\121\u0202\135\uff9f\162" +
    "\uff9f\166\uff9f\172\u0203\001\002\000\004\172\u020c\001\002" +
    "\000\006\173\uffe0\212\u0183\001\002\000\012\135\uff92\162" +
    "\uff92\166\012\172\uff92\001\002\000\004\002\uffe6\001\002" +
    "\000\006\167\u0184\173\uffe1\001\002\000\004\173\u0208\001" +
    "\002\000\016\002\uff9f\121\u0202\135\uff9f\162\uff9f\166\uff9f" +
    "\172\uff9f\001\002\000\014\002\uffe2\135\uff92\162\uff92\166" +
    "\012\172\uff92\001\002\000\004\002\uffe3\001\002\000\004" +
    "\002\uffe7\001\002\000\004\212\u020f\001\002\000\006\167" +
    "\uff9e\173\uff9e\001\002\000\006\167\u0211\173\u0212\001\002" +
    "\000\010\167\uff98\173\uff98\206\077\001\002\000\006\167" +
    "\uff97\173\uff97\001\002\000\004\212\u020f\001\002\000\014" +
    "\002\uffa0\135\uffa0\162\uffa0\166\uffa0\172\uffa0\001\002\000" +
    "\006\167\uff9d\173\uff9d\001\002\000\004\212\045\001\002" +
    "\000\014\121\u0202\135\uff9f\162\uff9f\166\uff9f\172\u0216\001" +
    "\002\000\006\173\uffe0\212\u0183\001\002\000\012\135\uff92" +
    "\162\uff92\166\012\172\uff92\001\002\000\004\002\uffe4\001" +
    "\002\000\004\173\u021a\001\002\000\016\002\uff9f\121\u0202" +
    "\135\uff9f\162\uff9f\166\uff9f\172\uff9f\001\002\000\014\002" +
    "\uffe2\135\uff92\162\uff92\166\012\172\uff92\001\002\000\004" +
    "\002\uffe5\001\002\000\010\002\uff79\101\u0221\216\u0222\001" +
    "\002\000\010\002\uffa4\101\uffa4\216\uffa4\001\002\000\010" +
    "\002\uffa3\101\uffa3\216\uffa3\001\002\000\012\002\uff7d\066" +
    "\u0223\101\u0221\216\u0222\001\002\000\004\216\u0227\001\002" +
    "\000\004\002\uff77\001\002\000\004\212\u0225\001\002\000" +
    "\004\002\uff7c\001\002\000\010\002\uff7b\101\u0221\216\u0222" +
    "\001\002\000\004\002\uff7a\001\002\000\004\002\uff76\001" +
    "\002\000\004\002\uff78\001\002\000\004\212\045\001\002" +
    "\000\004\212\045\001\002\000\020\004\u022f\021\u0230\044" +
    "\u022c\121\067\126\u0231\127\u0232\140\uff9b\001\002\000\014" +
    "\002\uffa1\022\u0235\065\u0112\121\uffa1\212\uffd4\001\002\000" +
    "\004\140\u0240\001\002\000\004\023\u023c\001\002\000\014" +
    "\002\uffc6\023\uffd2\065\u011f\105\uffc6\121\uffc6\001\002\000" +
    "\006\022\u0235\212\uffd4\001\002\000\004\155\u0233\001\002" +
    "\000\004\023\uffd3\001\002\000\004\212\045\001\002\000" +
    "\004\002\uffd6\001\002\000\004\212\uffd5\001\002\000\004" +
    "\212\u0237\001\002\000\004\212\u01bd\001\002\000\004\002" +
    "\uffda\001\002\000\010\002\uff9b\105\uff9b\121\067\001\002" +
    "\000\006\002\uffca\105\u01b5\001\002\000\004\002\uffdc\001" +
    "\002\000\004\172\u023d\001\002\000\004\212\u01bd\001\002" +
    "\000\006\167\u01c0\173\u023f\001\002\000\004\002\uffdd\001" +
    "\002\000\006\055\u0242\105\u0241\001\002\000\004\216\u0244" +
    "\001\002\000\012\120\u01cc\123\u01ce\137\u01cd\151\u01cf\001" +
    "\002\000\004\002\uffd8\001\002\000\004\002\uffd7\001\002" +
    "\000\006\002\uff9b\121\067\001\002\000\004\212\u0247\001" +
    "\002\000\004\002\uffdb\001\002\000\004\002\uffd9\001\002" +
    "\000\006\010\u024b\126\u024a\001\002\000\004\155\u024d\001" +
    "\002\000\012\135\uff92\162\uff92\166\012\172\uff92\001\002" +
    "\000\004\002\uffab\001\002\000\004\212\045\001\002\000" +
    "\004\002\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u024c\000\050\002\037\005\004\012\021\013\027\014" +
    "\010\016\022\020\034\021\014\072\007\105\036\106\013" +
    "\116\035\117\016\120\033\121\031\122\003\123\023\124" +
    "\012\125\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\152\u021c\001\001\000\016\003" +
    "\u0133\004\u0135\007\u0132\010\u0131\022\u0134\023\u0136\001\001" +
    "\000\002\001\001\000\006\071\u01f0\076\u01ef\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u01ec\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\135\u0119\151\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\u010d\001\001\000" +
    "\002\001\001\000\010\005\053\072\007\105\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\041\001\001\000\004\040\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\064\001\001\000\004\107\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\072\114\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\027\143\030\151\031\146" +
    "\032\124\042\116\043\120\044\101\045\077\046\131\047" +
    "\105\056\141\060\147\061\112\062\100\065\125\066\126" +
    "\104\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\373\030\151\031\146\032\124\042\116" +
    "\043\120\044\101\045\077\046\131\047\105\056\141\060" +
    "\147\061\112\062\100\065\125\066\126\104\113\001\001" +
    "\000\044\027\222\030\370\031\146\032\124\042\367\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\027\366\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\046\027\347\030\151\031" +
    "\146\032\124\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\063\345\065" +
    "\125\066\126\104\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\027\344\030\151\031" +
    "\146\032\124\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\044\027\342\030\151\031\146" +
    "\032\124\042\116\043\120\044\101\045\077\046\131\047" +
    "\105\056\141\060\147\061\112\062\100\065\125\066\126" +
    "\104\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\027\324\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\323\030\151\031\146\032\124\042\116" +
    "\043\120\044\101\045\077\046\131\047\105\056\141\060" +
    "\147\061\112\062\100\065\125\066\126\104\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\152\030\151\031\146\032\124\042\116" +
    "\043\120\044\101\045\077\046\131\047\105\056\141\060" +
    "\147\061\112\062\100\065\125\066\126\104\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\027\302\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\044\027\301\030\151\031" +
    "\146\032\124\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\002\001\001\000\044\027\257" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\044\027\256\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\044\027\255\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\044\027" +
    "\250\030\151\031\146\032\124\042\116\043\120\044\101" +
    "\045\077\046\131\047\105\056\141\060\147\061\112\062" +
    "\100\065\125\066\126\104\113\001\001\000\044\027\246" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\044\027\243\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\044\027\240\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\044\027\237\030\151\031" +
    "\146\032\124\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\044\027\232\030\151\031\146" +
    "\032\124\042\116\043\120\044\101\045\077\046\131\047" +
    "\105\056\141\060\147\061\112\062\100\065\125\066\126" +
    "\104\113\001\001\000\044\027\230\030\151\031\146\032" +
    "\124\042\116\043\120\044\101\045\077\046\131\047\105" +
    "\056\141\060\147\061\112\062\100\065\125\066\126\104" +
    "\113\001\001\000\044\027\222\030\223\031\146\032\124" +
    "\042\221\043\120\044\101\045\077\046\131\047\105\056" +
    "\141\060\147\061\112\062\100\065\125\066\126\104\113" +
    "\001\001\000\044\027\220\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\002\001\001\000\044\027\214\030\151\031\146" +
    "\032\124\042\116\043\120\044\101\045\077\046\131\047" +
    "\105\056\141\060\147\061\112\062\100\065\125\066\126" +
    "\104\113\001\001\000\044\027\213\030\151\031\146\032" +
    "\124\042\116\043\120\044\101\045\077\046\131\047\105" +
    "\056\141\060\147\061\112\062\100\065\125\066\126\104" +
    "\113\001\001\000\044\027\212\030\151\031\146\032\124" +
    "\042\116\043\120\044\101\045\077\046\131\047\105\056" +
    "\141\060\147\061\112\062\100\065\125\066\126\104\113" +
    "\001\001\000\044\027\210\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\002\001\001\000\046\027\203\030\151\031\146" +
    "\032\124\034\202\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\206\030\151\031\146\032\124\042\116" +
    "\043\120\044\101\045\077\046\131\047\105\056\141\060" +
    "\147\061\112\062\100\065\125\066\126\104\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\027\211\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\027\225\030\151\031\146\032\124" +
    "\042\116\043\120\044\101\045\077\046\131\047\105\056" +
    "\141\060\147\061\112\062\100\065\125\066\126\104\113" +
    "\001\001\000\002\001\001\000\044\027\227\030\151\031" +
    "\146\032\124\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\027\233\030\151\031\146\032\124\042\116\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\027\236\030\151\031\146\032\124\042\116\043\120\044" +
    "\101\045\077\046\131\047\105\056\141\060\147\061\112" +
    "\062\100\065\125\066\126\104\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\027\245" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\044\027\244\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\027" +
    "\251\030\151\031\146\032\124\042\116\043\120\044\101" +
    "\045\077\046\131\047\105\056\141\060\147\061\112\062" +
    "\100\065\125\066\126\104\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\027\254\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\027" +
    "\222\030\274\031\146\032\124\042\273\043\120\044\101" +
    "\045\077\046\131\047\105\056\141\060\147\061\112\062" +
    "\100\065\125\066\126\104\113\001\001\000\044\027\272" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\044\027\271\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\056\141\060\147\061\112\062\100\065" +
    "\125\066\126\104\113\001\001\000\044\027\270\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\046\027" +
    "\203\030\151\031\146\032\124\034\266\042\116\043\120" +
    "\044\101\045\077\046\131\047\105\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\027\276\030\151\031\146\032\124\042\116\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\002\001\001\000\044\027\300\030\151\031\146\032\124" +
    "\042\116\043\120\044\101\045\077\046\131\047\105\056" +
    "\141\060\147\061\112\062\100\065\125\066\126\104\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\027\203\030\151\031\146\032\124\034\304" +
    "\042\116\043\120\044\101\045\077\046\131\047\105\056" +
    "\141\060\147\061\112\062\100\065\125\066\126\104\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\027" +
    "\203\030\151\031\146\032\124\034\313\042\116\043\120" +
    "\044\101\045\077\046\131\047\105\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\027\206" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\002\001\001\000" +
    "\044\027\320\030\151\031\146\032\124\042\116\043\120" +
    "\044\101\045\077\046\131\047\105\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\027\332\030\151\031\146" +
    "\032\124\033\333\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\064\326" +
    "\065\125\066\126\104\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\027\332\030\151\031\146\032\124" +
    "\033\340\042\116\043\120\044\101\045\077\046\131\047" +
    "\105\056\141\060\147\061\112\062\100\065\125\066\126" +
    "\104\113\001\001\000\046\027\332\030\151\031\146\032" +
    "\124\033\336\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\027\335\030\151\031\146\032\124\042\116\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\364\001\001\000\044" +
    "\027\361\030\151\031\146\032\124\042\116\043\120\044" +
    "\101\045\077\046\131\047\105\056\141\060\147\061\112" +
    "\062\100\065\125\066\126\104\113\001\001\000\004\063" +
    "\350\001\001\000\004\057\351\001\001\000\002\001\001" +
    "\000\044\027\357\030\151\031\146\032\124\042\116\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\044\027\354\030\151\031\146\032\124\042\116\043\120" +
    "\044\101\045\077\046\131\047\105\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\044\027\356\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\027\363\030\151\031\146\032" +
    "\124\042\116\043\120\044\101\045\077\046\131\047\105" +
    "\056\141\060\147\061\112\062\100\065\125\066\126\104" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\027\375\030\151\031\146\032\124\042\116\043" +
    "\120\044\101\045\077\046\131\047\105\056\141\060\147" +
    "\061\112\062\100\065\125\066\126\104\113\001\001\000" +
    "\002\001\001\000\004\103\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\u0117\001\001\000\002\001\001\000\004\140" +
    "\u0115\001\001\000\004\140\u0112\001\001\000\002\001\001" +
    "\000\004\040\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\u01b1\001\001\000\002\001\001\000\004\141\u011d\001\001" +
    "\000\004\040\u0121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\u0122\001\001\000\004" +
    "\134\u012d\001\001\000\006\127\u0126\131\u0124\001\001\000" +
    "\002\001\001\000\004\134\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0130\072\u012f\001\001\000" +
    "\016\003\u0133\004\u0135\007\u0132\010\u0131\022\u0134\023\u0136" +
    "\001\001\000\002\001\001\000\004\115\u01a8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\u016d\001\001\000\006\005\u016b\072" +
    "\u012f\001\001\000\052\024\u0166\025\u013e\026\u0143\027\u0142" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\004\011\u013a\001" +
    "\001\000\004\053\u0164\001\001\000\054\011\u013f\024\u0141" +
    "\025\u013e\026\u0143\027\u0142\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\052\024\u0141\025\u013e\026\u0143\027\u0142\030\370" +
    "\031\146\032\124\042\367\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\025\u014c\026" +
    "\u0143\027\u0142\030\151\031\146\032\124\042\116\043\120" +
    "\044\101\045\077\046\131\047\105\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u0154\001\001\000\004\055" +
    "\u015e\001\001\000\002\001\001\000\050\027\u0159\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\052\u0157\054\u0158\056\141\060\147\061\112" +
    "\062\100\065\125\066\126\104\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\027\u0159\030\151\031\146\032" +
    "\124\042\116\043\120\044\101\045\077\046\131\047\105" +
    "\054\u015d\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\024\u0162\025" +
    "\u013e\026\u0143\027\u0142\030\151\031\146\032\124\042\116" +
    "\043\120\044\101\045\077\046\131\047\105\056\141\060" +
    "\147\061\112\062\100\065\125\066\126\104\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\024\u016a" +
    "\025\u013e\026\u0143\027\u0142\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\052\024\u0169\025\u013e\026\u0143\027\u0142\030\151" +
    "\031\146\032\124\042\116\043\120\044\101\045\077\046" +
    "\131\047\105\056\141\060\147\061\112\062\100\065\125" +
    "\066\126\104\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0199" +
    "\001\001\000\014\040\u016f\070\u0173\073\u0174\074\u0170\075" +
    "\u0171\001\001\000\004\035\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0195\072\u012f\001\001\000" +
    "\006\077\u017a\100\u0179\001\001\000\002\001\001\000\012" +
    "\040\u016f\073\u0194\074\u0170\075\u0171\001\001\000\004\101" +
    "\u0192\001\001\000\004\101\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u017f\001\001\000\004\101" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\040\u016f\073\u0186\074\u0170\075\u0171\001" +
    "\001\000\004\036\u0181\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\027\u0189" +
    "\030\151\031\146\032\124\042\116\043\120\044\101\045" +
    "\077\046\131\047\105\056\141\060\147\061\112\062\100" +
    "\065\125\066\126\104\113\001\001\000\002\001\001\000" +
    "\004\036\u018b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u019c\001\001\000\044\027\u019b\030\151\031\146\032" +
    "\124\042\116\043\120\044\101\045\077\046\131\047\105" +
    "\056\141\060\147\061\112\062\100\065\125\066\126\104" +
    "\113\001\001\000\002\001\001\000\004\051\u01a0\001\001" +
    "\000\002\001\001\000\046\027\332\030\151\031\146\032" +
    "\124\033\u019f\042\116\043\120\044\101\045\077\046\131" +
    "\047\105\056\141\060\147\061\112\062\100\065\125\066" +
    "\126\104\113\001\001\000\002\001\001\000\004\053\u01a3" +
    "\001\001\000\044\027\u01a2\030\151\031\146\032\124\042" +
    "\116\043\120\044\101\045\077\046\131\047\105\056\141" +
    "\060\147\061\112\062\100\065\125\066\126\104\113\001" +
    "\001\000\002\001\001\000\004\055\u01a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0133\004\u0135\007\u01a9\023\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\027\u0159\030" +
    "\151\031\146\032\124\042\116\043\120\044\101\045\077" +
    "\046\131\047\105\052\u01ac\054\u0158\056\141\060\147\061" +
    "\112\062\100\065\125\066\126\104\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\u01b3" +
    "\001\001\000\004\143\u01b5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\141\u01b8\001\001" +
    "\000\004\040\u01b9\001\001\000\002\001\001\000\004\040" +
    "\u01e5\001\001\000\006\126\u01be\130\u01bd\001\001\000\004" +
    "\103\u01e3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\126\u01e2\001\001\000\004\132\u01c2\001\001\000\002" +
    "\001\001\000\004\134\u01c3\001\001\000\004\144\u01c5\001" +
    "\001\000\002\001\001\000\004\137\u01c7\001\001\000\002" +
    "\001\001\000\004\143\u01c8\001\001\000\002\001\001\000" +
    "\004\136\u01ca\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\145\u01d2\001\001\000\004\150\u01dd" +
    "\001\001\000\004\147\u01d4\001\001\000\002\001\001\000" +
    "\004\146\u01d5\001\001\000\002\001\001\000\004\150\u01d7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\126\u01be\130" +
    "\u01e0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\134\u01e4\001\001\000\002\001\001\000" +
    "\004\134\u01e6\001\001\000\004\143\u01e8\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\u01ea\001\001\000" +
    "\004\143\u01eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u01f2\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u01f5\072\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\u01f9\072\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\154\u0213\001\001\000\004" +
    "\154\u01fe\001\001\000\004\040\u0200\001\001\000\002\001" +
    "\001\000\004\110\u0203\001\001\000\002\001\001\000\006" +
    "\036\u0205\037\u0206\001\001\000\006\005\u0204\072\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\u0208\001\001\000\010\005\u0209\006\u020a\072" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\112\u020d\113\u020c\114\u020f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\113\u0212\114\u020f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0214\001\001\000\004\110\u0216\001\001" +
    "\000\006\036\u0205\037\u0218\001\001\000\006\005\u0217\072" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u021a\001\001\000\010\005\u0209\006\u021b\072\u012f\001" +
    "\001\000\002\001\001\000\004\015\u0227\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0248\001\001" +
    "\000\004\040\u022a\001\001\000\006\107\u022c\142\u022d\001" +
    "\001\000\006\140\u0244\153\u0245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\141\u0238\001\001\000\004\153" +
    "\u0235\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u0233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\126\u0237\001\001\000\002\001\001" +
    "\000\004\107\u0239\001\001\000\004\143\u023a\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\126\u01be\130\u023d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\u0242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\u0247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u024b\072\u012f\001" +
    "\001\000\002\001\001\000\004\040\u024d\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private Symbol errorToken;

  // list of expected tokens ids from current parsing state
  // for generating syntax error message
  private final List<Integer> expectedTokenIds = new ArrayList<Integer>();

  // to avoid reporting trivial tokens as expected tokens in error messages
  private boolean reportExpectedToken(Integer tokenId) {
    if (SqlScanner.isKeyword(tokenId) ||
        tokenId.intValue() == SqlParserSymbols.COMMA ||
        tokenId.intValue() == SqlParserSymbols.IDENT) {
      return true;
    } else {
      return false;
    }
  }

  private String getErrorTypeMessage(int lastTokenId) {
    String msg = null;
    switch(lastTokenId) {
      case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
        msg = "Unmatched string literal";
        break;
      case SqlParserSymbols.NUMERIC_OVERFLOW:
        msg = "Numeric overflow";
        break;
      default:
        msg = "Syntax error";
        break;
    }
    return msg;
  }

  // override to save error token
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorToken = token;

    // derive expected tokens from current parsing state
    expectedTokenIds.clear();
    int state = ((Symbol)stack.peek()).parse_state;
    // get row of actions table corresponding to current parsing state
    // the row consists of pairs of <tokenId, actionId>
    // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
    // the last pair is a special error action
    short[] row = action_tab[state];
    short tokenId;
    // the expected tokens are all the symbols with a
    // corresponding action from the current parsing state
    for (int i = 0; i < row.length-2; ++i) {
      // get tokenId and skip actionId
      tokenId = row[i++];
      expectedTokenIds.add(Integer.valueOf(tokenId));
    }
  }

  // override to keep it from calling report_fatal_error()
  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
      throws Exception {
    throw new Exception(getErrorTypeMessage(cur_token.sym));
  }

  /**
   * Manually throw a parse error on a given symbol for special circumstances.
   *
   * @symbolName
   *   name of symbol on which to fail parsing
   * @symbolId
   *   id of symbol from SqlParserSymbols on which to fail parsing
   */
  public void parseError(String symbolName, int symbolId) throws Exception {
    Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
        ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
    // Call syntax error to gather information about expected tokens, etc.
    // syntax_error does not throw an exception
    syntax_error(errorToken);
    // Unrecovered_syntax_error throws an exception and will terminate parsing
    unrecovered_syntax_error(errorToken);
  }

  // Returns error string, consisting of the original
  // stmt with a '^' under the offending token. Assumes
  // that parse() has been called and threw an exception
  public String getErrorMsg(String stmt) {
    if (errorToken == null || stmt == null) return null;
    String[] lines = stmt.split("\n");
    StringBuffer result = new StringBuffer();
    result.append(getErrorTypeMessage(errorToken.sym) + " at:\n");

    // print lines up to and including the one with the error
    for (int i = 0; i < errorToken.left; ++i) {
      result.append(lines[i]);
      result.append('\n');
    }
    // print error indicator
    for (int i = 0; i < errorToken.right - 1; ++i) {
      result.append(' ');
    }
    result.append("^\n");
    // print remaining lines
    for (int i = errorToken.left; i < lines.length; ++i) {
      result.append(lines[i]);
      result.append('\n');
    }

    // only report encountered and expected tokens for syntax errors
    if (errorToken.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
        errorToken.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
      return result.toString();
    }

    // append last encountered token
    result.append("Encountered: ");
    String lastToken =
      SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken.sym));
    if (lastToken != null) {
      result.append(lastToken);
    } else {
      result.append("Unknown last token with id: " + errorToken.sym);
    }

    // append expected tokens
    result.append('\n');
    result.append("Expected: ");
    String expectedToken = null;
    Integer tokenId = null;
    for (int i = 0; i < expectedTokenIds.size(); ++i) {
      tokenId = expectedTokenIds.get(i);
      if (reportExpectedToken(tokenId)) {
       expectedToken = SqlScanner.tokenIdMap.get(tokenId);
         result.append(expectedToken + ", ");
      }
    }
    // remove trailing ", "
    result.delete(result.length()-2, result.length());
    result.append('\n');

    return result.toString();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$parser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // primitive_type ::= KW_STRING 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.STRING; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // primitive_type ::= KW_TIMESTAMP 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.TIMESTAMP; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // primitive_type ::= KW_DATETIME 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DATETIME; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // primitive_type ::= KW_DATE 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DATE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // primitive_type ::= KW_DOUBLE 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // primitive_type ::= KW_FLOAT 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // primitive_type ::= KW_BOOLEAN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // primitive_type ::= KW_BIGINT 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BIGINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // primitive_type ::= KW_INT 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // primitive_type ::= KW_SMALLINT 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.SMALLINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // primitive_type ::= KW_TINYINT 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.TINYINT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // column_ref ::= IDENT DOT IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(db, tbl), col); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // column_ref ::= IDENT DOT IDENT 
            {
              SlotRef RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SlotRef(new TableName(null, tbl), col); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // column_ref ::= IDENT 
            {
              SlotRef RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SlotRef(null, col); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_ref",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // compound_predicate ::= NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // compound_predicate ::= KW_NOT expr 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // compound_predicate ::= expr KW_OR expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // compound_predicate ::= expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // in_predicate ::= expr KW_NOT KW_IN LPAREN func_arg_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InPredicate(e, l, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_predicate",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // in_predicate ::= expr KW_IN LPAREN func_arg_list RPAREN 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InPredicate(e, l, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_predicate",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // between_predicate ::= expr KW_NOT KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("between_predicate",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // between_predicate ::= expr KW_NOT KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("between_predicate",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // between_predicate ::= expr KW_BETWEEN predicate KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Predicate e2 = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("between_predicate",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // between_predicate ::= expr KW_BETWEEN non_pred_expr KW_AND expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BetweenPredicate(e1, e2, e3, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("between_predicate",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // like_predicate ::= expr KW_NOT KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // like_predicate ::= expr KW_NOT KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // like_predicate ::= expr KW_NOT KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.LIKE, e1, e2), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // like_predicate ::= expr KW_REGEXP expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // like_predicate ::= expr KW_RLIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.RLIKE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // like_predicate ::= expr KW_LIKE expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("like_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // comparison_predicate ::= expr GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // comparison_predicate ::= expr LESSTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // comparison_predicate ::= expr GREATERTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // comparison_predicate ::= expr LESSTHAN EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // comparison_predicate ::= expr LESSTHAN GREATERTHAN expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // comparison_predicate ::= expr NOT EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // comparison_predicate ::= expr EQUAL expr 
            {
              Predicate RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // predicate ::= LPAREN predicate RPAREN 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // predicate ::= like_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // predicate ::= in_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // predicate ::= compound_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // predicate ::= comparison_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // predicate ::= between_predicate 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // predicate ::= expr KW_IS KW_NOT KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IsNullPredicate(e, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // predicate ::= expr KW_IS KW_NULL 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IsNullPredicate(e, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // aggregate_param_list ::= KW_DISTINCT expr_list 
            {
              AggregateParamsList RESULT =null;
		int distinctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distinctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object distinct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AggregateParamsList(true, exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_param_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // aggregate_param_list ::= KW_ALL expr_list 
            {
              AggregateParamsList RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AggregateParamsList(false, exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_param_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // aggregate_param_list ::= expr_list 
            {
              AggregateParamsList RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AggregateParamsList(false, exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_param_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // aggregate_param_list ::= KW_ALL STAR 
            {
              AggregateParamsList RESULT =null;
		 RESULT = AggregateParamsList.createStarParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_param_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // aggregate_param_list ::= STAR 
            {
              AggregateParamsList RESULT =null;
		 RESULT = AggregateParamsList.createStarParam(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_param_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // aggregate_operator ::= KW_AVG 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.AVG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // aggregate_operator ::= KW_SUM 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.SUM; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // aggregate_operator ::= KW_DISTINCTPCSA 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.DISTINCT_PCSA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // aggregate_operator ::= KW_DISTINCTPC 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.DISTINCT_PC; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // aggregate_operator ::= KW_MAX 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.MAX; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // aggregate_operator ::= KW_MIN 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.MIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // aggregate_operator ::= KW_COUNT 
            {
              AggregateExpr.Operator RESULT =null;
		 RESULT = AggregateExpr.Operator.COUNT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_operator",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // aggregate_expr ::= aggregate_operator LPAREN aggregate_param_list RPAREN 
            {
              Expr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AggregateExpr.Operator op = (AggregateExpr.Operator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AggregateParamsList params = (AggregateParamsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new AggregateExpr((AggregateExpr.Operator) op,
        params.isStar(), params.isDistinct(), params.exprs());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aggregate_expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // literal ::= NUMERIC_OVERFLOW 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // literal ::= UNMATCHED_STRING_LITERAL expr 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // literal ::= KW_NULL 
            {
              LiteralExpr RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // literal ::= KW_FALSE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // literal ::= KW_TRUE 
            {
              LiteralExpr RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // literal ::= STRING_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // literal ::= FLOATINGPOINT_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // literal ::= INTEGER_LITERAL 
            {
              LiteralExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger l = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // timestamp_arithmetic_expr ::= IDENT LPAREN func_arg_list COMMA KW_INTERVAL expr IDENT RPAREN 
            {
              Expr RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (l.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    RESULT = new TimestampArithmeticExpr(functionName, l.get(0), v, u);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // timestamp_arithmetic_expr ::= expr SUBTRACT KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // timestamp_arithmetic_expr ::= expr ADD KW_INTERVAL expr IDENT 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // timestamp_arithmetic_expr ::= KW_INTERVAL expr IDENT ADD expr 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timestamp_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // arithmetic_expr ::= BITNOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // arithmetic_expr ::= expr BITXOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // arithmetic_expr ::= expr BITOR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // arithmetic_expr ::= expr BITAND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // arithmetic_expr ::= expr SUBTRACT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // arithmetic_expr ::= expr ADD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // arithmetic_expr ::= expr KW_DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // arithmetic_expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // arithmetic_expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // arithmetic_expr ::= expr STAR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // func_arg_list ::= func_arg_list COMMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr item = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_arg_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // func_arg_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr item = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_arg_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // non_pred_expr ::= LPAREN non_pred_expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // non_pred_expr ::= arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // non_pred_expr ::= timestamp_arithmetic_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // non_pred_expr ::= column_ref 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SlotRef c = (SlotRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // non_pred_expr ::= aggregate_expr 
            {
              Expr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // non_pred_expr ::= case_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseExpr c = (CaseExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // non_pred_expr ::= cast_expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // non_pred_expr ::= KW_IF LPAREN func_arg_list RPAREN 
            {
              Expr RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCallExpr("if", exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // non_pred_expr ::= IDENT LPAREN func_arg_list RPAREN 
            {
              Expr RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCallExpr(functionName, exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // non_pred_expr ::= IDENT LPAREN RPAREN 
            {
              Expr RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionCallExpr(functionName, new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // non_pred_expr ::= literal 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpr l = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // non_pred_expr ::= sign_chain_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_pred_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr ::= predicate 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr ::= non_pred_expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sign_chain_expr ::= ADD expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // sign_chain_expr ::= SUBTRACT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // integrate signs into literals
    // integer literals require analysis to set their type, so the instance check below
    // is not equivalent to e.getType().isNumericType()
    if (e.isLiteral() &&
       (e instanceof IntLiteral || e instanceof FloatLiteral)) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY,
                                  new IntLiteral(BigInteger.valueOf(-1)), e);
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign_chain_expr",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // case_else_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_else_clause",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // case_else_clause ::= KW_ELSE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_else_clause",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // case_when_clause_list ::= case_when_clause_list KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<CaseWhenClause> list = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // case_when_clause_list ::= KW_WHEN expr KW_THEN expr 
            {
              ArrayList<CaseWhenClause> RESULT =null;
		int whenExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whenExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr whenExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thenExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thenExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr thenExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_when_clause_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // case_expr ::= KW_CASE case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseExpr(null, whenClauseList, elseExpr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // case_expr ::= KW_CASE expr case_when_clause_list case_else_clause KW_END 
            {
              CaseExpr RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr caseExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whenClauseListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whenClauseListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<CaseWhenClause> whenClauseList = (ArrayList<CaseWhenClause>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr elseExpr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CaseExpr(caseExpr, whenClauseList, elseExpr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_expr",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // cast_expr ::= KW_CAST LPAREN expr KW_AS primitive_type RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrimitiveType targetType = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CastExpr((PrimitiveType) targetType, e, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expr",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // limit_clause ::= 
            {
              Number RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("limit_clause",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // limit_clause ::= KW_LIMIT INTEGER_LITERAL 
            {
              Number RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger l = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("limit_clause",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // order_by_element ::= expr KW_DESC 
            {
              OrderByElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OrderByElement(e, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_element",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // order_by_element ::= expr KW_ASC 
            {
              OrderByElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OrderByElement(e, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_element",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // order_by_element ::= expr 
            {
              OrderByElement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrderByElement(e, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_element",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // order_by_elements ::= order_by_elements COMMA order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<OrderByElement> list = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_elements",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // order_by_elements ::= order_by_element 
            {
              ArrayList<OrderByElement> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrderByElement e = (OrderByElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_elements",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // order_by_clause ::= 
            {
              ArrayList<OrderByElement> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_clause",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // order_by_clause ::= KW_ORDER KW_BY order_by_elements 
            {
              ArrayList<OrderByElement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<OrderByElement> l = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("order_by_clause",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // having_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // having_clause ::= KW_HAVING expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("having_clause",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // group_by_clause ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_by_clause",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // group_by_clause ::= KW_GROUP KW_BY expr_list 
            {
              ArrayList<Expr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_by_clause",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // where_clause ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // where_clause ::= KW_WHERE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_list ::= expr_list COMMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> list = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ident_list ::= ident_list COMMA IDENT 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ident);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ident_list ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList<String>();
    list.add(ident);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // opt_join_hints ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_join_hints",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // opt_join_hints ::= LBRACKET ident_list RBRACKET 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_join_hints",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // opt_outer ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_outer",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // opt_outer ::= KW_OUTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_outer",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // opt_inner ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_inner",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opt_inner ::= KW_INNER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_inner",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // join_operator ::= KW_LEFT KW_SEMI KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_SEMI_JOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join_operator",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // join_operator ::= KW_FULL opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.FULL_OUTER_JOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join_operator",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // join_operator ::= KW_RIGHT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.RIGHT_OUTER_JOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join_operator",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // join_operator ::= KW_LEFT opt_outer KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.LEFT_OUTER_JOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join_operator",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // join_operator ::= opt_inner KW_JOIN 
            {
              JoinOperator RESULT =null;
		 RESULT = JoinOperator.INNER_JOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("join_operator",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // base_table_ref ::= table_name 
            {
              BaseTableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BaseTableRef(name, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_table_ref",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // base_table_ref ::= table_name alias_clause 
            {
              BaseTableRef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TableName name = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BaseTableRef(name, alias); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_table_ref",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // inline_view_ref ::= LPAREN query_stmt RPAREN alias_clause 
            {
              InlineViewRef RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InlineViewRef(alias, query); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inline_view_ref",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // table_ref ::= inline_view_ref 
            {
              TableRef RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InlineViewRef s = (InlineViewRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // table_ref ::= base_table_ref 
            {
              TableRef RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BaseTableRef b = (BaseTableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // table_ref_list ::= table_ref_list join_operator opt_join_hints table_ref KW_USING LPAREN ident_list RPAREN 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> h = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colNamesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colNamesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> colNames = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    t.setJoinOp((JoinOperator) op);
    t.setJoinHints(h);
    t.setUsingClause(colNames);
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // table_ref_list ::= table_ref_list join_operator opt_join_hints table_ref KW_ON expr 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> h = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    t.setJoinOp((JoinOperator) op);
    t.setJoinHints(h);
    t.setOnClause(e);
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // table_ref_list ::= table_ref_list join_operator opt_join_hints table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JoinOperator op = (JoinOperator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> h = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    t.setJoinOp((JoinOperator) op);
    t.setJoinHints(h);
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // table_ref_list ::= table_ref_list COMMA table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<TableRef> list = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // table_ref_list ::= table_ref 
            {
              ArrayList<TableRef> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableRef t = (TableRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_ref_list",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // from_clause ::= KW_FROM table_ref_list 
            {
              ArrayList<TableRef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<TableRef> l = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("from_clause",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // table_name ::= IDENT DOT IDENT 
            {
              TableName RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TableName(db, tbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_name",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // table_name ::= IDENT 
            {
              TableName RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TableName(null, tbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_name",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // star_expr ::= IDENT DOT IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(db, tbl)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // star_expr ::= IDENT DOT STAR 
            {
              SelectListItem RESULT =null;
		int tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tbl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = SelectListItem.createStarItem(new TableName(null, tbl)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // star_expr ::= STAR 
            {
              SelectListItem RESULT =null;
		 RESULT = SelectListItem.createStarItem(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // alias_clause ::= STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_clause",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // alias_clause ::= KW_AS STRING_LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_clause",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // alias_clause ::= IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ident; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_clause",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // alias_clause ::= KW_AS IDENT 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ident; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alias_clause",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // select_list_item ::= star_expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectListItem expr = (SelectListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list_item",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // select_list_item ::= expr 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list_item",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // select_list_item ::= expr alias_clause 
            {
              SelectListItem RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SelectListItem(expr, alias); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list_item",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // select_list ::= select_list COMMA select_list_item 
            {
              SelectList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SelectList list = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.getItems().add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // select_list ::= select_list_item 
            {
              SelectList RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectListItem item = (SelectListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    SelectList list = new SelectList();
    list.getItems().add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // select_clause ::= KW_SELECT KW_DISTINCT select_list 
            {
              SelectList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    l.setIsDistinct(true);
    RESULT = l;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_clause",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // select_clause ::= KW_SELECT KW_ALL select_list 
            {
              SelectList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_clause",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // select_clause ::= KW_SELECT select_list 
            {
              SelectList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectList l = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_clause",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // select_stmt ::= select_clause from_clause where_clause group_by_clause having_clause order_by_clause limit_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tableRefListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tableRefListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<TableRef> tableRefList = (ArrayList<TableRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wherePredicateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wherePredicateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr wherePredicate = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int groupingExprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int groupingExprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expr> groupingExprs = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int havingPredicateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int havingPredicateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr havingPredicate = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int limitClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limitClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Number limitClause = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, tableRefList, wherePredicate,
                            groupingExprs, havingPredicate, orderByClause,
                            (limitClause == null ? -1 : limitClause.longValue()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // select_stmt ::= select_clause 
            {
              SelectStmt RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new SelectStmt(selectList, null, null, null, null, null, -1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // describe_output_style ::= 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.MINIMAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("describe_output_style",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // describe_output_style ::= KW_FORMATTED 
            {
              TDescribeTableOutputStyle RESULT =null;
		 RESULT = TDescribeTableOutputStyle.FORMATTED; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("describe_output_style",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // describe_stmt ::= KW_DESCRIBE describe_output_style table_name 
            {
              DescribeStmt RESULT =null;
		int styleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int styleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TDescribeTableOutputStyle style = (TDescribeTableOutputStyle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DescribeStmt(table, style); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("describe_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // show_pattern ::= KW_LIKE STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_pattern",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // show_pattern ::= STRING_LITERAL 
            {
              String RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = showPattern; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_pattern",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw show_pattern 
            {
              ShowDbsStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowDbsStmt(showPattern); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // show_dbs_stmt ::= KW_SHOW dbs_or_schemas_kw 
            {
              ShowDbsStmt RESULT =null;
		 RESULT = new ShowDbsStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_dbs_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, showPattern); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // show_tables_stmt ::= KW_SHOW KW_TABLES KW_IN IDENT 
            {
              ShowTablesStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(db, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // show_tables_stmt ::= KW_SHOW KW_TABLES show_pattern 
            {
              ShowTablesStmt RESULT =null;
		int showPatternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int showPatternright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String showPattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShowTablesStmt(showPattern); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // show_tables_stmt ::= KW_SHOW KW_TABLES 
            {
              ShowTablesStmt RESULT =null;
		 RESULT = new ShowTablesStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_tables_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // use_stmt ::= KW_USE IDENT 
            {
              UseStmt RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String db = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseStmt(db); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // values_operand_list ::= values_operand_list COMMA LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, -1), Qualifier.ALL));
    RESULT = operands;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // values_operand_list ::= LPAREN select_list RPAREN 
            {
              List<UnionOperand> RESULT =null;
		int selectListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int selectListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SelectList selectList = (SelectList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(
        new SelectStmt(selectList, null, null, null, null, null, -1), null));
    RESULT = operands;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_operand_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // values_stmt ::= KW_VALUES LPAREN values_operand_list RPAREN order_by_clause limit_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int limitClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limitClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Number limitClause = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause,
                            (limitClause == null ? -1 : limitClause.longValue()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // values_stmt ::= KW_VALUES values_operand_list order_by_clause limit_clause 
            {
              ValuesStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int limitClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limitClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Number limitClause = (Number)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ValuesStmt(operands, orderByClause,
                            (limitClause == null ? -1 : limitClause.longValue()));
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("values_stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // union_op ::= KW_UNION KW_ALL 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.ALL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_op",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // union_op ::= KW_UNION KW_DISTINCT 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_op",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // union_op ::= KW_UNION 
            {
              Qualifier RESULT =null;
		 RESULT = Qualifier.DISTINCT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_op",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // union_operand_list ::= union_operand_list union_op union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Qualifier op = (Qualifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    operands.add(new UnionOperand(operand, op));
    RESULT = operands;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // union_operand_list ::= union_operand 
            {
              List<UnionOperand> RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt operand = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List<UnionOperand> operands = new ArrayList<UnionOperand>();
    operands.add(new UnionOperand(operand, null));
    RESULT = operands;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_operand_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // union_operand ::= LPAREN query_stmt RPAREN 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = query; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // union_operand ::= values_stmt 
            {
              QueryStmt RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValuesStmt values = (ValuesStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = values; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // union_operand ::= select_stmt 
            {
              QueryStmt RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SelectStmt select = (SelectStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = select; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_operand",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements KW_LIMIT INTEGER_LITERAL 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int limitClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limitClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger limitClause = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, limitClause.longValue());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // union_with_order_by_or_limit ::= union_operand_list KW_LIMIT INTEGER_LITERAL 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int limitClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limitClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BigInteger limitClause = (BigInteger)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new UnionStmt(operands, null, limitClause.longValue());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // union_with_order_by_or_limit ::= union_operand_list KW_ORDER KW_BY order_by_elements 
            {
              QueryStmt RESULT =null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orderByClauseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orderByClauseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<OrderByElement> orderByClause = (ArrayList<OrderByElement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new UnionStmt(operands, orderByClause, -1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union_with_order_by_or_limit",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // with_table_ref_list ::= with_table_ref_list COMMA with_table_ref 
            {
              ArrayList<ViewRef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ViewRef> list = (ArrayList<ViewRef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViewRef t = (ViewRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(t);
    RESULT = list; 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_table_ref_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // with_table_ref_list ::= with_table_ref 
            {
              ArrayList<ViewRef> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViewRef t = (ViewRef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ViewRef> list = new ArrayList<ViewRef>();
    list.add(t);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_table_ref_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // with_table_ref ::= STRING_LITERAL KW_AS LPAREN query_stmt RPAREN 
            {
              ViewRef RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ViewRef(alias, query); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_table_ref",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // with_table_ref ::= IDENT KW_AS LPAREN query_stmt RPAREN 
            {
              ViewRef RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ViewRef(alias, query); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_table_ref",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // with_clause ::= 
            {
              WithClause RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_clause",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // with_clause ::= KW_WITH with_table_ref_list 
            {
              WithClause RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ViewRef> list = (ArrayList<ViewRef>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WithClause(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_clause",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // query_stmt ::= with_clause union_with_order_by_or_limit 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt union = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    union.setWithClause(w);
    RESULT = union;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // query_stmt ::= with_clause union_operand_list 
            {
              QueryStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<UnionOperand> operands = (List<UnionOperand>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    QueryStmt queryStmt = null;
    if (operands.size() == 1) {
      queryStmt = operands.get(0).getQueryStmt();
    } else {
      queryStmt = new UnionStmt(operands, null, -1);
    }
    queryStmt.setWithClause(w);
    RESULT = queryStmt;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("query_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // static_partition_key_value ::= IDENT EQUAL expr 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // partition_key_value ::= static_partition_key_value 
            {
              PartitionKeyValue RESULT =null;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionKeyValue partition = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = partition; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_key_value",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // partition_key_value ::= IDENT 
            {
              PartitionKeyValue RESULT =null;
		int columnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int columnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String column = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PartitionKeyValue(column, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_key_value",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // static_partition_key_value_list ::= static_partition_key_value_list COMMA static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // static_partition_key_value_list ::= static_partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_partition_key_value_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // partition_spec ::= 
            {
              PartitionSpec RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_spec",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // partition_spec ::= KW_PARTITION LPAREN static_partition_key_value_list RPAREN 
            {
              PartitionSpec RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PartitionSpec(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_spec",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // partition_key_value_list ::= partition_key_value_list COMMA partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // partition_key_value_list ::= partition_key_value 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionKeyValue item = (PartitionKeyValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<PartitionKeyValue> list = new ArrayList<PartitionKeyValue>();
    list.add(item);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_key_value_list",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // partition_clause ::= 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_clause",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // partition_clause ::= KW_PARTITION LPAREN partition_key_value_list RPAREN 
            {
              ArrayList<PartitionKeyValue> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_clause",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_exists_val",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_exists_val ::= KW_IF KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_exists_val",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dbs_or_schemas_kw ::= KW_SCHEMAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dbs_or_schemas_kw ::= KW_DATABASES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dbs_or_schemas_kw",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // db_or_schema_kw ::= KW_SCHEMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // db_or_schema_kw ::= KW_DATABASE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_or_schema_kw",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // drop_tbl_or_view_stmt ::= KW_DROP KW_VIEW if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // drop_tbl_or_view_stmt ::= KW_DROP KW_TABLE if_exists_val table_name 
            {
              DropTableOrViewStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DropTableOrViewStmt(table, if_exists, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_tbl_or_view_stmt",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // drop_db_stmt ::= KW_DROP db_or_schema_kw if_exists_val IDENT 
            {
              DropDbStmt RESULT =null;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DropDbStmt(db_name, if_exists); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("drop_db_stmt",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_RENAME KW_TO table_name 
            {
              StatementBase RESULT =null;
		int before_tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int before_tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TableName before_table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(before_table, new_table, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // alter_view_stmt ::= KW_ALTER KW_VIEW table_name KW_AS query_stmt 
            {
              StatementBase RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterViewStmt(table, view_def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_view_stmt",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // view_column_def ::= IDENT comment_val 
            {
              ColumnDef RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ColumnDef(col_name, null, comment); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_column_def",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // view_column_def_list ::= view_column_def_list COMMA view_column_def 
            {
              ArrayList<ColumnDef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ColumnDef> list = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef col_def = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // view_column_def_list ::= view_column_def 
            {
              ArrayList<ColumnDef> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef col_def = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ColumnDef> list = new ArrayList<ColumnDef>();
    list.add(col_def);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_column_def_list",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // view_column_defs ::= 
            {
              ArrayList<ColumnDef> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_column_defs",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // view_column_defs ::= LPAREN view_column_def_list RPAREN 
            {
              ArrayList<ColumnDef> RESULT =null;
		int view_col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int view_col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ColumnDef> view_col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = view_col_defs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("view_column_defs",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // create_view_stmt ::= KW_CREATE KW_VIEW if_not_exists_val table_name view_column_defs comment_val KW_AS query_stmt 
            {
              CreateViewStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int view_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int view_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName view_name = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ColumnDef> col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int view_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int view_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt view_def = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new CreateViewStmt(if_not_exists, view_name, col_defs, comment, view_def);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_view_stmt",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // column_def ::= IDENT primitive_type comment_val 
            {
              ColumnDef RESULT =null;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrimitiveType targetType = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ColumnDef(col_name, targetType, comment); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_def",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // column_def_list ::= column_def_list COMMA column_def 
            {
              ArrayList<ColumnDef> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ColumnDef> list = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef col_def = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(col_def);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_def_list",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // column_def_list ::= column_def 
            {
              ArrayList<ColumnDef> RESULT =null;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef col_def = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ColumnDef> list = new ArrayList<ColumnDef>();
    list.add(col_def);
    RESULT = list;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("column_def_list",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // partition_column_defs ::= 
            {
              ArrayList<ColumnDef> RESULT =null;
		 RESULT = new ArrayList<ColumnDef>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // partition_column_defs ::= KW_PARTITIONED KW_BY LPAREN column_def_list RPAREN 
            {
              ArrayList<ColumnDef> RESULT =null;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ColumnDef> col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = col_defs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("partition_column_defs",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // file_format_val ::= KW_RCFILE 
            {
              FileFormat RESULT =null;
		 RESULT = FileFormat.RCFILE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_val",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // file_format_val ::= KW_SEQUENCEFILE 
            {
              FileFormat RESULT =null;
		 RESULT = FileFormat.SEQUENCEFILE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_val",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // file_format_val ::= KW_TEXTFILE 
            {
              FileFormat RESULT =null;
		 RESULT = FileFormat.TEXTFILE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_val",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // file_format_val ::= KW_PARQUETFILE 
            {
              FileFormat RESULT =null;
		 RESULT = FileFormat.PARQUETFILE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_val",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // file_format_create_table_val ::= 
            {
              FileFormat RESULT =null;
		 RESULT = FileFormat.TEXTFILE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // file_format_create_table_val ::= KW_STORED KW_AS file_format_val 
            {
              FileFormat RESULT =null;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FileFormat file_format = (FileFormat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = file_format; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_format_create_table_val",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // terminator_val ::= KW_TERMINATED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int terminatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int terminatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String terminator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = terminator; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator_val",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // field_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // field_terminator_val ::= KW_FIELDS terminator_val 
            {
              String RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = field_terminator; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_terminator_val",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // line_terminator_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // line_terminator_val ::= KW_LINES terminator_val 
            {
              String RESULT =null;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = line_terminator; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("line_terminator_val",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // escaped_by_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // escaped_by_val ::= KW_ESCAPED KW_BY STRING_LITERAL 
            {
              String RESULT =null;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = escaped_by; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escaped_by_val",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // row_format_val ::= 
            {
              RowFormat RESULT =null;
		 RESULT = RowFormat.DEFAULT_ROW_FORMAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("row_format_val",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // row_format_val ::= KW_ROW KW_FORMAT KW_DELIMITED field_terminator_val escaped_by_val line_terminator_val 
            {
              RowFormat RESULT =null;
		int field_terminatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int field_terminatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String field_terminator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int escaped_byleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int escaped_byright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String escaped_by = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int line_terminatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int line_terminatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String line_terminator = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RowFormat(field_terminator, line_terminator, escaped_by); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("row_format_val",98, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_not_exists_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_not_exists_val ::= KW_IF KW_NOT KW_EXISTS 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_not_exists_val",95, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // external_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_val",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // external_val ::= KW_EXTERNAL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_val",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // location_val ::= 
            {
              HdfsURI RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_val",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location_val ::= KW_LOCATION STRING_LITERAL 
            {
              HdfsURI RESULT =null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new HdfsURI(location); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_val",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comment_val ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment_val",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comment_val ::= KW_COMMENT STRING_LITERAL 
            {
              String RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = comment; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comment_val",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // create_tbl_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name LPAREN column_def_list RPAREN partition_column_defs comment_val row_format_val file_format_create_table_val location_val 
            {
              CreateTableStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ColumnDef> col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int partition_col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int partition_col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ColumnDef> partition_col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int row_formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int row_formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RowFormat row_format = (RowFormat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FileFormat file_format = (FileFormat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HdfsURI location = (HdfsURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new CreateTableStmt(table, col_defs, partition_col_defs, external, comment,
        row_format, file_format, location, if_not_exists);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_tbl_stmt",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HdfsURI location = (HdfsURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        null, location, if_not_exists);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // create_tbl_like_stmt ::= KW_CREATE external_val KW_TABLE if_not_exists_val table_name KW_LIKE table_name comment_val KW_STORED KW_AS file_format_val location_val 
            {
              CreateTableLikeStmt RESULT =null;
		int externalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int externalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Boolean external = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int other_tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int other_tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TableName other_table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FileFormat file_format = (FileFormat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HdfsURI location = (HdfsURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new CreateTableLikeStmt(table, other_table, external, comment,
        file_format, location, if_not_exists);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_tbl_like_stmt",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // create_db_stmt ::= KW_CREATE db_or_schema_kw if_not_exists_val IDENT comment_val location_val 
            {
              CreateDbStmt RESULT =null;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int db_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int db_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String db_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HdfsURI location = (HdfsURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CreateDbStmt(db_name, comment, location, if_not_exists); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_db_stmt",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // replace_existing_cols_val ::= KW_ADD 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // replace_existing_cols_val ::= KW_REPLACE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("replace_existing_cols_val",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // optional_kw_column ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_kw_column",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // optional_kw_column ::= KW_COLUMN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_kw_column",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_RENAME KW_TO table_name 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int new_tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int new_tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName new_table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableOrViewRenameStmt(table, new_table, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name partition_spec KW_SET KW_LOCATION STRING_LITERAL 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String location = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableSetLocationStmt(table, partition, new HdfsURI(location)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name partition_spec KW_SET KW_FILEFORMAT file_format_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int file_formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int file_formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FileFormat file_format = (FileFormat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableSetFileFormatStmt(table, partition, file_format); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP if_exists_val partition_spec 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int if_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int if_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean if_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableDropPartitionStmt(table, partition, if_exists); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_CHANGE optional_kw_column IDENT column_def 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int col_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ColumnDef col_def = (ColumnDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableChangeColStmt(table, col_name, col_def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_DROP optional_kw_column IDENT 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int col_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int col_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AlterTableDropColStmt(table, col_name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name KW_ADD if_not_exists_val partition_spec location_val 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int if_not_existsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int if_not_existsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean if_not_exists = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int locationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HdfsURI location = (HdfsURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new AlterTableAddPartitionStmt(table, partition,
        location, if_not_exists);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // alter_tbl_stmt ::= KW_ALTER KW_TABLE table_name replace_existing_cols_val KW_COLUMNS LPAREN column_def_list RPAREN 
            {
              AlterTableStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int replaceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int replaceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean replace = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int col_defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int col_defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ColumnDef> col_defs = (ArrayList<ColumnDef>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlterTableAddReplaceColsStmt(table, col_defs, replace); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("alter_tbl_stmt",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optional_kw_table ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_kw_table",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optional_kw_table ::= KW_TABLE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_kw_table",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optional_ident_list ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = Lists.newArrayList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_ident_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optional_ident_list ::= ident_list 
            {
              ArrayList<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ident = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ident; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_ident_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optional_query_stmt ::= 
            {
              QueryStmt RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_query_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optional_query_stmt ::= query_stmt 
            {
              QueryStmt RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = query; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_query_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // insert_stmt ::= with_clause KW_INSERT KW_INTO optional_kw_table table_name partition_clause query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, query, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // insert_stmt ::= with_clause KW_INSERT KW_INTO optional_kw_table table_name LPAREN optional_ident_list RPAREN partition_clause optional_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, false, list, query, col_perm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // insert_stmt ::= with_clause KW_INSERT KW_OVERWRITE optional_kw_table table_name partition_clause query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, query, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // insert_stmt ::= with_clause KW_INSERT KW_OVERWRITE optional_kw_table table_name LPAREN optional_ident_list RPAREN partition_clause optional_query_stmt 
            {
              InsertStmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		WithClause w = (WithClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int col_permleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int col_permright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> col_perm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PartitionKeyValue> list = (ArrayList<PartitionKeyValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InsertStmt(w, table, true, list, query, col_perm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // explain_stmt ::= KW_EXPLAIN insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     insert.setIsExplain(true);
     RESULT = insert;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explain_stmt",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // explain_stmt ::= KW_EXPLAIN query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     query.setIsExplain(true);
     RESULT = query;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("explain_stmt",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reset_metadata_stmt ::= KW_REFRESH table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA table_name 
            {
              ResetMetadataStmt RESULT =null;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ResetMetadataStmt(table, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reset_metadata_stmt ::= KW_INVALIDATE KW_METADATA 
            {
              ResetMetadataStmt RESULT =null;
		 RESULT = new ResetMetadataStmt(null, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reset_metadata_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // overwrite_val ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("overwrite_val",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // overwrite_val ::= KW_OVERWRITE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("overwrite_val",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // load_stmt ::= KW_LOAD KW_DATA KW_INPATH STRING_LITERAL overwrite_val KW_INTO KW_TABLE table_name partition_spec 
            {
              LoadDataStmt RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int overwriteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int overwriteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean overwrite = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TableName table = (TableName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int partitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PartitionSpec partition = (PartitionSpec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LoadDataStmt(table, new HdfsURI(path), overwrite, partition); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("load_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= reset_metadata_stmt 
            {
              StatementBase RESULT =null;
		int reset_metadataleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reset_metadataright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResetMetadataStmt reset_metadata = (ResetMetadataStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = reset_metadata; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= load_stmt 
            {
              StatementBase RESULT =null;
		int loadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LoadDataStmt load = (LoadDataStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = load; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= explain_stmt 
            {
              StatementBase RESULT =null;
		int explainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementBase explain = (StatementBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = explain; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= drop_tbl_or_view_stmt 
            {
              StatementBase RESULT =null;
		int drop_tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drop_tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DropTableOrViewStmt drop_tbl = (DropTableOrViewStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = drop_tbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= drop_db_stmt 
            {
              StatementBase RESULT =null;
		int drop_dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drop_dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DropDbStmt drop_db = (DropDbStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = drop_db; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= create_db_stmt 
            {
              StatementBase RESULT =null;
		int create_dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int create_dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateDbStmt create_db = (CreateDbStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = create_db; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= create_view_stmt 
            {
              StatementBase RESULT =null;
		int create_viewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int create_viewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateViewStmt create_view = (CreateViewStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = create_view; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= create_tbl_stmt 
            {
              StatementBase RESULT =null;
		int create_tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int create_tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateTableStmt create_tbl = (CreateTableStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = create_tbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= create_tbl_like_stmt 
            {
              StatementBase RESULT =null;
		int create_tbl_likeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int create_tbl_likeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CreateTableLikeStmt create_tbl_like = (CreateTableLikeStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = create_tbl_like; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= alter_view_stmt 
            {
              StatementBase RESULT =null;
		int alter_viewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alter_viewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementBase alter_view = (StatementBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = alter_view; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= alter_tbl_stmt 
            {
              StatementBase RESULT =null;
		int alter_tblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alter_tblright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AlterTableStmt alter_tbl = (AlterTableStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = alter_tbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= describe_stmt 
            {
              StatementBase RESULT =null;
		int describeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int describeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DescribeStmt describe = (DescribeStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = describe; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= show_dbs_stmt 
            {
              StatementBase RESULT =null;
		int show_dbsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int show_dbsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShowDbsStmt show_dbs = (ShowDbsStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = show_dbs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= show_tables_stmt 
            {
              StatementBase RESULT =null;
		int show_tablesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int show_tablesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShowTablesStmt show_tables = (ShowTablesStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = show_tables; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= use_stmt 
            {
              StatementBase RESULT =null;
		int useleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int useright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UseStmt use = (UseStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = use; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= insert_stmt 
            {
              StatementBase RESULT =null;
		int insertleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InsertStmt insert = (InsertStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = insert; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmt ::= query_stmt 
            {
              StatementBase RESULT =null;
		int queryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int queryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		QueryStmt query = (QueryStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = query; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBase start_val = (StatementBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

