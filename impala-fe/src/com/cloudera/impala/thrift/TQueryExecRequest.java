/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueryExecRequest implements org.apache.thrift.TBase<TQueryExecRequest, TQueryExecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryExecRequest");

  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragments", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEST_FRAGMENT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_fragment_idx", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField FINALIZE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("finalize_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("query_plan", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryExecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryExecRequestTupleSchemeFactory());
  }

  public com.cloudera.impala.thrift.TDescriptorTable desc_tbl; // optional
  public List<com.cloudera.impala.thrift.TPlanFragment> fragments; // required
  public List<Integer> dest_fragment_idx; // optional
  public Map<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>> per_node_scan_ranges; // optional
  public TResultSetMetadata result_set_metadata; // optional
  public TFinalizeParams finalize_params; // optional
  public com.cloudera.impala.thrift.TQueryGlobals query_globals; // required
  public String query_plan; // optional
  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public com.cloudera.impala.thrift.TStmtType stmt_type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESC_TBL((short)1, "desc_tbl"),
    FRAGMENTS((short)2, "fragments"),
    DEST_FRAGMENT_IDX((short)3, "dest_fragment_idx"),
    PER_NODE_SCAN_RANGES((short)4, "per_node_scan_ranges"),
    RESULT_SET_METADATA((short)5, "result_set_metadata"),
    FINALIZE_PARAMS((short)6, "finalize_params"),
    QUERY_GLOBALS((short)7, "query_globals"),
    QUERY_PLAN((short)8, "query_plan"),
    /**
     * 
     * @see com.cloudera.impala.thrift.TStmtType
     */
    STMT_TYPE((short)9, "stmt_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESC_TBL
          return DESC_TBL;
        case 2: // FRAGMENTS
          return FRAGMENTS;
        case 3: // DEST_FRAGMENT_IDX
          return DEST_FRAGMENT_IDX;
        case 4: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 5: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 6: // FINALIZE_PARAMS
          return FINALIZE_PARAMS;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 8: // QUERY_PLAN
          return QUERY_PLAN;
        case 9: // STMT_TYPE
          return STMT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.DESC_TBL,_Fields.DEST_FRAGMENT_IDX,_Fields.PER_NODE_SCAN_RANGES,_Fields.RESULT_SET_METADATA,_Fields.FINALIZE_PARAMS,_Fields.QUERY_PLAN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("fragments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TPlanFragment.class))));
    tmpMap.put(_Fields.DEST_FRAGMENT_IDX, new org.apache.thrift.meta_data.FieldMetaData("dest_fragment_idx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TScanRangeLocations.class)))));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSetMetadata.class)));
    tmpMap.put(_Fields.FINALIZE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("finalize_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFinalizeParams.class)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_PLAN, new org.apache.thrift.meta_data.FieldMetaData("query_plan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.cloudera.impala.thrift.TStmtType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryExecRequest.class, metaDataMap);
  }

  public TQueryExecRequest() {
  }

  public TQueryExecRequest(
    List<com.cloudera.impala.thrift.TPlanFragment> fragments,
    com.cloudera.impala.thrift.TQueryGlobals query_globals,
    com.cloudera.impala.thrift.TStmtType stmt_type)
  {
    this();
    this.fragments = fragments;
    this.query_globals = query_globals;
    this.stmt_type = stmt_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryExecRequest(TQueryExecRequest other) {
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetFragments()) {
      List<com.cloudera.impala.thrift.TPlanFragment> __this__fragments = new ArrayList<com.cloudera.impala.thrift.TPlanFragment>();
      for (com.cloudera.impala.thrift.TPlanFragment other_element : other.fragments) {
        __this__fragments.add(new com.cloudera.impala.thrift.TPlanFragment(other_element));
      }
      this.fragments = __this__fragments;
    }
    if (other.isSetDest_fragment_idx()) {
      List<Integer> __this__dest_fragment_idx = new ArrayList<Integer>();
      for (Integer other_element : other.dest_fragment_idx) {
        __this__dest_fragment_idx.add(other_element);
      }
      this.dest_fragment_idx = __this__dest_fragment_idx;
    }
    if (other.isSetPer_node_scan_ranges()) {
      Map<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>> __this__per_node_scan_ranges = new HashMap<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>>();
      for (Map.Entry<Integer, List<com.cloudera.impala.thrift.TScanRangeLocations>> other_element : other.per_node_scan_ranges.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<com.cloudera.impala.thrift.TScanRangeLocations> other_element_value = other_element.getValue();

        Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        List<com.cloudera.impala.thrift.TScanRangeLocations> __this__per_node_scan_ranges_copy_value = new ArrayList<com.cloudera.impala.thrift.TScanRangeLocations>();
        for (com.cloudera.impala.thrift.TScanRangeLocations other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new com.cloudera.impala.thrift.TScanRangeLocations(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetResult_set_metadata()) {
      this.result_set_metadata = new TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetFinalize_params()) {
      this.finalize_params = new TFinalizeParams(other.finalize_params);
    }
    if (other.isSetQuery_globals()) {
      this.query_globals = new com.cloudera.impala.thrift.TQueryGlobals(other.query_globals);
    }
    if (other.isSetQuery_plan()) {
      this.query_plan = other.query_plan;
    }
    if (other.isSetStmt_type()) {
      this.stmt_type = other.stmt_type;
    }
  }

  public TQueryExecRequest deepCopy() {
    return new TQueryExecRequest(this);
  }

  @Override
  public void clear() {
    this.desc_tbl = null;
    this.fragments = null;
    this.dest_fragment_idx = null;
    this.per_node_scan_ranges = null;
    this.result_set_metadata = null;
    this.finalize_params = null;
    this.query_globals = null;
    this.query_plan = null;
    this.stmt_type = null;
  }

  public com.cloudera.impala.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TQueryExecRequest setDesc_tbl(com.cloudera.impala.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public int getFragmentsSize() {
    return (this.fragments == null) ? 0 : this.fragments.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TPlanFragment> getFragmentsIterator() {
    return (this.fragments == null) ? null : this.fragments.iterator();
  }

  public void addToFragments(com.cloudera.impala.thrift.TPlanFragment elem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<com.cloudera.impala.thrift.TPlanFragment>();
    }
    this.fragments.add(elem);
  }

  public List<com.cloudera.impala.thrift.TPlanFragment> getFragments() {
    return this.fragments;
  }

  public TQueryExecRequest setFragments(List<com.cloudera.impala.thrift.TPlanFragment> fragments) {
    this.fragments = fragments;
    return this;
  }

  public void unsetFragments() {
    this.fragments = null;
  }

  /** Returns true if field fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetFragments() {
    return this.fragments != null;
  }

  public void setFragmentsIsSet(boolean value) {
    if (!value) {
      this.fragments = null;
    }
  }

  public int getDest_fragment_idxSize() {
    return (this.dest_fragment_idx == null) ? 0 : this.dest_fragment_idx.size();
  }

  public java.util.Iterator<Integer> getDest_fragment_idxIterator() {
    return (this.dest_fragment_idx == null) ? null : this.dest_fragment_idx.iterator();
  }

  public void addToDest_fragment_idx(int elem) {
    if (this.dest_fragment_idx == null) {
      this.dest_fragment_idx = new ArrayList<Integer>();
    }
    this.dest_fragment_idx.add(elem);
  }

  public List<Integer> getDest_fragment_idx() {
    return this.dest_fragment_idx;
  }

  public TQueryExecRequest setDest_fragment_idx(List<Integer> dest_fragment_idx) {
    this.dest_fragment_idx = dest_fragment_idx;
    return this;
  }

  public void unsetDest_fragment_idx() {
    this.dest_fragment_idx = null;
  }

  /** Returns true if field dest_fragment_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetDest_fragment_idx() {
    return this.dest_fragment_idx != null;
  }

  public void setDest_fragment_idxIsSet(boolean value) {
    if (!value) {
      this.dest_fragment_idx = null;
    }
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(int key, List<com.cloudera.impala.thrift.TScanRangeLocations> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new HashMap<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  public Map<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TQueryExecRequest setPer_node_scan_ranges(Map<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public TResultSetMetadata getResult_set_metadata() {
    return this.result_set_metadata;
  }

  public TQueryExecRequest setResult_set_metadata(TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResult_set_metadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set_metadata() {
    return this.result_set_metadata != null;
  }

  public void setResult_set_metadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  public TFinalizeParams getFinalize_params() {
    return this.finalize_params;
  }

  public TQueryExecRequest setFinalize_params(TFinalizeParams finalize_params) {
    this.finalize_params = finalize_params;
    return this;
  }

  public void unsetFinalize_params() {
    this.finalize_params = null;
  }

  /** Returns true if field finalize_params is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalize_params() {
    return this.finalize_params != null;
  }

  public void setFinalize_paramsIsSet(boolean value) {
    if (!value) {
      this.finalize_params = null;
    }
  }

  public com.cloudera.impala.thrift.TQueryGlobals getQuery_globals() {
    return this.query_globals;
  }

  public TQueryExecRequest setQuery_globals(com.cloudera.impala.thrift.TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQuery_globals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_globals() {
    return this.query_globals != null;
  }

  public void setQuery_globalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  public String getQuery_plan() {
    return this.query_plan;
  }

  public TQueryExecRequest setQuery_plan(String query_plan) {
    this.query_plan = query_plan;
    return this;
  }

  public void unsetQuery_plan() {
    this.query_plan = null;
  }

  /** Returns true if field query_plan is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_plan() {
    return this.query_plan != null;
  }

  public void setQuery_planIsSet(boolean value) {
    if (!value) {
      this.query_plan = null;
    }
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public com.cloudera.impala.thrift.TStmtType getStmt_type() {
    return this.stmt_type;
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.TStmtType
   */
  public TQueryExecRequest setStmt_type(com.cloudera.impala.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmt_type() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmt_type() {
    return this.stmt_type != null;
  }

  public void setStmt_typeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.cloudera.impala.thrift.TDescriptorTable)value);
      }
      break;

    case FRAGMENTS:
      if (value == null) {
        unsetFragments();
      } else {
        setFragments((List<com.cloudera.impala.thrift.TPlanFragment>)value);
      }
      break;

    case DEST_FRAGMENT_IDX:
      if (value == null) {
        unsetDest_fragment_idx();
      } else {
        setDest_fragment_idx((List<Integer>)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((Map<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>>)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResult_set_metadata();
      } else {
        setResult_set_metadata((TResultSetMetadata)value);
      }
      break;

    case FINALIZE_PARAMS:
      if (value == null) {
        unsetFinalize_params();
      } else {
        setFinalize_params((TFinalizeParams)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQuery_globals();
      } else {
        setQuery_globals((com.cloudera.impala.thrift.TQueryGlobals)value);
      }
      break;

    case QUERY_PLAN:
      if (value == null) {
        unsetQuery_plan();
      } else {
        setQuery_plan((String)value);
      }
      break;

    case STMT_TYPE:
      if (value == null) {
        unsetStmt_type();
      } else {
        setStmt_type((com.cloudera.impala.thrift.TStmtType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESC_TBL:
      return getDesc_tbl();

    case FRAGMENTS:
      return getFragments();

    case DEST_FRAGMENT_IDX:
      return getDest_fragment_idx();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    case RESULT_SET_METADATA:
      return getResult_set_metadata();

    case FINALIZE_PARAMS:
      return getFinalize_params();

    case QUERY_GLOBALS:
      return getQuery_globals();

    case QUERY_PLAN:
      return getQuery_plan();

    case STMT_TYPE:
      return getStmt_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESC_TBL:
      return isSetDesc_tbl();
    case FRAGMENTS:
      return isSetFragments();
    case DEST_FRAGMENT_IDX:
      return isSetDest_fragment_idx();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    case RESULT_SET_METADATA:
      return isSetResult_set_metadata();
    case FINALIZE_PARAMS:
      return isSetFinalize_params();
    case QUERY_GLOBALS:
      return isSetQuery_globals();
    case QUERY_PLAN:
      return isSetQuery_plan();
    case STMT_TYPE:
      return isSetStmt_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryExecRequest)
      return this.equals((TQueryExecRequest)that);
    return false;
  }

  public boolean equals(TQueryExecRequest that) {
    if (that == null)
      return false;

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_fragments = true && this.isSetFragments();
    boolean that_present_fragments = true && that.isSetFragments();
    if (this_present_fragments || that_present_fragments) {
      if (!(this_present_fragments && that_present_fragments))
        return false;
      if (!this.fragments.equals(that.fragments))
        return false;
    }

    boolean this_present_dest_fragment_idx = true && this.isSetDest_fragment_idx();
    boolean that_present_dest_fragment_idx = true && that.isSetDest_fragment_idx();
    if (this_present_dest_fragment_idx || that_present_dest_fragment_idx) {
      if (!(this_present_dest_fragment_idx && that_present_dest_fragment_idx))
        return false;
      if (!this.dest_fragment_idx.equals(that.dest_fragment_idx))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResult_set_metadata();
    boolean that_present_result_set_metadata = true && that.isSetResult_set_metadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_finalize_params = true && this.isSetFinalize_params();
    boolean that_present_finalize_params = true && that.isSetFinalize_params();
    if (this_present_finalize_params || that_present_finalize_params) {
      if (!(this_present_finalize_params && that_present_finalize_params))
        return false;
      if (!this.finalize_params.equals(that.finalize_params))
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQuery_globals();
    boolean that_present_query_globals = true && that.isSetQuery_globals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_plan = true && this.isSetQuery_plan();
    boolean that_present_query_plan = true && that.isSetQuery_plan();
    if (this_present_query_plan || that_present_query_plan) {
      if (!(this_present_query_plan && that_present_query_plan))
        return false;
      if (!this.query_plan.equals(that.query_plan))
        return false;
    }

    boolean this_present_stmt_type = true && this.isSetStmt_type();
    boolean that_present_stmt_type = true && that.isSetStmt_type();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueryExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueryExecRequest typedOther = (TQueryExecRequest)other;

    lastComparison = Boolean.valueOf(isSetDesc_tbl()).compareTo(typedOther.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, typedOther.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragments()).compareTo(typedOther.isSetFragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragments, typedOther.fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDest_fragment_idx()).compareTo(typedOther.isSetDest_fragment_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest_fragment_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_fragment_idx, typedOther.dest_fragment_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_node_scan_ranges()).compareTo(typedOther.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, typedOther.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_set_metadata()).compareTo(typedOther.isSetResult_set_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, typedOther.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalize_params()).compareTo(typedOther.isSetFinalize_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalize_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalize_params, typedOther.finalize_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_globals()).compareTo(typedOther.isSetQuery_globals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_globals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, typedOther.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_plan()).compareTo(typedOther.isSetQuery_plan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_plan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_plan, typedOther.query_plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStmt_type()).compareTo(typedOther.isSetStmt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, typedOther.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryExecRequest(");
    boolean first = true;

    if (isSetDesc_tbl()) {
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fragments:");
    if (this.fragments == null) {
      sb.append("null");
    } else {
      sb.append(this.fragments);
    }
    first = false;
    if (isSetDest_fragment_idx()) {
      if (!first) sb.append(", ");
      sb.append("dest_fragment_idx:");
      if (this.dest_fragment_idx == null) {
        sb.append("null");
      } else {
        sb.append(this.dest_fragment_idx);
      }
      first = false;
    }
    if (isSetPer_node_scan_ranges()) {
      if (!first) sb.append(", ");
      sb.append("per_node_scan_ranges:");
      if (this.per_node_scan_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.per_node_scan_ranges);
      }
      first = false;
    }
    if (isSetResult_set_metadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (isSetFinalize_params()) {
      if (!first) sb.append(", ");
      sb.append("finalize_params:");
      if (this.finalize_params == null) {
        sb.append("null");
      } else {
        sb.append(this.finalize_params);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("query_globals:");
    if (this.query_globals == null) {
      sb.append("null");
    } else {
      sb.append(this.query_globals);
    }
    first = false;
    if (isSetQuery_plan()) {
      if (!first) sb.append(", ");
      sb.append("query_plan:");
      if (this.query_plan == null) {
        sb.append("null");
      } else {
        sb.append(this.query_plan);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fragments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragments' was not present! Struct: " + toString());
    }
    if (query_globals == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_globals' was not present! Struct: " + toString());
    }
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (finalize_params != null) {
      finalize_params.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryExecRequestStandardSchemeFactory implements SchemeFactory {
    public TQueryExecRequestStandardScheme getScheme() {
      return new TQueryExecRequestStandardScheme();
    }
  }

  private static class TQueryExecRequestStandardScheme extends StandardScheme<TQueryExecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.fragments = new ArrayList<com.cloudera.impala.thrift.TPlanFragment>(_list120.size);
                for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                {
                  com.cloudera.impala.thrift.TPlanFragment _elem122; // required
                  _elem122 = new com.cloudera.impala.thrift.TPlanFragment();
                  _elem122.read(iprot);
                  struct.fragments.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setFragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEST_FRAGMENT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                struct.dest_fragment_idx = new ArrayList<Integer>(_list123.size);
                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                {
                  int _elem125; // required
                  _elem125 = iprot.readI32();
                  struct.dest_fragment_idx.add(_elem125);
                }
                iprot.readListEnd();
              }
              struct.setDest_fragment_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map126 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new HashMap<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>>(2*_map126.size);
                for (int _i127 = 0; _i127 < _map126.size; ++_i127)
                {
                  int _key128; // required
                  List<com.cloudera.impala.thrift.TScanRangeLocations> _val129; // required
                  _key128 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                    _val129 = new ArrayList<com.cloudera.impala.thrift.TScanRangeLocations>(_list130.size);
                    for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                    {
                      com.cloudera.impala.thrift.TScanRangeLocations _elem132; // required
                      _elem132 = new com.cloudera.impala.thrift.TScanRangeLocations();
                      _elem132.read(iprot);
                      _val129.add(_elem132);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key128, _val129);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResult_set_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINALIZE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.finalize_params = new TFinalizeParams();
              struct.finalize_params.read(iprot);
              struct.setFinalize_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new com.cloudera.impala.thrift.TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQuery_globalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_plan = iprot.readString();
              struct.setQuery_planIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = com.cloudera.impala.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fragments != null) {
        oprot.writeFieldBegin(FRAGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragments.size()));
          for (com.cloudera.impala.thrift.TPlanFragment _iter133 : struct.fragments)
          {
            _iter133.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dest_fragment_idx != null) {
        if (struct.isSetDest_fragment_idx()) {
          oprot.writeFieldBegin(DEST_FRAGMENT_IDX_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dest_fragment_idx.size()));
            for (int _iter134 : struct.dest_fragment_idx)
            {
              oprot.writeI32(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.per_node_scan_ranges != null) {
        if (struct.isSetPer_node_scan_ranges()) {
          oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
            for (Map.Entry<Integer, List<com.cloudera.impala.thrift.TScanRangeLocations>> _iter135 : struct.per_node_scan_ranges.entrySet())
            {
              oprot.writeI32(_iter135.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter135.getValue().size()));
                for (com.cloudera.impala.thrift.TScanRangeLocations _iter136 : _iter135.getValue())
                {
                  _iter136.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResult_set_metadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finalize_params != null) {
        if (struct.isSetFinalize_params()) {
          oprot.writeFieldBegin(FINALIZE_PARAMS_FIELD_DESC);
          struct.finalize_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_globals != null) {
        oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
        struct.query_globals.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_plan != null) {
        if (struct.isSetQuery_plan()) {
          oprot.writeFieldBegin(QUERY_PLAN_FIELD_DESC);
          oprot.writeString(struct.query_plan);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryExecRequestTupleSchemeFactory implements SchemeFactory {
    public TQueryExecRequestTupleScheme getScheme() {
      return new TQueryExecRequestTupleScheme();
    }
  }

  private static class TQueryExecRequestTupleScheme extends TupleScheme<TQueryExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.fragments.size());
        for (com.cloudera.impala.thrift.TPlanFragment _iter137 : struct.fragments)
        {
          _iter137.write(oprot);
        }
      }
      struct.query_globals.write(oprot);
      oprot.writeI32(struct.stmt_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetDesc_tbl()) {
        optionals.set(0);
      }
      if (struct.isSetDest_fragment_idx()) {
        optionals.set(1);
      }
      if (struct.isSetPer_node_scan_ranges()) {
        optionals.set(2);
      }
      if (struct.isSetResult_set_metadata()) {
        optionals.set(3);
      }
      if (struct.isSetFinalize_params()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_plan()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetDest_fragment_idx()) {
        {
          oprot.writeI32(struct.dest_fragment_idx.size());
          for (int _iter138 : struct.dest_fragment_idx)
          {
            oprot.writeI32(_iter138);
          }
        }
      }
      if (struct.isSetPer_node_scan_ranges()) {
        {
          oprot.writeI32(struct.per_node_scan_ranges.size());
          for (Map.Entry<Integer, List<com.cloudera.impala.thrift.TScanRangeLocations>> _iter139 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter139.getKey());
            {
              oprot.writeI32(_iter139.getValue().size());
              for (com.cloudera.impala.thrift.TScanRangeLocations _iter140 : _iter139.getValue())
              {
                _iter140.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetResult_set_metadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetFinalize_params()) {
        struct.finalize_params.write(oprot);
      }
      if (struct.isSetQuery_plan()) {
        oprot.writeString(struct.query_plan);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fragments = new ArrayList<com.cloudera.impala.thrift.TPlanFragment>(_list141.size);
        for (int _i142 = 0; _i142 < _list141.size; ++_i142)
        {
          com.cloudera.impala.thrift.TPlanFragment _elem143; // required
          _elem143 = new com.cloudera.impala.thrift.TPlanFragment();
          _elem143.read(iprot);
          struct.fragments.add(_elem143);
        }
      }
      struct.setFragmentsIsSet(true);
      struct.query_globals = new com.cloudera.impala.thrift.TQueryGlobals();
      struct.query_globals.read(iprot);
      struct.setQuery_globalsIsSet(true);
      struct.stmt_type = com.cloudera.impala.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmt_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list144 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dest_fragment_idx = new ArrayList<Integer>(_list144.size);
          for (int _i145 = 0; _i145 < _list144.size; ++_i145)
          {
            int _elem146; // required
            _elem146 = iprot.readI32();
            struct.dest_fragment_idx.add(_elem146);
          }
        }
        struct.setDest_fragment_idxIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map147 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.per_node_scan_ranges = new HashMap<Integer,List<com.cloudera.impala.thrift.TScanRangeLocations>>(2*_map147.size);
          for (int _i148 = 0; _i148 < _map147.size; ++_i148)
          {
            int _key149; // required
            List<com.cloudera.impala.thrift.TScanRangeLocations> _val150; // required
            _key149 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val150 = new ArrayList<com.cloudera.impala.thrift.TScanRangeLocations>(_list151.size);
              for (int _i152 = 0; _i152 < _list151.size; ++_i152)
              {
                com.cloudera.impala.thrift.TScanRangeLocations _elem153; // required
                _elem153 = new com.cloudera.impala.thrift.TScanRangeLocations();
                _elem153.read(iprot);
                _val150.add(_elem153);
              }
            }
            struct.per_node_scan_ranges.put(_key149, _val150);
          }
        }
        struct.setPer_node_scan_rangesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result_set_metadata = new TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResult_set_metadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.finalize_params = new TFinalizeParams();
        struct.finalize_params.read(iprot);
        struct.setFinalize_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_plan = iprot.readString();
        struct.setQuery_planIsSet(true);
      }
    }
  }

}

