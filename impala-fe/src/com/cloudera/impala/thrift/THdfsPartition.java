/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THdfsPartition implements org.apache.thrift.TBase<THdfsPartition, THdfsPartition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsPartition");

  private static final org.apache.thrift.protocol.TField LINE_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("lineDelim", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDelim", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTION_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionDelim", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_KEY_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("mapKeyDelim", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ESCAPE_CHAR_FIELD_DESC = new org.apache.thrift.protocol.TField("escapeChar", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileFormat", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionKeyExprs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compression", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsPartitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsPartitionTupleSchemeFactory());
  }

  public byte lineDelim; // required
  public byte fieldDelim; // required
  public byte collectionDelim; // required
  public byte mapKeyDelim; // required
  public byte escapeChar; // required
  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsFileFormat fileFormat; // required
  public List<com.cloudera.impala.thrift.TExpr> partitionKeyExprs; // required
  public int blockSize; // required
  /**
   * 
   * @see THdfsCompression
   */
  public THdfsCompression compression; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINE_DELIM((short)1, "lineDelim"),
    FIELD_DELIM((short)2, "fieldDelim"),
    COLLECTION_DELIM((short)3, "collectionDelim"),
    MAP_KEY_DELIM((short)4, "mapKeyDelim"),
    ESCAPE_CHAR((short)5, "escapeChar"),
    /**
     * 
     * @see THdfsFileFormat
     */
    FILE_FORMAT((short)6, "fileFormat"),
    PARTITION_KEY_EXPRS((short)7, "partitionKeyExprs"),
    BLOCK_SIZE((short)8, "blockSize"),
    /**
     * 
     * @see THdfsCompression
     */
    COMPRESSION((short)9, "compression");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE_DELIM
          return LINE_DELIM;
        case 2: // FIELD_DELIM
          return FIELD_DELIM;
        case 3: // COLLECTION_DELIM
          return COLLECTION_DELIM;
        case 4: // MAP_KEY_DELIM
          return MAP_KEY_DELIM;
        case 5: // ESCAPE_CHAR
          return ESCAPE_CHAR;
        case 6: // FILE_FORMAT
          return FILE_FORMAT;
        case 7: // PARTITION_KEY_EXPRS
          return PARTITION_KEY_EXPRS;
        case 8: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 9: // COMPRESSION
          return COMPRESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINEDELIM_ISSET_ID = 0;
  private static final int __FIELDDELIM_ISSET_ID = 1;
  private static final int __COLLECTIONDELIM_ISSET_ID = 2;
  private static final int __MAPKEYDELIM_ISSET_ID = 3;
  private static final int __ESCAPECHAR_ISSET_ID = 4;
  private static final int __BLOCKSIZE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE_DELIM, new org.apache.thrift.meta_data.FieldMetaData("lineDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FIELD_DELIM, new org.apache.thrift.meta_data.FieldMetaData("fieldDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COLLECTION_DELIM, new org.apache.thrift.meta_data.FieldMetaData("collectionDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAP_KEY_DELIM, new org.apache.thrift.meta_data.FieldMetaData("mapKeyDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESCAPE_CHAR, new org.apache.thrift.meta_data.FieldMetaData("escapeChar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("fileFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, THdfsFileFormat.class)));
    tmpMap.put(_Fields.PARTITION_KEY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partitionKeyExprs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, THdfsCompression.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsPartition.class, metaDataMap);
  }

  public THdfsPartition() {
  }

  public THdfsPartition(
    byte lineDelim,
    byte fieldDelim,
    byte collectionDelim,
    byte mapKeyDelim,
    byte escapeChar,
    THdfsFileFormat fileFormat,
    List<com.cloudera.impala.thrift.TExpr> partitionKeyExprs,
    int blockSize,
    THdfsCompression compression)
  {
    this();
    this.lineDelim = lineDelim;
    setLineDelimIsSet(true);
    this.fieldDelim = fieldDelim;
    setFieldDelimIsSet(true);
    this.collectionDelim = collectionDelim;
    setCollectionDelimIsSet(true);
    this.mapKeyDelim = mapKeyDelim;
    setMapKeyDelimIsSet(true);
    this.escapeChar = escapeChar;
    setEscapeCharIsSet(true);
    this.fileFormat = fileFormat;
    this.partitionKeyExprs = partitionKeyExprs;
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    this.compression = compression;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsPartition(THdfsPartition other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.lineDelim = other.lineDelim;
    this.fieldDelim = other.fieldDelim;
    this.collectionDelim = other.collectionDelim;
    this.mapKeyDelim = other.mapKeyDelim;
    this.escapeChar = other.escapeChar;
    if (other.isSetFileFormat()) {
      this.fileFormat = other.fileFormat;
    }
    if (other.isSetPartitionKeyExprs()) {
      List<com.cloudera.impala.thrift.TExpr> __this__partitionKeyExprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.partitionKeyExprs) {
        __this__partitionKeyExprs.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.partitionKeyExprs = __this__partitionKeyExprs;
    }
    this.blockSize = other.blockSize;
    if (other.isSetCompression()) {
      this.compression = other.compression;
    }
  }

  public THdfsPartition deepCopy() {
    return new THdfsPartition(this);
  }

  @Override
  public void clear() {
    setLineDelimIsSet(false);
    this.lineDelim = 0;
    setFieldDelimIsSet(false);
    this.fieldDelim = 0;
    setCollectionDelimIsSet(false);
    this.collectionDelim = 0;
    setMapKeyDelimIsSet(false);
    this.mapKeyDelim = 0;
    setEscapeCharIsSet(false);
    this.escapeChar = 0;
    this.fileFormat = null;
    this.partitionKeyExprs = null;
    setBlockSizeIsSet(false);
    this.blockSize = 0;
    this.compression = null;
  }

  public byte getLineDelim() {
    return this.lineDelim;
  }

  public THdfsPartition setLineDelim(byte lineDelim) {
    this.lineDelim = lineDelim;
    setLineDelimIsSet(true);
    return this;
  }

  public void unsetLineDelim() {
    __isset_bit_vector.clear(__LINEDELIM_ISSET_ID);
  }

  /** Returns true if field lineDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetLineDelim() {
    return __isset_bit_vector.get(__LINEDELIM_ISSET_ID);
  }

  public void setLineDelimIsSet(boolean value) {
    __isset_bit_vector.set(__LINEDELIM_ISSET_ID, value);
  }

  public byte getFieldDelim() {
    return this.fieldDelim;
  }

  public THdfsPartition setFieldDelim(byte fieldDelim) {
    this.fieldDelim = fieldDelim;
    setFieldDelimIsSet(true);
    return this;
  }

  public void unsetFieldDelim() {
    __isset_bit_vector.clear(__FIELDDELIM_ISSET_ID);
  }

  /** Returns true if field fieldDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldDelim() {
    return __isset_bit_vector.get(__FIELDDELIM_ISSET_ID);
  }

  public void setFieldDelimIsSet(boolean value) {
    __isset_bit_vector.set(__FIELDDELIM_ISSET_ID, value);
  }

  public byte getCollectionDelim() {
    return this.collectionDelim;
  }

  public THdfsPartition setCollectionDelim(byte collectionDelim) {
    this.collectionDelim = collectionDelim;
    setCollectionDelimIsSet(true);
    return this;
  }

  public void unsetCollectionDelim() {
    __isset_bit_vector.clear(__COLLECTIONDELIM_ISSET_ID);
  }

  /** Returns true if field collectionDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionDelim() {
    return __isset_bit_vector.get(__COLLECTIONDELIM_ISSET_ID);
  }

  public void setCollectionDelimIsSet(boolean value) {
    __isset_bit_vector.set(__COLLECTIONDELIM_ISSET_ID, value);
  }

  public byte getMapKeyDelim() {
    return this.mapKeyDelim;
  }

  public THdfsPartition setMapKeyDelim(byte mapKeyDelim) {
    this.mapKeyDelim = mapKeyDelim;
    setMapKeyDelimIsSet(true);
    return this;
  }

  public void unsetMapKeyDelim() {
    __isset_bit_vector.clear(__MAPKEYDELIM_ISSET_ID);
  }

  /** Returns true if field mapKeyDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetMapKeyDelim() {
    return __isset_bit_vector.get(__MAPKEYDELIM_ISSET_ID);
  }

  public void setMapKeyDelimIsSet(boolean value) {
    __isset_bit_vector.set(__MAPKEYDELIM_ISSET_ID, value);
  }

  public byte getEscapeChar() {
    return this.escapeChar;
  }

  public THdfsPartition setEscapeChar(byte escapeChar) {
    this.escapeChar = escapeChar;
    setEscapeCharIsSet(true);
    return this;
  }

  public void unsetEscapeChar() {
    __isset_bit_vector.clear(__ESCAPECHAR_ISSET_ID);
  }

  /** Returns true if field escapeChar is set (has been assigned a value) and false otherwise */
  public boolean isSetEscapeChar() {
    return __isset_bit_vector.get(__ESCAPECHAR_ISSET_ID);
  }

  public void setEscapeCharIsSet(boolean value) {
    __isset_bit_vector.set(__ESCAPECHAR_ISSET_ID, value);
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsFileFormat getFileFormat() {
    return this.fileFormat;
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsPartition setFileFormat(THdfsFileFormat fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  public void unsetFileFormat() {
    this.fileFormat = null;
  }

  /** Returns true if field fileFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetFileFormat() {
    return this.fileFormat != null;
  }

  public void setFileFormatIsSet(boolean value) {
    if (!value) {
      this.fileFormat = null;
    }
  }

  public int getPartitionKeyExprsSize() {
    return (this.partitionKeyExprs == null) ? 0 : this.partitionKeyExprs.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getPartitionKeyExprsIterator() {
    return (this.partitionKeyExprs == null) ? null : this.partitionKeyExprs.iterator();
  }

  public void addToPartitionKeyExprs(com.cloudera.impala.thrift.TExpr elem) {
    if (this.partitionKeyExprs == null) {
      this.partitionKeyExprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.partitionKeyExprs.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getPartitionKeyExprs() {
    return this.partitionKeyExprs;
  }

  public THdfsPartition setPartitionKeyExprs(List<com.cloudera.impala.thrift.TExpr> partitionKeyExprs) {
    this.partitionKeyExprs = partitionKeyExprs;
    return this;
  }

  public void unsetPartitionKeyExprs() {
    this.partitionKeyExprs = null;
  }

  /** Returns true if field partitionKeyExprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionKeyExprs() {
    return this.partitionKeyExprs != null;
  }

  public void setPartitionKeyExprsIsSet(boolean value) {
    if (!value) {
      this.partitionKeyExprs = null;
    }
  }

  public int getBlockSize() {
    return this.blockSize;
  }

  public THdfsPartition setBlockSize(int blockSize) {
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    return this;
  }

  public void unsetBlockSize() {
    __isset_bit_vector.clear(__BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSize() {
    return __isset_bit_vector.get(__BLOCKSIZE_ISSET_ID);
  }

  public void setBlockSizeIsSet(boolean value) {
    __isset_bit_vector.set(__BLOCKSIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see THdfsCompression
   */
  public THdfsCompression getCompression() {
    return this.compression;
  }

  /**
   * 
   * @see THdfsCompression
   */
  public THdfsPartition setCompression(THdfsCompression compression) {
    this.compression = compression;
    return this;
  }

  public void unsetCompression() {
    this.compression = null;
  }

  /** Returns true if field compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.compression = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINE_DELIM:
      if (value == null) {
        unsetLineDelim();
      } else {
        setLineDelim((Byte)value);
      }
      break;

    case FIELD_DELIM:
      if (value == null) {
        unsetFieldDelim();
      } else {
        setFieldDelim((Byte)value);
      }
      break;

    case COLLECTION_DELIM:
      if (value == null) {
        unsetCollectionDelim();
      } else {
        setCollectionDelim((Byte)value);
      }
      break;

    case MAP_KEY_DELIM:
      if (value == null) {
        unsetMapKeyDelim();
      } else {
        setMapKeyDelim((Byte)value);
      }
      break;

    case ESCAPE_CHAR:
      if (value == null) {
        unsetEscapeChar();
      } else {
        setEscapeChar((Byte)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFileFormat();
      } else {
        setFileFormat((THdfsFileFormat)value);
      }
      break;

    case PARTITION_KEY_EXPRS:
      if (value == null) {
        unsetPartitionKeyExprs();
      } else {
        setPartitionKeyExprs((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((Integer)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((THdfsCompression)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE_DELIM:
      return Byte.valueOf(getLineDelim());

    case FIELD_DELIM:
      return Byte.valueOf(getFieldDelim());

    case COLLECTION_DELIM:
      return Byte.valueOf(getCollectionDelim());

    case MAP_KEY_DELIM:
      return Byte.valueOf(getMapKeyDelim());

    case ESCAPE_CHAR:
      return Byte.valueOf(getEscapeChar());

    case FILE_FORMAT:
      return getFileFormat();

    case PARTITION_KEY_EXPRS:
      return getPartitionKeyExprs();

    case BLOCK_SIZE:
      return Integer.valueOf(getBlockSize());

    case COMPRESSION:
      return getCompression();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINE_DELIM:
      return isSetLineDelim();
    case FIELD_DELIM:
      return isSetFieldDelim();
    case COLLECTION_DELIM:
      return isSetCollectionDelim();
    case MAP_KEY_DELIM:
      return isSetMapKeyDelim();
    case ESCAPE_CHAR:
      return isSetEscapeChar();
    case FILE_FORMAT:
      return isSetFileFormat();
    case PARTITION_KEY_EXPRS:
      return isSetPartitionKeyExprs();
    case BLOCK_SIZE:
      return isSetBlockSize();
    case COMPRESSION:
      return isSetCompression();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsPartition)
      return this.equals((THdfsPartition)that);
    return false;
  }

  public boolean equals(THdfsPartition that) {
    if (that == null)
      return false;

    boolean this_present_lineDelim = true;
    boolean that_present_lineDelim = true;
    if (this_present_lineDelim || that_present_lineDelim) {
      if (!(this_present_lineDelim && that_present_lineDelim))
        return false;
      if (this.lineDelim != that.lineDelim)
        return false;
    }

    boolean this_present_fieldDelim = true;
    boolean that_present_fieldDelim = true;
    if (this_present_fieldDelim || that_present_fieldDelim) {
      if (!(this_present_fieldDelim && that_present_fieldDelim))
        return false;
      if (this.fieldDelim != that.fieldDelim)
        return false;
    }

    boolean this_present_collectionDelim = true;
    boolean that_present_collectionDelim = true;
    if (this_present_collectionDelim || that_present_collectionDelim) {
      if (!(this_present_collectionDelim && that_present_collectionDelim))
        return false;
      if (this.collectionDelim != that.collectionDelim)
        return false;
    }

    boolean this_present_mapKeyDelim = true;
    boolean that_present_mapKeyDelim = true;
    if (this_present_mapKeyDelim || that_present_mapKeyDelim) {
      if (!(this_present_mapKeyDelim && that_present_mapKeyDelim))
        return false;
      if (this.mapKeyDelim != that.mapKeyDelim)
        return false;
    }

    boolean this_present_escapeChar = true;
    boolean that_present_escapeChar = true;
    if (this_present_escapeChar || that_present_escapeChar) {
      if (!(this_present_escapeChar && that_present_escapeChar))
        return false;
      if (this.escapeChar != that.escapeChar)
        return false;
    }

    boolean this_present_fileFormat = true && this.isSetFileFormat();
    boolean that_present_fileFormat = true && that.isSetFileFormat();
    if (this_present_fileFormat || that_present_fileFormat) {
      if (!(this_present_fileFormat && that_present_fileFormat))
        return false;
      if (!this.fileFormat.equals(that.fileFormat))
        return false;
    }

    boolean this_present_partitionKeyExprs = true && this.isSetPartitionKeyExprs();
    boolean that_present_partitionKeyExprs = true && that.isSetPartitionKeyExprs();
    if (this_present_partitionKeyExprs || that_present_partitionKeyExprs) {
      if (!(this_present_partitionKeyExprs && that_present_partitionKeyExprs))
        return false;
      if (!this.partitionKeyExprs.equals(that.partitionKeyExprs))
        return false;
    }

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_compression = true && this.isSetCompression();
    boolean that_present_compression = true && that.isSetCompression();
    if (this_present_compression || that_present_compression) {
      if (!(this_present_compression && that_present_compression))
        return false;
      if (!this.compression.equals(that.compression))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THdfsPartition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THdfsPartition typedOther = (THdfsPartition)other;

    lastComparison = Boolean.valueOf(isSetLineDelim()).compareTo(typedOther.isSetLineDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineDelim, typedOther.lineDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldDelim()).compareTo(typedOther.isSetFieldDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDelim, typedOther.fieldDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionDelim()).compareTo(typedOther.isSetCollectionDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionDelim, typedOther.collectionDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapKeyDelim()).compareTo(typedOther.isSetMapKeyDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapKeyDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapKeyDelim, typedOther.mapKeyDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEscapeChar()).compareTo(typedOther.isSetEscapeChar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscapeChar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escapeChar, typedOther.escapeChar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileFormat()).compareTo(typedOther.isSetFileFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileFormat, typedOther.fileFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionKeyExprs()).compareTo(typedOther.isSetPartitionKeyExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionKeyExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionKeyExprs, typedOther.partitionKeyExprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSize()).compareTo(typedOther.isSetBlockSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, typedOther.blockSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(typedOther.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, typedOther.compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsPartition(");
    boolean first = true;

    sb.append("lineDelim:");
    sb.append(this.lineDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldDelim:");
    sb.append(this.fieldDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionDelim:");
    sb.append(this.collectionDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapKeyDelim:");
    sb.append(this.mapKeyDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("escapeChar:");
    sb.append(this.escapeChar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileFormat:");
    if (this.fileFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.fileFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionKeyExprs:");
    if (this.partitionKeyExprs == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionKeyExprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compression:");
    if (this.compression == null) {
      sb.append("null");
    } else {
      sb.append(this.compression);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'lineDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fieldDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collectionDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mapKeyDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'escapeChar' because it's a primitive and you chose the non-beans generator.
    if (fileFormat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileFormat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'blockSize' because it's a primitive and you chose the non-beans generator.
    if (compression == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compression' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPartitionStandardSchemeFactory implements SchemeFactory {
    public THdfsPartitionStandardScheme getScheme() {
      return new THdfsPartitionStandardScheme();
    }
  }

  private static class THdfsPartitionStandardScheme extends StandardScheme<THdfsPartition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsPartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINE_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lineDelim = iprot.readByte();
              struct.setLineDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fieldDelim = iprot.readByte();
              struct.setFieldDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTION_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.collectionDelim = iprot.readByte();
              struct.setCollectionDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAP_KEY_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mapKeyDelim = iprot.readByte();
              struct.setMapKeyDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ESCAPE_CHAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.escapeChar = iprot.readByte();
              struct.setEscapeCharIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileFormat = THdfsFileFormat.findByValue(iprot.readI32());
              struct.setFileFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_KEY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.partitionKeyExprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.cloudera.impala.thrift.TExpr _elem2; // required
                  _elem2 = new com.cloudera.impala.thrift.TExpr();
                  _elem2.read(iprot);
                  struct.partitionKeyExprs.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPartitionKeyExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blockSize = iprot.readI32();
              struct.setBlockSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression = THdfsCompression.findByValue(iprot.readI32());
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLineDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFieldDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fieldDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollectionDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMapKeyDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapKeyDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEscapeChar()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'escapeChar' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBlockSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockSize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsPartition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LINE_DELIM_FIELD_DESC);
      oprot.writeByte(struct.lineDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD_DELIM_FIELD_DESC);
      oprot.writeByte(struct.fieldDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECTION_DELIM_FIELD_DESC);
      oprot.writeByte(struct.collectionDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAP_KEY_DELIM_FIELD_DESC);
      oprot.writeByte(struct.mapKeyDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESCAPE_CHAR_FIELD_DESC);
      oprot.writeByte(struct.escapeChar);
      oprot.writeFieldEnd();
      if (struct.fileFormat != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.fileFormat.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.partitionKeyExprs != null) {
        oprot.writeFieldBegin(PARTITION_KEY_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitionKeyExprs.size()));
          for (com.cloudera.impala.thrift.TExpr _iter3 : struct.partitionKeyExprs)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.blockSize);
      oprot.writeFieldEnd();
      if (struct.compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        oprot.writeI32(struct.compression.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPartitionTupleSchemeFactory implements SchemeFactory {
    public THdfsPartitionTupleScheme getScheme() {
      return new THdfsPartitionTupleScheme();
    }
  }

  private static class THdfsPartitionTupleScheme extends TupleScheme<THdfsPartition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeByte(struct.lineDelim);
      oprot.writeByte(struct.fieldDelim);
      oprot.writeByte(struct.collectionDelim);
      oprot.writeByte(struct.mapKeyDelim);
      oprot.writeByte(struct.escapeChar);
      oprot.writeI32(struct.fileFormat.getValue());
      oprot.writeI32(struct.blockSize);
      oprot.writeI32(struct.compression.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPartitionKeyExprs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPartitionKeyExprs()) {
        {
          oprot.writeI32(struct.partitionKeyExprs.size());
          for (com.cloudera.impala.thrift.TExpr _iter4 : struct.partitionKeyExprs)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lineDelim = iprot.readByte();
      struct.setLineDelimIsSet(true);
      struct.fieldDelim = iprot.readByte();
      struct.setFieldDelimIsSet(true);
      struct.collectionDelim = iprot.readByte();
      struct.setCollectionDelimIsSet(true);
      struct.mapKeyDelim = iprot.readByte();
      struct.setMapKeyDelimIsSet(true);
      struct.escapeChar = iprot.readByte();
      struct.setEscapeCharIsSet(true);
      struct.fileFormat = THdfsFileFormat.findByValue(iprot.readI32());
      struct.setFileFormatIsSet(true);
      struct.blockSize = iprot.readI32();
      struct.setBlockSizeIsSet(true);
      struct.compression = THdfsCompression.findByValue(iprot.readI32());
      struct.setCompressionIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partitionKeyExprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            com.cloudera.impala.thrift.TExpr _elem7; // required
            _elem7 = new com.cloudera.impala.thrift.TExpr();
            _elem7.read(iprot);
            struct.partitionKeyExprs.add(_elem7);
          }
        }
        struct.setPartitionKeyExprsIsSet(true);
      }
    }
  }

}

