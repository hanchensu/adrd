/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TInsertExecStatus implements org.apache.thrift.TBase<TInsertExecStatus, TInsertExecStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TInsertExecStatus");

  private static final org.apache.thrift.protocol.TField NUM_APPENDED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_appended_rows", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FILES_TO_MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("files_to_move", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TInsertExecStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TInsertExecStatusTupleSchemeFactory());
  }

  public Map<String,Long> num_appended_rows; // optional
  public Map<String,String> files_to_move; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_APPENDED_ROWS((short)1, "num_appended_rows"),
    FILES_TO_MOVE((short)2, "files_to_move");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_APPENDED_ROWS
          return NUM_APPENDED_ROWS;
        case 2: // FILES_TO_MOVE
          return FILES_TO_MOVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NUM_APPENDED_ROWS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_APPENDED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_appended_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FILES_TO_MOVE, new org.apache.thrift.meta_data.FieldMetaData("files_to_move", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TInsertExecStatus.class, metaDataMap);
  }

  public TInsertExecStatus() {
  }

  public TInsertExecStatus(
    Map<String,String> files_to_move)
  {
    this();
    this.files_to_move = files_to_move;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TInsertExecStatus(TInsertExecStatus other) {
    if (other.isSetNum_appended_rows()) {
      Map<String,Long> __this__num_appended_rows = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.num_appended_rows.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__num_appended_rows_copy_key = other_element_key;

        Long __this__num_appended_rows_copy_value = other_element_value;

        __this__num_appended_rows.put(__this__num_appended_rows_copy_key, __this__num_appended_rows_copy_value);
      }
      this.num_appended_rows = __this__num_appended_rows;
    }
    if (other.isSetFiles_to_move()) {
      Map<String,String> __this__files_to_move = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.files_to_move.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__files_to_move_copy_key = other_element_key;

        String __this__files_to_move_copy_value = other_element_value;

        __this__files_to_move.put(__this__files_to_move_copy_key, __this__files_to_move_copy_value);
      }
      this.files_to_move = __this__files_to_move;
    }
  }

  public TInsertExecStatus deepCopy() {
    return new TInsertExecStatus(this);
  }

  @Override
  public void clear() {
    this.num_appended_rows = null;
    this.files_to_move = null;
  }

  public int getNum_appended_rowsSize() {
    return (this.num_appended_rows == null) ? 0 : this.num_appended_rows.size();
  }

  public void putToNum_appended_rows(String key, long val) {
    if (this.num_appended_rows == null) {
      this.num_appended_rows = new HashMap<String,Long>();
    }
    this.num_appended_rows.put(key, val);
  }

  public Map<String,Long> getNum_appended_rows() {
    return this.num_appended_rows;
  }

  public TInsertExecStatus setNum_appended_rows(Map<String,Long> num_appended_rows) {
    this.num_appended_rows = num_appended_rows;
    return this;
  }

  public void unsetNum_appended_rows() {
    this.num_appended_rows = null;
  }

  /** Returns true if field num_appended_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_appended_rows() {
    return this.num_appended_rows != null;
  }

  public void setNum_appended_rowsIsSet(boolean value) {
    if (!value) {
      this.num_appended_rows = null;
    }
  }

  public int getFiles_to_moveSize() {
    return (this.files_to_move == null) ? 0 : this.files_to_move.size();
  }

  public void putToFiles_to_move(String key, String val) {
    if (this.files_to_move == null) {
      this.files_to_move = new HashMap<String,String>();
    }
    this.files_to_move.put(key, val);
  }

  public Map<String,String> getFiles_to_move() {
    return this.files_to_move;
  }

  public TInsertExecStatus setFiles_to_move(Map<String,String> files_to_move) {
    this.files_to_move = files_to_move;
    return this;
  }

  public void unsetFiles_to_move() {
    this.files_to_move = null;
  }

  /** Returns true if field files_to_move is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles_to_move() {
    return this.files_to_move != null;
  }

  public void setFiles_to_moveIsSet(boolean value) {
    if (!value) {
      this.files_to_move = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_APPENDED_ROWS:
      if (value == null) {
        unsetNum_appended_rows();
      } else {
        setNum_appended_rows((Map<String,Long>)value);
      }
      break;

    case FILES_TO_MOVE:
      if (value == null) {
        unsetFiles_to_move();
      } else {
        setFiles_to_move((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_APPENDED_ROWS:
      return getNum_appended_rows();

    case FILES_TO_MOVE:
      return getFiles_to_move();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_APPENDED_ROWS:
      return isSetNum_appended_rows();
    case FILES_TO_MOVE:
      return isSetFiles_to_move();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TInsertExecStatus)
      return this.equals((TInsertExecStatus)that);
    return false;
  }

  public boolean equals(TInsertExecStatus that) {
    if (that == null)
      return false;

    boolean this_present_num_appended_rows = true && this.isSetNum_appended_rows();
    boolean that_present_num_appended_rows = true && that.isSetNum_appended_rows();
    if (this_present_num_appended_rows || that_present_num_appended_rows) {
      if (!(this_present_num_appended_rows && that_present_num_appended_rows))
        return false;
      if (!this.num_appended_rows.equals(that.num_appended_rows))
        return false;
    }

    boolean this_present_files_to_move = true && this.isSetFiles_to_move();
    boolean that_present_files_to_move = true && that.isSetFiles_to_move();
    if (this_present_files_to_move || that_present_files_to_move) {
      if (!(this_present_files_to_move && that_present_files_to_move))
        return false;
      if (!this.files_to_move.equals(that.files_to_move))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TInsertExecStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TInsertExecStatus typedOther = (TInsertExecStatus)other;

    lastComparison = Boolean.valueOf(isSetNum_appended_rows()).compareTo(typedOther.isSetNum_appended_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_appended_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_appended_rows, typedOther.num_appended_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiles_to_move()).compareTo(typedOther.isSetFiles_to_move());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles_to_move()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files_to_move, typedOther.files_to_move);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TInsertExecStatus(");
    boolean first = true;

    if (isSetNum_appended_rows()) {
      sb.append("num_appended_rows:");
      if (this.num_appended_rows == null) {
        sb.append("null");
      } else {
        sb.append(this.num_appended_rows);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("files_to_move:");
    if (this.files_to_move == null) {
      sb.append("null");
    } else {
      sb.append(this.files_to_move);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (files_to_move == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'files_to_move' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TInsertExecStatusStandardSchemeFactory implements SchemeFactory {
    public TInsertExecStatusStandardScheme getScheme() {
      return new TInsertExecStatusStandardScheme();
    }
  }

  private static class TInsertExecStatusStandardScheme extends StandardScheme<TInsertExecStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TInsertExecStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_APPENDED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.num_appended_rows = new HashMap<String,Long>(2*_map36.size);
                for (int _i37 = 0; _i37 < _map36.size; ++_i37)
                {
                  String _key38; // required
                  long _val39; // required
                  _key38 = iprot.readString();
                  _val39 = iprot.readI64();
                  struct.num_appended_rows.put(_key38, _val39);
                }
                iprot.readMapEnd();
              }
              struct.setNum_appended_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILES_TO_MOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.files_to_move = new HashMap<String,String>(2*_map40.size);
                for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                {
                  String _key42; // required
                  String _val43; // required
                  _key42 = iprot.readString();
                  _val43 = iprot.readString();
                  struct.files_to_move.put(_key42, _val43);
                }
                iprot.readMapEnd();
              }
              struct.setFiles_to_moveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TInsertExecStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.num_appended_rows != null) {
        if (struct.isSetNum_appended_rows()) {
          oprot.writeFieldBegin(NUM_APPENDED_ROWS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.num_appended_rows.size()));
            for (Map.Entry<String, Long> _iter44 : struct.num_appended_rows.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeI64(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.files_to_move != null) {
        oprot.writeFieldBegin(FILES_TO_MOVE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.files_to_move.size()));
          for (Map.Entry<String, String> _iter45 : struct.files_to_move.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeString(_iter45.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TInsertExecStatusTupleSchemeFactory implements SchemeFactory {
    public TInsertExecStatusTupleScheme getScheme() {
      return new TInsertExecStatusTupleScheme();
    }
  }

  private static class TInsertExecStatusTupleScheme extends TupleScheme<TInsertExecStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TInsertExecStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.files_to_move.size());
        for (Map.Entry<String, String> _iter46 : struct.files_to_move.entrySet())
        {
          oprot.writeString(_iter46.getKey());
          oprot.writeString(_iter46.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNum_appended_rows()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNum_appended_rows()) {
        {
          oprot.writeI32(struct.num_appended_rows.size());
          for (Map.Entry<String, Long> _iter47 : struct.num_appended_rows.entrySet())
          {
            oprot.writeString(_iter47.getKey());
            oprot.writeI64(_iter47.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TInsertExecStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map48 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.files_to_move = new HashMap<String,String>(2*_map48.size);
        for (int _i49 = 0; _i49 < _map48.size; ++_i49)
        {
          String _key50; // required
          String _val51; // required
          _key50 = iprot.readString();
          _val51 = iprot.readString();
          struct.files_to_move.put(_key50, _val51);
        }
      }
      struct.setFiles_to_moveIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map52 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.num_appended_rows = new HashMap<String,Long>(2*_map52.size);
          for (int _i53 = 0; _i53 < _map52.size; ++_i53)
          {
            String _key54; // required
            long _val55; // required
            _key54 = iprot.readString();
            _val55 = iprot.readI64();
            struct.num_appended_rows.put(_key54, _val55);
          }
        }
        struct.setNum_appended_rowsIsSet(true);
      }
    }
  }

}

