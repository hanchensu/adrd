/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TReportExecStatusParams implements org.apache.thrift.TBase<TReportExecStatusParams, TReportExecStatusParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportExecStatusParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("done", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField INSERT_EXEC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("insert_exec_status", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_log", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TReportExecStatusParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TReportExecStatusParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion protocol_version; // required
  public com.cloudera.impala.thrift.TUniqueId query_id; // optional
  public int backend_num; // optional
  public com.cloudera.impala.thrift.TUniqueId fragment_instance_id; // optional
  public com.cloudera.impala.thrift.TStatus status; // optional
  public boolean done; // optional
  public com.cloudera.impala.thrift.TRuntimeProfileTree profile; // optional
  public TInsertExecStatus insert_exec_status; // optional
  public List<String> error_log; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ImpalaInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    QUERY_ID((short)2, "query_id"),
    BACKEND_NUM((short)3, "backend_num"),
    FRAGMENT_INSTANCE_ID((short)4, "fragment_instance_id"),
    STATUS((short)5, "status"),
    DONE((short)6, "done"),
    PROFILE((short)7, "profile"),
    INSERT_EXEC_STATUS((short)8, "insert_exec_status"),
    ERROR_LOG((short)9, "error_log");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // BACKEND_NUM
          return BACKEND_NUM;
        case 4: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DONE
          return DONE;
        case 7: // PROFILE
          return PROFILE;
        case 8: // INSERT_EXEC_STATUS
          return INSERT_EXEC_STATUS;
        case 9: // ERROR_LOG
          return ERROR_LOG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __DONE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.QUERY_ID,_Fields.BACKEND_NUM,_Fields.FRAGMENT_INSTANCE_ID,_Fields.STATUS,_Fields.DONE,_Fields.PROFILE,_Fields.INSERT_EXEC_STATUS,_Fields.ERROR_LOG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ImpalaInternalServiceVersion.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.DONE, new org.apache.thrift.meta_data.FieldMetaData("done", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TRuntimeProfileTree.class)));
    tmpMap.put(_Fields.INSERT_EXEC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("insert_exec_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TInsertExecStatus.class)));
    tmpMap.put(_Fields.ERROR_LOG, new org.apache.thrift.meta_data.FieldMetaData("error_log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportExecStatusParams.class, metaDataMap);
  }

  public TReportExecStatusParams() {
  }

  public TReportExecStatusParams(
    ImpalaInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportExecStatusParams(TReportExecStatusParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetQuery_id()) {
      this.query_id = new com.cloudera.impala.thrift.TUniqueId(other.query_id);
    }
    this.backend_num = other.backend_num;
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetStatus()) {
      this.status = new com.cloudera.impala.thrift.TStatus(other.status);
    }
    this.done = other.done;
    if (other.isSetProfile()) {
      this.profile = new com.cloudera.impala.thrift.TRuntimeProfileTree(other.profile);
    }
    if (other.isSetInsert_exec_status()) {
      this.insert_exec_status = new TInsertExecStatus(other.insert_exec_status);
    }
    if (other.isSetError_log()) {
      List<String> __this__error_log = new ArrayList<String>();
      for (String other_element : other.error_log) {
        __this__error_log.add(other_element);
      }
      this.error_log = __this__error_log;
    }
  }

  public TReportExecStatusParams deepCopy() {
    return new TReportExecStatusParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.query_id = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.fragment_instance_id = null;
    this.status = null;
    setDoneIsSet(false);
    this.done = false;
    this.profile = null;
    this.insert_exec_status = null;
    this.error_log = null;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public TReportExecStatusParams setProtocol_version(ImpalaInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public com.cloudera.impala.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TReportExecStatusParams setQuery_id(com.cloudera.impala.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TReportExecStatusParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TReportExecStatusParams setFragment_instance_id(com.cloudera.impala.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public com.cloudera.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TReportExecStatusParams setStatus(com.cloudera.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isDone() {
    return this.done;
  }

  public TReportExecStatusParams setDone(boolean done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  /** Returns true if field done is set (has been assigned a value) and false otherwise */
  public boolean isSetDone() {
    return EncodingUtils.testBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONE_ISSET_ID, value);
  }

  public com.cloudera.impala.thrift.TRuntimeProfileTree getProfile() {
    return this.profile;
  }

  public TReportExecStatusParams setProfile(com.cloudera.impala.thrift.TRuntimeProfileTree profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public TInsertExecStatus getInsert_exec_status() {
    return this.insert_exec_status;
  }

  public TReportExecStatusParams setInsert_exec_status(TInsertExecStatus insert_exec_status) {
    this.insert_exec_status = insert_exec_status;
    return this;
  }

  public void unsetInsert_exec_status() {
    this.insert_exec_status = null;
  }

  /** Returns true if field insert_exec_status is set (has been assigned a value) and false otherwise */
  public boolean isSetInsert_exec_status() {
    return this.insert_exec_status != null;
  }

  public void setInsert_exec_statusIsSet(boolean value) {
    if (!value) {
      this.insert_exec_status = null;
    }
  }

  public int getError_logSize() {
    return (this.error_log == null) ? 0 : this.error_log.size();
  }

  public java.util.Iterator<String> getError_logIterator() {
    return (this.error_log == null) ? null : this.error_log.iterator();
  }

  public void addToError_log(String elem) {
    if (this.error_log == null) {
      this.error_log = new ArrayList<String>();
    }
    this.error_log.add(elem);
  }

  public List<String> getError_log() {
    return this.error_log;
  }

  public TReportExecStatusParams setError_log(List<String> error_log) {
    this.error_log = error_log;
    return this;
  }

  public void unsetError_log() {
    this.error_log = null;
  }

  /** Returns true if field error_log is set (has been assigned a value) and false otherwise */
  public boolean isSetError_log() {
    return this.error_log != null;
  }

  public void setError_logIsSet(boolean value) {
    if (!value) {
      this.error_log = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((ImpalaInternalServiceVersion)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((Integer)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((com.cloudera.impala.thrift.TUniqueId)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.cloudera.impala.thrift.TStatus)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Boolean)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((com.cloudera.impala.thrift.TRuntimeProfileTree)value);
      }
      break;

    case INSERT_EXEC_STATUS:
      if (value == null) {
        unsetInsert_exec_status();
      } else {
        setInsert_exec_status((TInsertExecStatus)value);
      }
      break;

    case ERROR_LOG:
      if (value == null) {
        unsetError_log();
      } else {
        setError_log((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case QUERY_ID:
      return getQuery_id();

    case BACKEND_NUM:
      return Integer.valueOf(getBackend_num());

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case STATUS:
      return getStatus();

    case DONE:
      return Boolean.valueOf(isDone());

    case PROFILE:
      return getProfile();

    case INSERT_EXEC_STATUS:
      return getInsert_exec_status();

    case ERROR_LOG:
      return getError_log();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case QUERY_ID:
      return isSetQuery_id();
    case BACKEND_NUM:
      return isSetBackend_num();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case STATUS:
      return isSetStatus();
    case DONE:
      return isSetDone();
    case PROFILE:
      return isSetProfile();
    case INSERT_EXEC_STATUS:
      return isSetInsert_exec_status();
    case ERROR_LOG:
      return isSetError_log();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TReportExecStatusParams)
      return this.equals((TReportExecStatusParams)that);
    return false;
  }

  public boolean equals(TReportExecStatusParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_done = true && this.isSetDone();
    boolean that_present_done = true && that.isSetDone();
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_insert_exec_status = true && this.isSetInsert_exec_status();
    boolean that_present_insert_exec_status = true && that.isSetInsert_exec_status();
    if (this_present_insert_exec_status || that_present_insert_exec_status) {
      if (!(this_present_insert_exec_status && that_present_insert_exec_status))
        return false;
      if (!this.insert_exec_status.equals(that.insert_exec_status))
        return false;
    }

    boolean this_present_error_log = true && this.isSetError_log();
    boolean that_present_error_log = true && that.isSetError_log();
    if (this_present_error_log || that_present_error_log) {
      if (!(this_present_error_log && that_present_error_log))
        return false;
      if (!this.error_log.equals(that.error_log))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TReportExecStatusParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TReportExecStatusParams typedOther = (TReportExecStatusParams)other;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(typedOther.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, typedOther.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(typedOther.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, typedOther.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend_num()).compareTo(typedOther.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, typedOther.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(typedOther.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, typedOther.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDone()).compareTo(typedOther.isSetDone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.done, typedOther.done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsert_exec_status()).compareTo(typedOther.isSetInsert_exec_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsert_exec_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insert_exec_status, typedOther.insert_exec_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_log()).compareTo(typedOther.isSetError_log());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_log()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_log, typedOther.error_log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TReportExecStatusParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetQuery_id()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetFragment_instance_id()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_id:");
      if (this.fragment_instance_id == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_id);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDone()) {
      if (!first) sb.append(", ");
      sb.append("done:");
      sb.append(this.done);
      first = false;
    }
    if (isSetProfile()) {
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
    }
    if (isSetInsert_exec_status()) {
      if (!first) sb.append(", ");
      sb.append("insert_exec_status:");
      if (this.insert_exec_status == null) {
        sb.append("null");
      } else {
        sb.append(this.insert_exec_status);
      }
      first = false;
    }
    if (isSetError_log()) {
      if (!first) sb.append(", ");
      sb.append("error_log:");
      if (this.error_log == null) {
        sb.append("null");
      } else {
        sb.append(this.error_log);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (status != null) {
      status.validate();
    }
    if (profile != null) {
      profile.validate();
    }
    if (insert_exec_status != null) {
      insert_exec_status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportExecStatusParamsStandardSchemeFactory implements SchemeFactory {
    public TReportExecStatusParamsStandardScheme getScheme() {
      return new TReportExecStatusParamsStandardScheme();
    }
  }

  private static class TReportExecStatusParamsStandardScheme extends StandardScheme<TReportExecStatusParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.cloudera.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.done = iprot.readBool();
              struct.setDoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new com.cloudera.impala.thrift.TRuntimeProfileTree();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSERT_EXEC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.insert_exec_status = new TInsertExecStatus();
              struct.insert_exec_status.read(iprot);
              struct.setInsert_exec_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.error_log = new ArrayList<String>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  String _elem58; // required
                  _elem58 = iprot.readString();
                  struct.error_log.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setError_logIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        if (struct.isSetQuery_id()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        if (struct.isSetFragment_instance_id()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
          struct.fragment_instance_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDone()) {
        oprot.writeFieldBegin(DONE_FIELD_DESC);
        oprot.writeBool(struct.done);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        if (struct.isSetProfile()) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.insert_exec_status != null) {
        if (struct.isSetInsert_exec_status()) {
          oprot.writeFieldBegin(INSERT_EXEC_STATUS_FIELD_DESC);
          struct.insert_exec_status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_log != null) {
        if (struct.isSetError_log()) {
          oprot.writeFieldBegin(ERROR_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_log.size()));
            for (String _iter59 : struct.error_log)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportExecStatusParamsTupleSchemeFactory implements SchemeFactory {
    public TReportExecStatusParamsTupleScheme getScheme() {
      return new TReportExecStatusParamsTupleScheme();
    }
  }

  private static class TReportExecStatusParamsTupleScheme extends TupleScheme<TReportExecStatusParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetQuery_id()) {
        optionals.set(0);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(1);
      }
      if (struct.isSetFragment_instance_id()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetDone()) {
        optionals.set(4);
      }
      if (struct.isSetProfile()) {
        optionals.set(5);
      }
      if (struct.isSetInsert_exec_status()) {
        optionals.set(6);
      }
      if (struct.isSetError_log()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetQuery_id()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetFragment_instance_id()) {
        struct.fragment_instance_id.write(oprot);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetDone()) {
        oprot.writeBool(struct.done);
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetInsert_exec_status()) {
        struct.insert_exec_status.write(oprot);
      }
      if (struct.isSetError_log()) {
        {
          oprot.writeI32(struct.error_log.size());
          for (String _iter60 : struct.error_log)
          {
            oprot.writeString(_iter60);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.query_id = new com.cloudera.impala.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQuery_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fragment_instance_id = new com.cloudera.impala.thrift.TUniqueId();
        struct.fragment_instance_id.read(iprot);
        struct.setFragment_instance_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = new com.cloudera.impala.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.done = iprot.readBool();
        struct.setDoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.profile = new com.cloudera.impala.thrift.TRuntimeProfileTree();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.insert_exec_status = new TInsertExecStatus();
        struct.insert_exec_status.read(iprot);
        struct.setInsert_exec_statusIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.error_log = new ArrayList<String>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            String _elem63; // required
            _elem63 = iprot.readString();
            struct.error_log.add(_elem63);
          }
        }
        struct.setError_logIsSet(true);
      }
    }
  }

}

