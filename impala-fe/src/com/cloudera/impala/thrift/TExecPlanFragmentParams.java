/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExecPlanFragmentParams implements org.apache.thrift.TBase<TExecPlanFragmentParams, TExecPlanFragmentParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecPlanFragmentParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COORD_FIELD_DESC = new org.apache.thrift.protocol.TField("coord", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecPlanFragmentParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecPlanFragmentParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion protocol_version; // required
  public com.cloudera.impala.thrift.TPlanFragment fragment; // optional
  public com.cloudera.impala.thrift.TDescriptorTable desc_tbl; // optional
  public TPlanFragmentExecParams params; // optional
  public com.cloudera.impala.thrift.TNetworkAddress coord; // optional
  public int backend_num; // optional
  public TQueryGlobals query_globals; // optional
  public TQueryOptions query_options; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ImpalaInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FRAGMENT((short)2, "fragment"),
    DESC_TBL((short)3, "desc_tbl"),
    PARAMS((short)4, "params"),
    COORD((short)5, "coord"),
    BACKEND_NUM((short)6, "backend_num"),
    QUERY_GLOBALS((short)7, "query_globals"),
    QUERY_OPTIONS((short)8, "query_options");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FRAGMENT
          return FRAGMENT;
        case 3: // DESC_TBL
          return DESC_TBL;
        case 4: // PARAMS
          return PARAMS;
        case 5: // COORD
          return COORD;
        case 6: // BACKEND_NUM
          return BACKEND_NUM;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 8: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FRAGMENT,_Fields.DESC_TBL,_Fields.PARAMS,_Fields.COORD,_Fields.BACKEND_NUM,_Fields.QUERY_GLOBALS,_Fields.QUERY_OPTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ImpalaInternalServiceVersion.class)));
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentExecParams.class)));
    tmpMap.put(_Fields.COORD, new org.apache.thrift.meta_data.FieldMetaData("coord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecPlanFragmentParams.class, metaDataMap);
  }

  public TExecPlanFragmentParams() {
  }

  public TExecPlanFragmentParams(
    ImpalaInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecPlanFragmentParams(TExecPlanFragmentParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetFragment()) {
      this.fragment = new com.cloudera.impala.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDesc_tbl()) {
      this.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetParams()) {
      this.params = new TPlanFragmentExecParams(other.params);
    }
    if (other.isSetCoord()) {
      this.coord = new com.cloudera.impala.thrift.TNetworkAddress(other.coord);
    }
    this.backend_num = other.backend_num;
    if (other.isSetQuery_globals()) {
      this.query_globals = new TQueryGlobals(other.query_globals);
    }
    if (other.isSetQuery_options()) {
      this.query_options = new TQueryOptions(other.query_options);
    }
  }

  public TExecPlanFragmentParams deepCopy() {
    return new TExecPlanFragmentParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.fragment = null;
    this.desc_tbl = null;
    this.params = null;
    this.coord = null;
    setBackend_numIsSet(false);
    this.backend_num = 0;
    this.query_globals = null;
    this.query_options = null;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public TExecPlanFragmentParams setProtocol_version(ImpalaInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public com.cloudera.impala.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TExecPlanFragmentParams setFragment(com.cloudera.impala.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  public com.cloudera.impala.thrift.TDescriptorTable getDesc_tbl() {
    return this.desc_tbl;
  }

  public TExecPlanFragmentParams setDesc_tbl(com.cloudera.impala.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDesc_tbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl() {
    return this.desc_tbl != null;
  }

  public void setDesc_tblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public TPlanFragmentExecParams getParams() {
    return this.params;
  }

  public TExecPlanFragmentParams setParams(TPlanFragmentExecParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public com.cloudera.impala.thrift.TNetworkAddress getCoord() {
    return this.coord;
  }

  public TExecPlanFragmentParams setCoord(com.cloudera.impala.thrift.TNetworkAddress coord) {
    this.coord = coord;
    return this;
  }

  public void unsetCoord() {
    this.coord = null;
  }

  /** Returns true if field coord is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord() {
    return this.coord != null;
  }

  public void setCoordIsSet(boolean value) {
    if (!value) {
      this.coord = null;
    }
  }

  public int getBackend_num() {
    return this.backend_num;
  }

  public TExecPlanFragmentParams setBackend_num(int backend_num) {
    this.backend_num = backend_num;
    setBackend_numIsSet(true);
    return this;
  }

  public void unsetBackend_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend_num() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackend_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  public TQueryGlobals getQuery_globals() {
    return this.query_globals;
  }

  public TExecPlanFragmentParams setQuery_globals(TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQuery_globals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_globals() {
    return this.query_globals != null;
  }

  public void setQuery_globalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  public TQueryOptions getQuery_options() {
    return this.query_options;
  }

  public TExecPlanFragmentParams setQuery_options(TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQuery_options() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_options() {
    return this.query_options != null;
  }

  public void setQuery_optionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((ImpalaInternalServiceVersion)value);
      }
      break;

    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((com.cloudera.impala.thrift.TPlanFragment)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDesc_tbl();
      } else {
        setDesc_tbl((com.cloudera.impala.thrift.TDescriptorTable)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TPlanFragmentExecParams)value);
      }
      break;

    case COORD:
      if (value == null) {
        unsetCoord();
      } else {
        setCoord((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackend_num();
      } else {
        setBackend_num((Integer)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQuery_globals();
      } else {
        setQuery_globals((TQueryGlobals)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQuery_options();
      } else {
        setQuery_options((TQueryOptions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case FRAGMENT:
      return getFragment();

    case DESC_TBL:
      return getDesc_tbl();

    case PARAMS:
      return getParams();

    case COORD:
      return getCoord();

    case BACKEND_NUM:
      return Integer.valueOf(getBackend_num());

    case QUERY_GLOBALS:
      return getQuery_globals();

    case QUERY_OPTIONS:
      return getQuery_options();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case FRAGMENT:
      return isSetFragment();
    case DESC_TBL:
      return isSetDesc_tbl();
    case PARAMS:
      return isSetParams();
    case COORD:
      return isSetCoord();
    case BACKEND_NUM:
      return isSetBackend_num();
    case QUERY_GLOBALS:
      return isSetQuery_globals();
    case QUERY_OPTIONS:
      return isSetQuery_options();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecPlanFragmentParams)
      return this.equals((TExecPlanFragmentParams)that);
    return false;
  }

  public boolean equals(TExecPlanFragmentParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDesc_tbl();
    boolean that_present_desc_tbl = true && that.isSetDesc_tbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_coord = true && this.isSetCoord();
    boolean that_present_coord = true && that.isSetCoord();
    if (this_present_coord || that_present_coord) {
      if (!(this_present_coord && that_present_coord))
        return false;
      if (!this.coord.equals(that.coord))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackend_num();
    boolean that_present_backend_num = true && that.isSetBackend_num();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQuery_globals();
    boolean that_present_query_globals = true && that.isSetQuery_globals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQuery_options();
    boolean that_present_query_options = true && that.isSetQuery_options();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TExecPlanFragmentParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExecPlanFragmentParams typedOther = (TExecPlanFragmentParams)other;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(typedOther.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, typedOther.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment()).compareTo(typedOther.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, typedOther.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc_tbl()).compareTo(typedOther.isSetDesc_tbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, typedOther.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoord()).compareTo(typedOther.isSetCoord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord, typedOther.coord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend_num()).compareTo(typedOther.isSetBackend_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, typedOther.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_globals()).compareTo(typedOther.isSetQuery_globals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_globals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, typedOther.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_options()).compareTo(typedOther.isSetQuery_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, typedOther.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecPlanFragmentParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFragment()) {
      if (!first) sb.append(", ");
      sb.append("fragment:");
      if (this.fragment == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment);
      }
      first = false;
    }
    if (isSetDesc_tbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetCoord()) {
      if (!first) sb.append(", ");
      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
    }
    if (isSetBackend_num()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetQuery_globals()) {
      if (!first) sb.append(", ");
      sb.append("query_globals:");
      if (this.query_globals == null) {
        sb.append("null");
      } else {
        sb.append(this.query_globals);
      }
      first = false;
    }
    if (isSetQuery_options()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (coord != null) {
      coord.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecPlanFragmentParamsStandardSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsStandardScheme getScheme() {
      return new TExecPlanFragmentParamsStandardScheme();
    }
  }

  private static class TExecPlanFragmentParamsStandardScheme extends StandardScheme<TExecPlanFragmentParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new com.cloudera.impala.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDesc_tblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TPlanFragmentExecParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.coord.read(iprot);
              struct.setCoordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackend_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQuery_globalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQuery_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fragment != null) {
        if (struct.isSetFragment()) {
          oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
          struct.fragment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDesc_tbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coord != null) {
        if (struct.isSetCoord()) {
          oprot.writeFieldBegin(COORD_FIELD_DESC);
          struct.coord.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackend_num()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.query_globals != null) {
        if (struct.isSetQuery_globals()) {
          oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
          struct.query_globals.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_options != null) {
        if (struct.isSetQuery_options()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecPlanFragmentParamsTupleSchemeFactory implements SchemeFactory {
    public TExecPlanFragmentParamsTupleScheme getScheme() {
      return new TExecPlanFragmentParamsTupleScheme();
    }
  }

  private static class TExecPlanFragmentParamsTupleScheme extends TupleScheme<TExecPlanFragmentParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFragment()) {
        optionals.set(0);
      }
      if (struct.isSetDesc_tbl()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetCoord()) {
        optionals.set(3);
      }
      if (struct.isSetBackend_num()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_globals()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_options()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetFragment()) {
        struct.fragment.write(oprot);
      }
      if (struct.isSetDesc_tbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetCoord()) {
        struct.coord.write(oprot);
      }
      if (struct.isSetBackend_num()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetQuery_globals()) {
        struct.query_globals.write(oprot);
      }
      if (struct.isSetQuery_options()) {
        struct.query_options.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = ImpalaInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.fragment = new com.cloudera.impala.thrift.TPlanFragment();
        struct.fragment.read(iprot);
        struct.setFragmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc_tbl = new com.cloudera.impala.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDesc_tblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new TPlanFragmentExecParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coord = new com.cloudera.impala.thrift.TNetworkAddress();
        struct.coord.read(iprot);
        struct.setCoordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.backend_num = iprot.readI32();
        struct.setBackend_numIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_globals = new TQueryGlobals();
        struct.query_globals.read(iprot);
        struct.setQuery_globalsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_options = new TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQuery_optionsIsSet(true);
      }
    }
  }

}

