/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THdfsTableSink implements org.apache.thrift.TBase<THdfsTableSink, THdfsTableSink._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsTableSink");

  private static final org.apache.thrift.protocol.TField PARTITION_KEY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_key_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsTableSinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsTableSinkTupleSchemeFactory());
  }

  public List<com.cloudera.impala.thrift.TExpr> partition_key_exprs; // required
  public boolean overwrite; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_KEY_EXPRS((short)1, "partition_key_exprs"),
    OVERWRITE((short)2, "overwrite");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_KEY_EXPRS
          return PARTITION_KEY_EXPRS;
        case 2: // OVERWRITE
          return OVERWRITE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OVERWRITE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_KEY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_key_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsTableSink.class, metaDataMap);
  }

  public THdfsTableSink() {
  }

  public THdfsTableSink(
    List<com.cloudera.impala.thrift.TExpr> partition_key_exprs,
    boolean overwrite)
  {
    this();
    this.partition_key_exprs = partition_key_exprs;
    this.overwrite = overwrite;
    setOverwriteIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsTableSink(THdfsTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_key_exprs()) {
      List<com.cloudera.impala.thrift.TExpr> __this__partition_key_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
      for (com.cloudera.impala.thrift.TExpr other_element : other.partition_key_exprs) {
        __this__partition_key_exprs.add(new com.cloudera.impala.thrift.TExpr(other_element));
      }
      this.partition_key_exprs = __this__partition_key_exprs;
    }
    this.overwrite = other.overwrite;
  }

  public THdfsTableSink deepCopy() {
    return new THdfsTableSink(this);
  }

  @Override
  public void clear() {
    this.partition_key_exprs = null;
    setOverwriteIsSet(false);
    this.overwrite = false;
  }

  public int getPartition_key_exprsSize() {
    return (this.partition_key_exprs == null) ? 0 : this.partition_key_exprs.size();
  }

  public java.util.Iterator<com.cloudera.impala.thrift.TExpr> getPartition_key_exprsIterator() {
    return (this.partition_key_exprs == null) ? null : this.partition_key_exprs.iterator();
  }

  public void addToPartition_key_exprs(com.cloudera.impala.thrift.TExpr elem) {
    if (this.partition_key_exprs == null) {
      this.partition_key_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>();
    }
    this.partition_key_exprs.add(elem);
  }

  public List<com.cloudera.impala.thrift.TExpr> getPartition_key_exprs() {
    return this.partition_key_exprs;
  }

  public THdfsTableSink setPartition_key_exprs(List<com.cloudera.impala.thrift.TExpr> partition_key_exprs) {
    this.partition_key_exprs = partition_key_exprs;
    return this;
  }

  public void unsetPartition_key_exprs() {
    this.partition_key_exprs = null;
  }

  /** Returns true if field partition_key_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_key_exprs() {
    return this.partition_key_exprs != null;
  }

  public void setPartition_key_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_key_exprs = null;
    }
  }

  public boolean isOverwrite() {
    return this.overwrite;
  }

  public THdfsTableSink setOverwrite(boolean overwrite) {
    this.overwrite = overwrite;
    setOverwriteIsSet(true);
    return this;
  }

  public void unsetOverwrite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
  }

  /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
  public boolean isSetOverwrite() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
  }

  public void setOverwriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_KEY_EXPRS:
      if (value == null) {
        unsetPartition_key_exprs();
      } else {
        setPartition_key_exprs((List<com.cloudera.impala.thrift.TExpr>)value);
      }
      break;

    case OVERWRITE:
      if (value == null) {
        unsetOverwrite();
      } else {
        setOverwrite((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_KEY_EXPRS:
      return getPartition_key_exprs();

    case OVERWRITE:
      return Boolean.valueOf(isOverwrite());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_KEY_EXPRS:
      return isSetPartition_key_exprs();
    case OVERWRITE:
      return isSetOverwrite();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsTableSink)
      return this.equals((THdfsTableSink)that);
    return false;
  }

  public boolean equals(THdfsTableSink that) {
    if (that == null)
      return false;

    boolean this_present_partition_key_exprs = true && this.isSetPartition_key_exprs();
    boolean that_present_partition_key_exprs = true && that.isSetPartition_key_exprs();
    if (this_present_partition_key_exprs || that_present_partition_key_exprs) {
      if (!(this_present_partition_key_exprs && that_present_partition_key_exprs))
        return false;
      if (!this.partition_key_exprs.equals(that.partition_key_exprs))
        return false;
    }

    boolean this_present_overwrite = true;
    boolean that_present_overwrite = true;
    if (this_present_overwrite || that_present_overwrite) {
      if (!(this_present_overwrite && that_present_overwrite))
        return false;
      if (this.overwrite != that.overwrite)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THdfsTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THdfsTableSink typedOther = (THdfsTableSink)other;

    lastComparison = Boolean.valueOf(isSetPartition_key_exprs()).compareTo(typedOther.isSetPartition_key_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_key_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_key_exprs, typedOther.partition_key_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverwrite()).compareTo(typedOther.isSetOverwrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverwrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, typedOther.overwrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsTableSink(");
    boolean first = true;

    sb.append("partition_key_exprs:");
    if (this.partition_key_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_key_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overwrite:");
    sb.append(this.overwrite);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_key_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_key_exprs' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'overwrite' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsTableSinkStandardSchemeFactory implements SchemeFactory {
    public THdfsTableSinkStandardScheme getScheme() {
      return new THdfsTableSinkStandardScheme();
    }
  }

  private static class THdfsTableSinkStandardScheme extends StandardScheme<THdfsTableSink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_KEY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.partition_key_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.cloudera.impala.thrift.TExpr _elem2; // required
                  _elem2 = new com.cloudera.impala.thrift.TExpr();
                  _elem2.read(iprot);
                  struct.partition_key_exprs.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPartition_key_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OVERWRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.overwrite = iprot.readBool();
              struct.setOverwriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOverwrite()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'overwrite' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_key_exprs != null) {
        oprot.writeFieldBegin(PARTITION_KEY_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_key_exprs.size()));
          for (com.cloudera.impala.thrift.TExpr _iter3 : struct.partition_key_exprs)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
      oprot.writeBool(struct.overwrite);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsTableSinkTupleSchemeFactory implements SchemeFactory {
    public THdfsTableSinkTupleScheme getScheme() {
      return new THdfsTableSinkTupleScheme();
    }
  }

  private static class THdfsTableSinkTupleScheme extends TupleScheme<THdfsTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_key_exprs.size());
        for (com.cloudera.impala.thrift.TExpr _iter4 : struct.partition_key_exprs)
        {
          _iter4.write(oprot);
        }
      }
      oprot.writeBool(struct.overwrite);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partition_key_exprs = new ArrayList<com.cloudera.impala.thrift.TExpr>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          com.cloudera.impala.thrift.TExpr _elem7; // required
          _elem7 = new com.cloudera.impala.thrift.TExpr();
          _elem7.read(iprot);
          struct.partition_key_exprs.add(_elem7);
        }
      }
      struct.setPartition_key_exprsIsSet(true);
      struct.overwrite = iprot.readBool();
      struct.setOverwriteIsSet(true);
    }
  }

}

