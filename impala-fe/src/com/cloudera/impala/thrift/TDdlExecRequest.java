/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDdlExecRequest implements org.apache.thrift.TBase<TDdlExecRequest, TDdlExecRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDdlExecRequest");

  private static final org.apache.thrift.protocol.TField DDL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("use_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIBE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("describe_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SHOW_DBS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_dbs_params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_TABLES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_tables_params", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ALTER_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ALTER_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TABLE_LIKE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_table_like_params", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DROP_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DROP_TABLE_OR_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_table_or_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField RESET_METADATA_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("reset_metadata_params", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDdlExecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDdlExecRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TDdlType
   */
  public TDdlType ddl_type; // required
  public TUseDbParams use_db_params; // optional
  public TDescribeTableParams describe_table_params; // optional
  public TShowDbsParams show_dbs_params; // optional
  public TShowTablesParams show_tables_params; // optional
  public TAlterTableParams alter_table_params; // optional
  public TCreateOrAlterViewParams alter_view_params; // optional
  public TCreateDbParams create_db_params; // optional
  public TCreateTableParams create_table_params; // optional
  public TCreateTableLikeParams create_table_like_params; // optional
  public TCreateOrAlterViewParams create_view_params; // optional
  public TDropDbParams drop_db_params; // optional
  public TDropTableOrViewParams drop_table_or_view_params; // optional
  public TResetMetadataParams reset_metadata_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDdlType
     */
    DDL_TYPE((short)1, "ddl_type"),
    USE_DB_PARAMS((short)2, "use_db_params"),
    DESCRIBE_TABLE_PARAMS((short)3, "describe_table_params"),
    SHOW_DBS_PARAMS((short)4, "show_dbs_params"),
    SHOW_TABLES_PARAMS((short)5, "show_tables_params"),
    ALTER_TABLE_PARAMS((short)6, "alter_table_params"),
    ALTER_VIEW_PARAMS((short)14, "alter_view_params"),
    CREATE_DB_PARAMS((short)7, "create_db_params"),
    CREATE_TABLE_PARAMS((short)8, "create_table_params"),
    CREATE_TABLE_LIKE_PARAMS((short)9, "create_table_like_params"),
    CREATE_VIEW_PARAMS((short)13, "create_view_params"),
    DROP_DB_PARAMS((short)10, "drop_db_params"),
    DROP_TABLE_OR_VIEW_PARAMS((short)11, "drop_table_or_view_params"),
    RESET_METADATA_PARAMS((short)12, "reset_metadata_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DDL_TYPE
          return DDL_TYPE;
        case 2: // USE_DB_PARAMS
          return USE_DB_PARAMS;
        case 3: // DESCRIBE_TABLE_PARAMS
          return DESCRIBE_TABLE_PARAMS;
        case 4: // SHOW_DBS_PARAMS
          return SHOW_DBS_PARAMS;
        case 5: // SHOW_TABLES_PARAMS
          return SHOW_TABLES_PARAMS;
        case 6: // ALTER_TABLE_PARAMS
          return ALTER_TABLE_PARAMS;
        case 14: // ALTER_VIEW_PARAMS
          return ALTER_VIEW_PARAMS;
        case 7: // CREATE_DB_PARAMS
          return CREATE_DB_PARAMS;
        case 8: // CREATE_TABLE_PARAMS
          return CREATE_TABLE_PARAMS;
        case 9: // CREATE_TABLE_LIKE_PARAMS
          return CREATE_TABLE_LIKE_PARAMS;
        case 13: // CREATE_VIEW_PARAMS
          return CREATE_VIEW_PARAMS;
        case 10: // DROP_DB_PARAMS
          return DROP_DB_PARAMS;
        case 11: // DROP_TABLE_OR_VIEW_PARAMS
          return DROP_TABLE_OR_VIEW_PARAMS;
        case 12: // RESET_METADATA_PARAMS
          return RESET_METADATA_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.USE_DB_PARAMS,_Fields.DESCRIBE_TABLE_PARAMS,_Fields.SHOW_DBS_PARAMS,_Fields.SHOW_TABLES_PARAMS,_Fields.ALTER_TABLE_PARAMS,_Fields.ALTER_VIEW_PARAMS,_Fields.CREATE_DB_PARAMS,_Fields.CREATE_TABLE_PARAMS,_Fields.CREATE_TABLE_LIKE_PARAMS,_Fields.CREATE_VIEW_PARAMS,_Fields.DROP_DB_PARAMS,_Fields.DROP_TABLE_OR_VIEW_PARAMS,_Fields.RESET_METADATA_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DDL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ddl_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDdlType.class)));
    tmpMap.put(_Fields.USE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("use_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUseDbParams.class)));
    tmpMap.put(_Fields.DESCRIBE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("describe_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDescribeTableParams.class)));
    tmpMap.put(_Fields.SHOW_DBS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_dbs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowDbsParams.class)));
    tmpMap.put(_Fields.SHOW_TABLES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_tables_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowTablesParams.class)));
    tmpMap.put(_Fields.ALTER_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("alter_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableParams.class)));
    tmpMap.put(_Fields.ALTER_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("alter_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateOrAlterViewParams.class)));
    tmpMap.put(_Fields.CREATE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateDbParams.class)));
    tmpMap.put(_Fields.CREATE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateTableParams.class)));
    tmpMap.put(_Fields.CREATE_TABLE_LIKE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_table_like_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateTableLikeParams.class)));
    tmpMap.put(_Fields.CREATE_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateOrAlterViewParams.class)));
    tmpMap.put(_Fields.DROP_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDropDbParams.class)));
    tmpMap.put(_Fields.DROP_TABLE_OR_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_table_or_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDropTableOrViewParams.class)));
    tmpMap.put(_Fields.RESET_METADATA_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("reset_metadata_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResetMetadataParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDdlExecRequest.class, metaDataMap);
  }

  public TDdlExecRequest() {
  }

  public TDdlExecRequest(
    TDdlType ddl_type)
  {
    this();
    this.ddl_type = ddl_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDdlExecRequest(TDdlExecRequest other) {
    if (other.isSetDdl_type()) {
      this.ddl_type = other.ddl_type;
    }
    if (other.isSetUse_db_params()) {
      this.use_db_params = new TUseDbParams(other.use_db_params);
    }
    if (other.isSetDescribe_table_params()) {
      this.describe_table_params = new TDescribeTableParams(other.describe_table_params);
    }
    if (other.isSetShow_dbs_params()) {
      this.show_dbs_params = new TShowDbsParams(other.show_dbs_params);
    }
    if (other.isSetShow_tables_params()) {
      this.show_tables_params = new TShowTablesParams(other.show_tables_params);
    }
    if (other.isSetAlter_table_params()) {
      this.alter_table_params = new TAlterTableParams(other.alter_table_params);
    }
    if (other.isSetAlter_view_params()) {
      this.alter_view_params = new TCreateOrAlterViewParams(other.alter_view_params);
    }
    if (other.isSetCreate_db_params()) {
      this.create_db_params = new TCreateDbParams(other.create_db_params);
    }
    if (other.isSetCreate_table_params()) {
      this.create_table_params = new TCreateTableParams(other.create_table_params);
    }
    if (other.isSetCreate_table_like_params()) {
      this.create_table_like_params = new TCreateTableLikeParams(other.create_table_like_params);
    }
    if (other.isSetCreate_view_params()) {
      this.create_view_params = new TCreateOrAlterViewParams(other.create_view_params);
    }
    if (other.isSetDrop_db_params()) {
      this.drop_db_params = new TDropDbParams(other.drop_db_params);
    }
    if (other.isSetDrop_table_or_view_params()) {
      this.drop_table_or_view_params = new TDropTableOrViewParams(other.drop_table_or_view_params);
    }
    if (other.isSetReset_metadata_params()) {
      this.reset_metadata_params = new TResetMetadataParams(other.reset_metadata_params);
    }
  }

  public TDdlExecRequest deepCopy() {
    return new TDdlExecRequest(this);
  }

  @Override
  public void clear() {
    this.ddl_type = null;
    this.use_db_params = null;
    this.describe_table_params = null;
    this.show_dbs_params = null;
    this.show_tables_params = null;
    this.alter_table_params = null;
    this.alter_view_params = null;
    this.create_db_params = null;
    this.create_table_params = null;
    this.create_table_like_params = null;
    this.create_view_params = null;
    this.drop_db_params = null;
    this.drop_table_or_view_params = null;
    this.reset_metadata_params = null;
  }

  /**
   * 
   * @see TDdlType
   */
  public TDdlType getDdl_type() {
    return this.ddl_type;
  }

  /**
   * 
   * @see TDdlType
   */
  public TDdlExecRequest setDdl_type(TDdlType ddl_type) {
    this.ddl_type = ddl_type;
    return this;
  }

  public void unsetDdl_type() {
    this.ddl_type = null;
  }

  /** Returns true if field ddl_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_type() {
    return this.ddl_type != null;
  }

  public void setDdl_typeIsSet(boolean value) {
    if (!value) {
      this.ddl_type = null;
    }
  }

  public TUseDbParams getUse_db_params() {
    return this.use_db_params;
  }

  public TDdlExecRequest setUse_db_params(TUseDbParams use_db_params) {
    this.use_db_params = use_db_params;
    return this;
  }

  public void unsetUse_db_params() {
    this.use_db_params = null;
  }

  /** Returns true if field use_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_db_params() {
    return this.use_db_params != null;
  }

  public void setUse_db_paramsIsSet(boolean value) {
    if (!value) {
      this.use_db_params = null;
    }
  }

  public TDescribeTableParams getDescribe_table_params() {
    return this.describe_table_params;
  }

  public TDdlExecRequest setDescribe_table_params(TDescribeTableParams describe_table_params) {
    this.describe_table_params = describe_table_params;
    return this;
  }

  public void unsetDescribe_table_params() {
    this.describe_table_params = null;
  }

  /** Returns true if field describe_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDescribe_table_params() {
    return this.describe_table_params != null;
  }

  public void setDescribe_table_paramsIsSet(boolean value) {
    if (!value) {
      this.describe_table_params = null;
    }
  }

  public TShowDbsParams getShow_dbs_params() {
    return this.show_dbs_params;
  }

  public TDdlExecRequest setShow_dbs_params(TShowDbsParams show_dbs_params) {
    this.show_dbs_params = show_dbs_params;
    return this;
  }

  public void unsetShow_dbs_params() {
    this.show_dbs_params = null;
  }

  /** Returns true if field show_dbs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_dbs_params() {
    return this.show_dbs_params != null;
  }

  public void setShow_dbs_paramsIsSet(boolean value) {
    if (!value) {
      this.show_dbs_params = null;
    }
  }

  public TShowTablesParams getShow_tables_params() {
    return this.show_tables_params;
  }

  public TDdlExecRequest setShow_tables_params(TShowTablesParams show_tables_params) {
    this.show_tables_params = show_tables_params;
    return this;
  }

  public void unsetShow_tables_params() {
    this.show_tables_params = null;
  }

  /** Returns true if field show_tables_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_tables_params() {
    return this.show_tables_params != null;
  }

  public void setShow_tables_paramsIsSet(boolean value) {
    if (!value) {
      this.show_tables_params = null;
    }
  }

  public TAlterTableParams getAlter_table_params() {
    return this.alter_table_params;
  }

  public TDdlExecRequest setAlter_table_params(TAlterTableParams alter_table_params) {
    this.alter_table_params = alter_table_params;
    return this;
  }

  public void unsetAlter_table_params() {
    this.alter_table_params = null;
  }

  /** Returns true if field alter_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_table_params() {
    return this.alter_table_params != null;
  }

  public void setAlter_table_paramsIsSet(boolean value) {
    if (!value) {
      this.alter_table_params = null;
    }
  }

  public TCreateOrAlterViewParams getAlter_view_params() {
    return this.alter_view_params;
  }

  public TDdlExecRequest setAlter_view_params(TCreateOrAlterViewParams alter_view_params) {
    this.alter_view_params = alter_view_params;
    return this;
  }

  public void unsetAlter_view_params() {
    this.alter_view_params = null;
  }

  /** Returns true if field alter_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_view_params() {
    return this.alter_view_params != null;
  }

  public void setAlter_view_paramsIsSet(boolean value) {
    if (!value) {
      this.alter_view_params = null;
    }
  }

  public TCreateDbParams getCreate_db_params() {
    return this.create_db_params;
  }

  public TDdlExecRequest setCreate_db_params(TCreateDbParams create_db_params) {
    this.create_db_params = create_db_params;
    return this;
  }

  public void unsetCreate_db_params() {
    this.create_db_params = null;
  }

  /** Returns true if field create_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_db_params() {
    return this.create_db_params != null;
  }

  public void setCreate_db_paramsIsSet(boolean value) {
    if (!value) {
      this.create_db_params = null;
    }
  }

  public TCreateTableParams getCreate_table_params() {
    return this.create_table_params;
  }

  public TDdlExecRequest setCreate_table_params(TCreateTableParams create_table_params) {
    this.create_table_params = create_table_params;
    return this;
  }

  public void unsetCreate_table_params() {
    this.create_table_params = null;
  }

  /** Returns true if field create_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_table_params() {
    return this.create_table_params != null;
  }

  public void setCreate_table_paramsIsSet(boolean value) {
    if (!value) {
      this.create_table_params = null;
    }
  }

  public TCreateTableLikeParams getCreate_table_like_params() {
    return this.create_table_like_params;
  }

  public TDdlExecRequest setCreate_table_like_params(TCreateTableLikeParams create_table_like_params) {
    this.create_table_like_params = create_table_like_params;
    return this;
  }

  public void unsetCreate_table_like_params() {
    this.create_table_like_params = null;
  }

  /** Returns true if field create_table_like_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_table_like_params() {
    return this.create_table_like_params != null;
  }

  public void setCreate_table_like_paramsIsSet(boolean value) {
    if (!value) {
      this.create_table_like_params = null;
    }
  }

  public TCreateOrAlterViewParams getCreate_view_params() {
    return this.create_view_params;
  }

  public TDdlExecRequest setCreate_view_params(TCreateOrAlterViewParams create_view_params) {
    this.create_view_params = create_view_params;
    return this;
  }

  public void unsetCreate_view_params() {
    this.create_view_params = null;
  }

  /** Returns true if field create_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_view_params() {
    return this.create_view_params != null;
  }

  public void setCreate_view_paramsIsSet(boolean value) {
    if (!value) {
      this.create_view_params = null;
    }
  }

  public TDropDbParams getDrop_db_params() {
    return this.drop_db_params;
  }

  public TDdlExecRequest setDrop_db_params(TDropDbParams drop_db_params) {
    this.drop_db_params = drop_db_params;
    return this;
  }

  public void unsetDrop_db_params() {
    this.drop_db_params = null;
  }

  /** Returns true if field drop_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_db_params() {
    return this.drop_db_params != null;
  }

  public void setDrop_db_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_db_params = null;
    }
  }

  public TDropTableOrViewParams getDrop_table_or_view_params() {
    return this.drop_table_or_view_params;
  }

  public TDdlExecRequest setDrop_table_or_view_params(TDropTableOrViewParams drop_table_or_view_params) {
    this.drop_table_or_view_params = drop_table_or_view_params;
    return this;
  }

  public void unsetDrop_table_or_view_params() {
    this.drop_table_or_view_params = null;
  }

  /** Returns true if field drop_table_or_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_table_or_view_params() {
    return this.drop_table_or_view_params != null;
  }

  public void setDrop_table_or_view_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_table_or_view_params = null;
    }
  }

  public TResetMetadataParams getReset_metadata_params() {
    return this.reset_metadata_params;
  }

  public TDdlExecRequest setReset_metadata_params(TResetMetadataParams reset_metadata_params) {
    this.reset_metadata_params = reset_metadata_params;
    return this;
  }

  public void unsetReset_metadata_params() {
    this.reset_metadata_params = null;
  }

  /** Returns true if field reset_metadata_params is set (has been assigned a value) and false otherwise */
  public boolean isSetReset_metadata_params() {
    return this.reset_metadata_params != null;
  }

  public void setReset_metadata_paramsIsSet(boolean value) {
    if (!value) {
      this.reset_metadata_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DDL_TYPE:
      if (value == null) {
        unsetDdl_type();
      } else {
        setDdl_type((TDdlType)value);
      }
      break;

    case USE_DB_PARAMS:
      if (value == null) {
        unsetUse_db_params();
      } else {
        setUse_db_params((TUseDbParams)value);
      }
      break;

    case DESCRIBE_TABLE_PARAMS:
      if (value == null) {
        unsetDescribe_table_params();
      } else {
        setDescribe_table_params((TDescribeTableParams)value);
      }
      break;

    case SHOW_DBS_PARAMS:
      if (value == null) {
        unsetShow_dbs_params();
      } else {
        setShow_dbs_params((TShowDbsParams)value);
      }
      break;

    case SHOW_TABLES_PARAMS:
      if (value == null) {
        unsetShow_tables_params();
      } else {
        setShow_tables_params((TShowTablesParams)value);
      }
      break;

    case ALTER_TABLE_PARAMS:
      if (value == null) {
        unsetAlter_table_params();
      } else {
        setAlter_table_params((TAlterTableParams)value);
      }
      break;

    case ALTER_VIEW_PARAMS:
      if (value == null) {
        unsetAlter_view_params();
      } else {
        setAlter_view_params((TCreateOrAlterViewParams)value);
      }
      break;

    case CREATE_DB_PARAMS:
      if (value == null) {
        unsetCreate_db_params();
      } else {
        setCreate_db_params((TCreateDbParams)value);
      }
      break;

    case CREATE_TABLE_PARAMS:
      if (value == null) {
        unsetCreate_table_params();
      } else {
        setCreate_table_params((TCreateTableParams)value);
      }
      break;

    case CREATE_TABLE_LIKE_PARAMS:
      if (value == null) {
        unsetCreate_table_like_params();
      } else {
        setCreate_table_like_params((TCreateTableLikeParams)value);
      }
      break;

    case CREATE_VIEW_PARAMS:
      if (value == null) {
        unsetCreate_view_params();
      } else {
        setCreate_view_params((TCreateOrAlterViewParams)value);
      }
      break;

    case DROP_DB_PARAMS:
      if (value == null) {
        unsetDrop_db_params();
      } else {
        setDrop_db_params((TDropDbParams)value);
      }
      break;

    case DROP_TABLE_OR_VIEW_PARAMS:
      if (value == null) {
        unsetDrop_table_or_view_params();
      } else {
        setDrop_table_or_view_params((TDropTableOrViewParams)value);
      }
      break;

    case RESET_METADATA_PARAMS:
      if (value == null) {
        unsetReset_metadata_params();
      } else {
        setReset_metadata_params((TResetMetadataParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DDL_TYPE:
      return getDdl_type();

    case USE_DB_PARAMS:
      return getUse_db_params();

    case DESCRIBE_TABLE_PARAMS:
      return getDescribe_table_params();

    case SHOW_DBS_PARAMS:
      return getShow_dbs_params();

    case SHOW_TABLES_PARAMS:
      return getShow_tables_params();

    case ALTER_TABLE_PARAMS:
      return getAlter_table_params();

    case ALTER_VIEW_PARAMS:
      return getAlter_view_params();

    case CREATE_DB_PARAMS:
      return getCreate_db_params();

    case CREATE_TABLE_PARAMS:
      return getCreate_table_params();

    case CREATE_TABLE_LIKE_PARAMS:
      return getCreate_table_like_params();

    case CREATE_VIEW_PARAMS:
      return getCreate_view_params();

    case DROP_DB_PARAMS:
      return getDrop_db_params();

    case DROP_TABLE_OR_VIEW_PARAMS:
      return getDrop_table_or_view_params();

    case RESET_METADATA_PARAMS:
      return getReset_metadata_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DDL_TYPE:
      return isSetDdl_type();
    case USE_DB_PARAMS:
      return isSetUse_db_params();
    case DESCRIBE_TABLE_PARAMS:
      return isSetDescribe_table_params();
    case SHOW_DBS_PARAMS:
      return isSetShow_dbs_params();
    case SHOW_TABLES_PARAMS:
      return isSetShow_tables_params();
    case ALTER_TABLE_PARAMS:
      return isSetAlter_table_params();
    case ALTER_VIEW_PARAMS:
      return isSetAlter_view_params();
    case CREATE_DB_PARAMS:
      return isSetCreate_db_params();
    case CREATE_TABLE_PARAMS:
      return isSetCreate_table_params();
    case CREATE_TABLE_LIKE_PARAMS:
      return isSetCreate_table_like_params();
    case CREATE_VIEW_PARAMS:
      return isSetCreate_view_params();
    case DROP_DB_PARAMS:
      return isSetDrop_db_params();
    case DROP_TABLE_OR_VIEW_PARAMS:
      return isSetDrop_table_or_view_params();
    case RESET_METADATA_PARAMS:
      return isSetReset_metadata_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDdlExecRequest)
      return this.equals((TDdlExecRequest)that);
    return false;
  }

  public boolean equals(TDdlExecRequest that) {
    if (that == null)
      return false;

    boolean this_present_ddl_type = true && this.isSetDdl_type();
    boolean that_present_ddl_type = true && that.isSetDdl_type();
    if (this_present_ddl_type || that_present_ddl_type) {
      if (!(this_present_ddl_type && that_present_ddl_type))
        return false;
      if (!this.ddl_type.equals(that.ddl_type))
        return false;
    }

    boolean this_present_use_db_params = true && this.isSetUse_db_params();
    boolean that_present_use_db_params = true && that.isSetUse_db_params();
    if (this_present_use_db_params || that_present_use_db_params) {
      if (!(this_present_use_db_params && that_present_use_db_params))
        return false;
      if (!this.use_db_params.equals(that.use_db_params))
        return false;
    }

    boolean this_present_describe_table_params = true && this.isSetDescribe_table_params();
    boolean that_present_describe_table_params = true && that.isSetDescribe_table_params();
    if (this_present_describe_table_params || that_present_describe_table_params) {
      if (!(this_present_describe_table_params && that_present_describe_table_params))
        return false;
      if (!this.describe_table_params.equals(that.describe_table_params))
        return false;
    }

    boolean this_present_show_dbs_params = true && this.isSetShow_dbs_params();
    boolean that_present_show_dbs_params = true && that.isSetShow_dbs_params();
    if (this_present_show_dbs_params || that_present_show_dbs_params) {
      if (!(this_present_show_dbs_params && that_present_show_dbs_params))
        return false;
      if (!this.show_dbs_params.equals(that.show_dbs_params))
        return false;
    }

    boolean this_present_show_tables_params = true && this.isSetShow_tables_params();
    boolean that_present_show_tables_params = true && that.isSetShow_tables_params();
    if (this_present_show_tables_params || that_present_show_tables_params) {
      if (!(this_present_show_tables_params && that_present_show_tables_params))
        return false;
      if (!this.show_tables_params.equals(that.show_tables_params))
        return false;
    }

    boolean this_present_alter_table_params = true && this.isSetAlter_table_params();
    boolean that_present_alter_table_params = true && that.isSetAlter_table_params();
    if (this_present_alter_table_params || that_present_alter_table_params) {
      if (!(this_present_alter_table_params && that_present_alter_table_params))
        return false;
      if (!this.alter_table_params.equals(that.alter_table_params))
        return false;
    }

    boolean this_present_alter_view_params = true && this.isSetAlter_view_params();
    boolean that_present_alter_view_params = true && that.isSetAlter_view_params();
    if (this_present_alter_view_params || that_present_alter_view_params) {
      if (!(this_present_alter_view_params && that_present_alter_view_params))
        return false;
      if (!this.alter_view_params.equals(that.alter_view_params))
        return false;
    }

    boolean this_present_create_db_params = true && this.isSetCreate_db_params();
    boolean that_present_create_db_params = true && that.isSetCreate_db_params();
    if (this_present_create_db_params || that_present_create_db_params) {
      if (!(this_present_create_db_params && that_present_create_db_params))
        return false;
      if (!this.create_db_params.equals(that.create_db_params))
        return false;
    }

    boolean this_present_create_table_params = true && this.isSetCreate_table_params();
    boolean that_present_create_table_params = true && that.isSetCreate_table_params();
    if (this_present_create_table_params || that_present_create_table_params) {
      if (!(this_present_create_table_params && that_present_create_table_params))
        return false;
      if (!this.create_table_params.equals(that.create_table_params))
        return false;
    }

    boolean this_present_create_table_like_params = true && this.isSetCreate_table_like_params();
    boolean that_present_create_table_like_params = true && that.isSetCreate_table_like_params();
    if (this_present_create_table_like_params || that_present_create_table_like_params) {
      if (!(this_present_create_table_like_params && that_present_create_table_like_params))
        return false;
      if (!this.create_table_like_params.equals(that.create_table_like_params))
        return false;
    }

    boolean this_present_create_view_params = true && this.isSetCreate_view_params();
    boolean that_present_create_view_params = true && that.isSetCreate_view_params();
    if (this_present_create_view_params || that_present_create_view_params) {
      if (!(this_present_create_view_params && that_present_create_view_params))
        return false;
      if (!this.create_view_params.equals(that.create_view_params))
        return false;
    }

    boolean this_present_drop_db_params = true && this.isSetDrop_db_params();
    boolean that_present_drop_db_params = true && that.isSetDrop_db_params();
    if (this_present_drop_db_params || that_present_drop_db_params) {
      if (!(this_present_drop_db_params && that_present_drop_db_params))
        return false;
      if (!this.drop_db_params.equals(that.drop_db_params))
        return false;
    }

    boolean this_present_drop_table_or_view_params = true && this.isSetDrop_table_or_view_params();
    boolean that_present_drop_table_or_view_params = true && that.isSetDrop_table_or_view_params();
    if (this_present_drop_table_or_view_params || that_present_drop_table_or_view_params) {
      if (!(this_present_drop_table_or_view_params && that_present_drop_table_or_view_params))
        return false;
      if (!this.drop_table_or_view_params.equals(that.drop_table_or_view_params))
        return false;
    }

    boolean this_present_reset_metadata_params = true && this.isSetReset_metadata_params();
    boolean that_present_reset_metadata_params = true && that.isSetReset_metadata_params();
    if (this_present_reset_metadata_params || that_present_reset_metadata_params) {
      if (!(this_present_reset_metadata_params && that_present_reset_metadata_params))
        return false;
      if (!this.reset_metadata_params.equals(that.reset_metadata_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TDdlExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TDdlExecRequest typedOther = (TDdlExecRequest)other;

    lastComparison = Boolean.valueOf(isSetDdl_type()).compareTo(typedOther.isSetDdl_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_type, typedOther.ddl_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_db_params()).compareTo(typedOther.isSetUse_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_db_params, typedOther.use_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescribe_table_params()).compareTo(typedOther.isSetDescribe_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescribe_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.describe_table_params, typedOther.describe_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_dbs_params()).compareTo(typedOther.isSetShow_dbs_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_dbs_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_dbs_params, typedOther.show_dbs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_tables_params()).compareTo(typedOther.isSetShow_tables_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_tables_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_tables_params, typedOther.show_tables_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlter_table_params()).compareTo(typedOther.isSetAlter_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_table_params, typedOther.alter_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlter_view_params()).compareTo(typedOther.isSetAlter_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_view_params, typedOther.alter_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_db_params()).compareTo(typedOther.isSetCreate_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_db_params, typedOther.create_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_table_params()).compareTo(typedOther.isSetCreate_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_table_params, typedOther.create_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_table_like_params()).compareTo(typedOther.isSetCreate_table_like_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_table_like_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_table_like_params, typedOther.create_table_like_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_view_params()).compareTo(typedOther.isSetCreate_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_view_params, typedOther.create_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_db_params()).compareTo(typedOther.isSetDrop_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_db_params, typedOther.drop_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_table_or_view_params()).compareTo(typedOther.isSetDrop_table_or_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_table_or_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_table_or_view_params, typedOther.drop_table_or_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReset_metadata_params()).compareTo(typedOther.isSetReset_metadata_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReset_metadata_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reset_metadata_params, typedOther.reset_metadata_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDdlExecRequest(");
    boolean first = true;

    sb.append("ddl_type:");
    if (this.ddl_type == null) {
      sb.append("null");
    } else {
      sb.append(this.ddl_type);
    }
    first = false;
    if (isSetUse_db_params()) {
      if (!first) sb.append(", ");
      sb.append("use_db_params:");
      if (this.use_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.use_db_params);
      }
      first = false;
    }
    if (isSetDescribe_table_params()) {
      if (!first) sb.append(", ");
      sb.append("describe_table_params:");
      if (this.describe_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.describe_table_params);
      }
      first = false;
    }
    if (isSetShow_dbs_params()) {
      if (!first) sb.append(", ");
      sb.append("show_dbs_params:");
      if (this.show_dbs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_dbs_params);
      }
      first = false;
    }
    if (isSetShow_tables_params()) {
      if (!first) sb.append(", ");
      sb.append("show_tables_params:");
      if (this.show_tables_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_tables_params);
      }
      first = false;
    }
    if (isSetAlter_table_params()) {
      if (!first) sb.append(", ");
      sb.append("alter_table_params:");
      if (this.alter_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_table_params);
      }
      first = false;
    }
    if (isSetAlter_view_params()) {
      if (!first) sb.append(", ");
      sb.append("alter_view_params:");
      if (this.alter_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_view_params);
      }
      first = false;
    }
    if (isSetCreate_db_params()) {
      if (!first) sb.append(", ");
      sb.append("create_db_params:");
      if (this.create_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_db_params);
      }
      first = false;
    }
    if (isSetCreate_table_params()) {
      if (!first) sb.append(", ");
      sb.append("create_table_params:");
      if (this.create_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_table_params);
      }
      first = false;
    }
    if (isSetCreate_table_like_params()) {
      if (!first) sb.append(", ");
      sb.append("create_table_like_params:");
      if (this.create_table_like_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_table_like_params);
      }
      first = false;
    }
    if (isSetCreate_view_params()) {
      if (!first) sb.append(", ");
      sb.append("create_view_params:");
      if (this.create_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_view_params);
      }
      first = false;
    }
    if (isSetDrop_db_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_db_params:");
      if (this.drop_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_db_params);
      }
      first = false;
    }
    if (isSetDrop_table_or_view_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_table_or_view_params:");
      if (this.drop_table_or_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_table_or_view_params);
      }
      first = false;
    }
    if (isSetReset_metadata_params()) {
      if (!first) sb.append(", ");
      sb.append("reset_metadata_params:");
      if (this.reset_metadata_params == null) {
        sb.append("null");
      } else {
        sb.append(this.reset_metadata_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ddl_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ddl_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (use_db_params != null) {
      use_db_params.validate();
    }
    if (describe_table_params != null) {
      describe_table_params.validate();
    }
    if (show_dbs_params != null) {
      show_dbs_params.validate();
    }
    if (show_tables_params != null) {
      show_tables_params.validate();
    }
    if (alter_table_params != null) {
      alter_table_params.validate();
    }
    if (alter_view_params != null) {
      alter_view_params.validate();
    }
    if (create_db_params != null) {
      create_db_params.validate();
    }
    if (create_table_params != null) {
      create_table_params.validate();
    }
    if (create_table_like_params != null) {
      create_table_like_params.validate();
    }
    if (create_view_params != null) {
      create_view_params.validate();
    }
    if (drop_db_params != null) {
      drop_db_params.validate();
    }
    if (drop_table_or_view_params != null) {
      drop_table_or_view_params.validate();
    }
    if (reset_metadata_params != null) {
      reset_metadata_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDdlExecRequestStandardSchemeFactory implements SchemeFactory {
    public TDdlExecRequestStandardScheme getScheme() {
      return new TDdlExecRequestStandardScheme();
    }
  }

  private static class TDdlExecRequestStandardScheme extends StandardScheme<TDdlExecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DDL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ddl_type = TDdlType.findByValue(iprot.readI32());
              struct.setDdl_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.use_db_params = new TUseDbParams();
              struct.use_db_params.read(iprot);
              struct.setUse_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIBE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.describe_table_params = new TDescribeTableParams();
              struct.describe_table_params.read(iprot);
              struct.setDescribe_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHOW_DBS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_dbs_params = new TShowDbsParams();
              struct.show_dbs_params.read(iprot);
              struct.setShow_dbs_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_TABLES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_tables_params = new TShowTablesParams();
              struct.show_tables_params.read(iprot);
              struct.setShow_tables_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALTER_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_table_params = new TAlterTableParams();
              struct.alter_table_params.read(iprot);
              struct.setAlter_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ALTER_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_view_params = new TCreateOrAlterViewParams();
              struct.alter_view_params.read(iprot);
              struct.setAlter_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_db_params = new TCreateDbParams();
              struct.create_db_params.read(iprot);
              struct.setCreate_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_table_params = new TCreateTableParams();
              struct.create_table_params.read(iprot);
              struct.setCreate_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TABLE_LIKE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_table_like_params = new TCreateTableLikeParams();
              struct.create_table_like_params.read(iprot);
              struct.setCreate_table_like_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_view_params = new TCreateOrAlterViewParams();
              struct.create_view_params.read(iprot);
              struct.setCreate_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DROP_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_db_params = new TDropDbParams();
              struct.drop_db_params.read(iprot);
              struct.setDrop_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DROP_TABLE_OR_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_table_or_view_params = new TDropTableOrViewParams();
              struct.drop_table_or_view_params.read(iprot);
              struct.setDrop_table_or_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESET_METADATA_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reset_metadata_params = new TResetMetadataParams();
              struct.reset_metadata_params.read(iprot);
              struct.setReset_metadata_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ddl_type != null) {
        oprot.writeFieldBegin(DDL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.ddl_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.use_db_params != null) {
        if (struct.isSetUse_db_params()) {
          oprot.writeFieldBegin(USE_DB_PARAMS_FIELD_DESC);
          struct.use_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.describe_table_params != null) {
        if (struct.isSetDescribe_table_params()) {
          oprot.writeFieldBegin(DESCRIBE_TABLE_PARAMS_FIELD_DESC);
          struct.describe_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_dbs_params != null) {
        if (struct.isSetShow_dbs_params()) {
          oprot.writeFieldBegin(SHOW_DBS_PARAMS_FIELD_DESC);
          struct.show_dbs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_tables_params != null) {
        if (struct.isSetShow_tables_params()) {
          oprot.writeFieldBegin(SHOW_TABLES_PARAMS_FIELD_DESC);
          struct.show_tables_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_table_params != null) {
        if (struct.isSetAlter_table_params()) {
          oprot.writeFieldBegin(ALTER_TABLE_PARAMS_FIELD_DESC);
          struct.alter_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_db_params != null) {
        if (struct.isSetCreate_db_params()) {
          oprot.writeFieldBegin(CREATE_DB_PARAMS_FIELD_DESC);
          struct.create_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_table_params != null) {
        if (struct.isSetCreate_table_params()) {
          oprot.writeFieldBegin(CREATE_TABLE_PARAMS_FIELD_DESC);
          struct.create_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_table_like_params != null) {
        if (struct.isSetCreate_table_like_params()) {
          oprot.writeFieldBegin(CREATE_TABLE_LIKE_PARAMS_FIELD_DESC);
          struct.create_table_like_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_db_params != null) {
        if (struct.isSetDrop_db_params()) {
          oprot.writeFieldBegin(DROP_DB_PARAMS_FIELD_DESC);
          struct.drop_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_table_or_view_params != null) {
        if (struct.isSetDrop_table_or_view_params()) {
          oprot.writeFieldBegin(DROP_TABLE_OR_VIEW_PARAMS_FIELD_DESC);
          struct.drop_table_or_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reset_metadata_params != null) {
        if (struct.isSetReset_metadata_params()) {
          oprot.writeFieldBegin(RESET_METADATA_PARAMS_FIELD_DESC);
          struct.reset_metadata_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_view_params != null) {
        if (struct.isSetCreate_view_params()) {
          oprot.writeFieldBegin(CREATE_VIEW_PARAMS_FIELD_DESC);
          struct.create_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_view_params != null) {
        if (struct.isSetAlter_view_params()) {
          oprot.writeFieldBegin(ALTER_VIEW_PARAMS_FIELD_DESC);
          struct.alter_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDdlExecRequestTupleSchemeFactory implements SchemeFactory {
    public TDdlExecRequestTupleScheme getScheme() {
      return new TDdlExecRequestTupleScheme();
    }
  }

  private static class TDdlExecRequestTupleScheme extends TupleScheme<TDdlExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.ddl_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetUse_db_params()) {
        optionals.set(0);
      }
      if (struct.isSetDescribe_table_params()) {
        optionals.set(1);
      }
      if (struct.isSetShow_dbs_params()) {
        optionals.set(2);
      }
      if (struct.isSetShow_tables_params()) {
        optionals.set(3);
      }
      if (struct.isSetAlter_table_params()) {
        optionals.set(4);
      }
      if (struct.isSetAlter_view_params()) {
        optionals.set(5);
      }
      if (struct.isSetCreate_db_params()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_table_params()) {
        optionals.set(7);
      }
      if (struct.isSetCreate_table_like_params()) {
        optionals.set(8);
      }
      if (struct.isSetCreate_view_params()) {
        optionals.set(9);
      }
      if (struct.isSetDrop_db_params()) {
        optionals.set(10);
      }
      if (struct.isSetDrop_table_or_view_params()) {
        optionals.set(11);
      }
      if (struct.isSetReset_metadata_params()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetUse_db_params()) {
        struct.use_db_params.write(oprot);
      }
      if (struct.isSetDescribe_table_params()) {
        struct.describe_table_params.write(oprot);
      }
      if (struct.isSetShow_dbs_params()) {
        struct.show_dbs_params.write(oprot);
      }
      if (struct.isSetShow_tables_params()) {
        struct.show_tables_params.write(oprot);
      }
      if (struct.isSetAlter_table_params()) {
        struct.alter_table_params.write(oprot);
      }
      if (struct.isSetAlter_view_params()) {
        struct.alter_view_params.write(oprot);
      }
      if (struct.isSetCreate_db_params()) {
        struct.create_db_params.write(oprot);
      }
      if (struct.isSetCreate_table_params()) {
        struct.create_table_params.write(oprot);
      }
      if (struct.isSetCreate_table_like_params()) {
        struct.create_table_like_params.write(oprot);
      }
      if (struct.isSetCreate_view_params()) {
        struct.create_view_params.write(oprot);
      }
      if (struct.isSetDrop_db_params()) {
        struct.drop_db_params.write(oprot);
      }
      if (struct.isSetDrop_table_or_view_params()) {
        struct.drop_table_or_view_params.write(oprot);
      }
      if (struct.isSetReset_metadata_params()) {
        struct.reset_metadata_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ddl_type = TDdlType.findByValue(iprot.readI32());
      struct.setDdl_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.use_db_params = new TUseDbParams();
        struct.use_db_params.read(iprot);
        struct.setUse_db_paramsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.describe_table_params = new TDescribeTableParams();
        struct.describe_table_params.read(iprot);
        struct.setDescribe_table_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.show_dbs_params = new TShowDbsParams();
        struct.show_dbs_params.read(iprot);
        struct.setShow_dbs_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.show_tables_params = new TShowTablesParams();
        struct.show_tables_params.read(iprot);
        struct.setShow_tables_paramsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.alter_table_params = new TAlterTableParams();
        struct.alter_table_params.read(iprot);
        struct.setAlter_table_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.alter_view_params = new TCreateOrAlterViewParams();
        struct.alter_view_params.read(iprot);
        struct.setAlter_view_paramsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.create_db_params = new TCreateDbParams();
        struct.create_db_params.read(iprot);
        struct.setCreate_db_paramsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_table_params = new TCreateTableParams();
        struct.create_table_params.read(iprot);
        struct.setCreate_table_paramsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.create_table_like_params = new TCreateTableLikeParams();
        struct.create_table_like_params.read(iprot);
        struct.setCreate_table_like_paramsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.create_view_params = new TCreateOrAlterViewParams();
        struct.create_view_params.read(iprot);
        struct.setCreate_view_paramsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.drop_db_params = new TDropDbParams();
        struct.drop_db_params.read(iprot);
        struct.setDrop_db_paramsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.drop_table_or_view_params = new TDropTableOrViewParams();
        struct.drop_table_or_view_params.read(iprot);
        struct.setDrop_table_or_view_paramsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.reset_metadata_params = new TResetMetadataParams();
        struct.reset_metadata_params.read(iprot);
        struct.setReset_metadata_paramsIsSet(true);
      }
    }
  }

}

