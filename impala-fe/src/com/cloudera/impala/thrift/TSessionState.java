/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSessionState implements org.apache.thrift.TBase<TSessionState, TSessionState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSessionState");

  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NETWORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("network_address", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSessionStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSessionStateTupleSchemeFactory());
  }

  public String database; // required
  public String user; // required
  public String session_id; // required
  public com.cloudera.impala.thrift.TNetworkAddress network_address; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATABASE((short)1, "database"),
    USER((short)2, "user"),
    SESSION_ID((short)3, "session_id"),
    NETWORK_ADDRESS((short)4, "network_address");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATABASE
          return DATABASE;
        case 2: // USER
          return USER;
        case 3: // SESSION_ID
          return SESSION_ID;
        case 4: // NETWORK_ADDRESS
          return NETWORK_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("network_address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cloudera.impala.thrift.TNetworkAddress.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSessionState.class, metaDataMap);
  }

  public TSessionState() {
  }

  public TSessionState(
    String database,
    String user,
    String session_id,
    com.cloudera.impala.thrift.TNetworkAddress network_address)
  {
    this();
    this.database = database;
    this.user = user;
    this.session_id = session_id;
    this.network_address = network_address;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSessionState(TSessionState other) {
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetSession_id()) {
      this.session_id = other.session_id;
    }
    if (other.isSetNetwork_address()) {
      this.network_address = new com.cloudera.impala.thrift.TNetworkAddress(other.network_address);
    }
  }

  public TSessionState deepCopy() {
    return new TSessionState(this);
  }

  @Override
  public void clear() {
    this.database = null;
    this.user = null;
    this.session_id = null;
    this.network_address = null;
  }

  public String getDatabase() {
    return this.database;
  }

  public TSessionState setDatabase(String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public TSessionState setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getSession_id() {
    return this.session_id;
  }

  public TSessionState setSession_id(String session_id) {
    this.session_id = session_id;
    return this;
  }

  public void unsetSession_id() {
    this.session_id = null;
  }

  /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_id() {
    return this.session_id != null;
  }

  public void setSession_idIsSet(boolean value) {
    if (!value) {
      this.session_id = null;
    }
  }

  public com.cloudera.impala.thrift.TNetworkAddress getNetwork_address() {
    return this.network_address;
  }

  public TSessionState setNetwork_address(com.cloudera.impala.thrift.TNetworkAddress network_address) {
    this.network_address = network_address;
    return this;
  }

  public void unsetNetwork_address() {
    this.network_address = null;
  }

  /** Returns true if field network_address is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork_address() {
    return this.network_address != null;
  }

  public void setNetwork_addressIsSet(boolean value) {
    if (!value) {
      this.network_address = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((String)value);
      }
      break;

    case NETWORK_ADDRESS:
      if (value == null) {
        unsetNetwork_address();
      } else {
        setNetwork_address((com.cloudera.impala.thrift.TNetworkAddress)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATABASE:
      return getDatabase();

    case USER:
      return getUser();

    case SESSION_ID:
      return getSession_id();

    case NETWORK_ADDRESS:
      return getNetwork_address();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATABASE:
      return isSetDatabase();
    case USER:
      return isSetUser();
    case SESSION_ID:
      return isSetSession_id();
    case NETWORK_ADDRESS:
      return isSetNetwork_address();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSessionState)
      return this.equals((TSessionState)that);
    return false;
  }

  public boolean equals(TSessionState that) {
    if (that == null)
      return false;

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_session_id = true && this.isSetSession_id();
    boolean that_present_session_id = true && that.isSetSession_id();
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!this.session_id.equals(that.session_id))
        return false;
    }

    boolean this_present_network_address = true && this.isSetNetwork_address();
    boolean that_present_network_address = true && that.isSetNetwork_address();
    if (this_present_network_address || that_present_network_address) {
      if (!(this_present_network_address && that_present_network_address))
        return false;
      if (!this.network_address.equals(that.network_address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSessionState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSessionState typedOther = (TSessionState)other;

    lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(typedOther.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, typedOther.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(typedOther.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, typedOther.session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork_address()).compareTo(typedOther.isSetNetwork_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network_address, typedOther.network_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSessionState(");
    boolean first = true;

    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("session_id:");
    if (this.session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.session_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("network_address:");
    if (this.network_address == null) {
      sb.append("null");
    } else {
      sb.append(this.network_address);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (database == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'database' was not present! Struct: " + toString());
    }
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (session_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'session_id' was not present! Struct: " + toString());
    }
    if (network_address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'network_address' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (network_address != null) {
      network_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSessionStateStandardSchemeFactory implements SchemeFactory {
    public TSessionStateStandardScheme getScheme() {
      return new TSessionStateStandardScheme();
    }
  }

  private static class TSessionStateStandardScheme extends StandardScheme<TSessionState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSessionState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.session_id = iprot.readString();
              struct.setSession_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NETWORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.network_address = new com.cloudera.impala.thrift.TNetworkAddress();
              struct.network_address.read(iprot);
              struct.setNetwork_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSessionState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.session_id != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.session_id);
        oprot.writeFieldEnd();
      }
      if (struct.network_address != null) {
        oprot.writeFieldBegin(NETWORK_ADDRESS_FIELD_DESC);
        struct.network_address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSessionStateTupleSchemeFactory implements SchemeFactory {
    public TSessionStateTupleScheme getScheme() {
      return new TSessionStateTupleScheme();
    }
  }

  private static class TSessionStateTupleScheme extends TupleScheme<TSessionState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSessionState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.database);
      oprot.writeString(struct.user);
      oprot.writeString(struct.session_id);
      struct.network_address.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSessionState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.database = iprot.readString();
      struct.setDatabaseIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.session_id = iprot.readString();
      struct.setSession_idIsSet(true);
      struct.network_address = new com.cloudera.impala.thrift.TNetworkAddress();
      struct.network_address.read(iprot);
      struct.setNetwork_addressIsSet(true);
    }
  }

}

