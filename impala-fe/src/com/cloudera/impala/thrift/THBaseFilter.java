/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THBaseFilter implements org.apache.thrift.TBase<THBaseFilter, THBaseFilter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THBaseFilter");

  private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("qualifier", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OP_ORDINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("op_ordinal", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILTER_CONSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_constant", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THBaseFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THBaseFilterTupleSchemeFactory());
  }

  public String family; // required
  public String qualifier; // required
  public int op_ordinal; // required
  public String filter_constant; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FAMILY((short)1, "family"),
    QUALIFIER((short)2, "qualifier"),
    OP_ORDINAL((short)3, "op_ordinal"),
    FILTER_CONSTANT((short)4, "filter_constant");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FAMILY
          return FAMILY;
        case 2: // QUALIFIER
          return QUALIFIER;
        case 3: // OP_ORDINAL
          return OP_ORDINAL;
        case 4: // FILTER_CONSTANT
          return FILTER_CONSTANT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OP_ORDINAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALIFIER, new org.apache.thrift.meta_data.FieldMetaData("qualifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_ORDINAL, new org.apache.thrift.meta_data.FieldMetaData("op_ordinal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILTER_CONSTANT, new org.apache.thrift.meta_data.FieldMetaData("filter_constant", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THBaseFilter.class, metaDataMap);
  }

  public THBaseFilter() {
  }

  public THBaseFilter(
    String family,
    String qualifier,
    int op_ordinal,
    String filter_constant)
  {
    this();
    this.family = family;
    this.qualifier = qualifier;
    this.op_ordinal = op_ordinal;
    setOp_ordinalIsSet(true);
    this.filter_constant = filter_constant;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THBaseFilter(THBaseFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFamily()) {
      this.family = other.family;
    }
    if (other.isSetQualifier()) {
      this.qualifier = other.qualifier;
    }
    this.op_ordinal = other.op_ordinal;
    if (other.isSetFilter_constant()) {
      this.filter_constant = other.filter_constant;
    }
  }

  public THBaseFilter deepCopy() {
    return new THBaseFilter(this);
  }

  @Override
  public void clear() {
    this.family = null;
    this.qualifier = null;
    setOp_ordinalIsSet(false);
    this.op_ordinal = 0;
    this.filter_constant = null;
  }

  public String getFamily() {
    return this.family;
  }

  public THBaseFilter setFamily(String family) {
    this.family = family;
    return this;
  }

  public void unsetFamily() {
    this.family = null;
  }

  /** Returns true if field family is set (has been assigned a value) and false otherwise */
  public boolean isSetFamily() {
    return this.family != null;
  }

  public void setFamilyIsSet(boolean value) {
    if (!value) {
      this.family = null;
    }
  }

  public String getQualifier() {
    return this.qualifier;
  }

  public THBaseFilter setQualifier(String qualifier) {
    this.qualifier = qualifier;
    return this;
  }

  public void unsetQualifier() {
    this.qualifier = null;
  }

  /** Returns true if field qualifier is set (has been assigned a value) and false otherwise */
  public boolean isSetQualifier() {
    return this.qualifier != null;
  }

  public void setQualifierIsSet(boolean value) {
    if (!value) {
      this.qualifier = null;
    }
  }

  public int getOp_ordinal() {
    return this.op_ordinal;
  }

  public THBaseFilter setOp_ordinal(int op_ordinal) {
    this.op_ordinal = op_ordinal;
    setOp_ordinalIsSet(true);
    return this;
  }

  public void unsetOp_ordinal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OP_ORDINAL_ISSET_ID);
  }

  /** Returns true if field op_ordinal is set (has been assigned a value) and false otherwise */
  public boolean isSetOp_ordinal() {
    return EncodingUtils.testBit(__isset_bitfield, __OP_ORDINAL_ISSET_ID);
  }

  public void setOp_ordinalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OP_ORDINAL_ISSET_ID, value);
  }

  public String getFilter_constant() {
    return this.filter_constant;
  }

  public THBaseFilter setFilter_constant(String filter_constant) {
    this.filter_constant = filter_constant;
    return this;
  }

  public void unsetFilter_constant() {
    this.filter_constant = null;
  }

  /** Returns true if field filter_constant is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_constant() {
    return this.filter_constant != null;
  }

  public void setFilter_constantIsSet(boolean value) {
    if (!value) {
      this.filter_constant = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FAMILY:
      if (value == null) {
        unsetFamily();
      } else {
        setFamily((String)value);
      }
      break;

    case QUALIFIER:
      if (value == null) {
        unsetQualifier();
      } else {
        setQualifier((String)value);
      }
      break;

    case OP_ORDINAL:
      if (value == null) {
        unsetOp_ordinal();
      } else {
        setOp_ordinal((Integer)value);
      }
      break;

    case FILTER_CONSTANT:
      if (value == null) {
        unsetFilter_constant();
      } else {
        setFilter_constant((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FAMILY:
      return getFamily();

    case QUALIFIER:
      return getQualifier();

    case OP_ORDINAL:
      return Integer.valueOf(getOp_ordinal());

    case FILTER_CONSTANT:
      return getFilter_constant();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FAMILY:
      return isSetFamily();
    case QUALIFIER:
      return isSetQualifier();
    case OP_ORDINAL:
      return isSetOp_ordinal();
    case FILTER_CONSTANT:
      return isSetFilter_constant();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THBaseFilter)
      return this.equals((THBaseFilter)that);
    return false;
  }

  public boolean equals(THBaseFilter that) {
    if (that == null)
      return false;

    boolean this_present_family = true && this.isSetFamily();
    boolean that_present_family = true && that.isSetFamily();
    if (this_present_family || that_present_family) {
      if (!(this_present_family && that_present_family))
        return false;
      if (!this.family.equals(that.family))
        return false;
    }

    boolean this_present_qualifier = true && this.isSetQualifier();
    boolean that_present_qualifier = true && that.isSetQualifier();
    if (this_present_qualifier || that_present_qualifier) {
      if (!(this_present_qualifier && that_present_qualifier))
        return false;
      if (!this.qualifier.equals(that.qualifier))
        return false;
    }

    boolean this_present_op_ordinal = true;
    boolean that_present_op_ordinal = true;
    if (this_present_op_ordinal || that_present_op_ordinal) {
      if (!(this_present_op_ordinal && that_present_op_ordinal))
        return false;
      if (this.op_ordinal != that.op_ordinal)
        return false;
    }

    boolean this_present_filter_constant = true && this.isSetFilter_constant();
    boolean that_present_filter_constant = true && that.isSetFilter_constant();
    if (this_present_filter_constant || that_present_filter_constant) {
      if (!(this_present_filter_constant && that_present_filter_constant))
        return false;
      if (!this.filter_constant.equals(that.filter_constant))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(THBaseFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    THBaseFilter typedOther = (THBaseFilter)other;

    lastComparison = Boolean.valueOf(isSetFamily()).compareTo(typedOther.isSetFamily());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamily()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, typedOther.family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQualifier()).compareTo(typedOther.isSetQualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifier, typedOther.qualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp_ordinal()).compareTo(typedOther.isSetOp_ordinal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp_ordinal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op_ordinal, typedOther.op_ordinal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_constant()).compareTo(typedOther.isSetFilter_constant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_constant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_constant, typedOther.filter_constant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THBaseFilter(");
    boolean first = true;

    sb.append("family:");
    if (this.family == null) {
      sb.append("null");
    } else {
      sb.append(this.family);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qualifier:");
    if (this.qualifier == null) {
      sb.append("null");
    } else {
      sb.append(this.qualifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op_ordinal:");
    sb.append(this.op_ordinal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter_constant:");
    if (this.filter_constant == null) {
      sb.append("null");
    } else {
      sb.append(this.filter_constant);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (family == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'family' was not present! Struct: " + toString());
    }
    if (qualifier == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'qualifier' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'op_ordinal' because it's a primitive and you chose the non-beans generator.
    if (filter_constant == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filter_constant' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THBaseFilterStandardSchemeFactory implements SchemeFactory {
    public THBaseFilterStandardScheme getScheme() {
      return new THBaseFilterStandardScheme();
    }
  }

  private static class THBaseFilterStandardScheme extends StandardScheme<THBaseFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THBaseFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.family = iprot.readString();
              struct.setFamilyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUALIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qualifier = iprot.readString();
              struct.setQualifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OP_ORDINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op_ordinal = iprot.readI32();
              struct.setOp_ordinalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILTER_CONSTANT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filter_constant = iprot.readString();
              struct.setFilter_constantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOp_ordinal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'op_ordinal' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THBaseFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.family != null) {
        oprot.writeFieldBegin(FAMILY_FIELD_DESC);
        oprot.writeString(struct.family);
        oprot.writeFieldEnd();
      }
      if (struct.qualifier != null) {
        oprot.writeFieldBegin(QUALIFIER_FIELD_DESC);
        oprot.writeString(struct.qualifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OP_ORDINAL_FIELD_DESC);
      oprot.writeI32(struct.op_ordinal);
      oprot.writeFieldEnd();
      if (struct.filter_constant != null) {
        oprot.writeFieldBegin(FILTER_CONSTANT_FIELD_DESC);
        oprot.writeString(struct.filter_constant);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THBaseFilterTupleSchemeFactory implements SchemeFactory {
    public THBaseFilterTupleScheme getScheme() {
      return new THBaseFilterTupleScheme();
    }
  }

  private static class THBaseFilterTupleScheme extends TupleScheme<THBaseFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THBaseFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.family);
      oprot.writeString(struct.qualifier);
      oprot.writeI32(struct.op_ordinal);
      oprot.writeString(struct.filter_constant);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THBaseFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.family = iprot.readString();
      struct.setFamilyIsSet(true);
      struct.qualifier = iprot.readString();
      struct.setQualifierIsSet(true);
      struct.op_ordinal = iprot.readI32();
      struct.setOp_ordinalIsSet(true);
      struct.filter_constant = iprot.readString();
      struct.setFilter_constantIsSet(true);
    }
  }

}

