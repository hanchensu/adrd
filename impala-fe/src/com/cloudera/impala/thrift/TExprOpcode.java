/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum TExprOpcode implements org.apache.thrift.TEnum {
  INVALID_OPCODE(0),
  ADD_DOUBLE_DOUBLE(1),
  ADD_LONG_LONG(2),
  BITAND_CHAR_CHAR(3),
  BITAND_INT_INT(4),
  BITAND_LONG_LONG(5),
  BITAND_SHORT_SHORT(6),
  BITNOT_CHAR(7),
  BITNOT_INT(8),
  BITNOT_LONG(9),
  BITNOT_SHORT(10),
  BITOR_CHAR_CHAR(11),
  BITOR_INT_INT(12),
  BITOR_LONG_LONG(13),
  BITOR_SHORT_SHORT(14),
  BITXOR_CHAR_CHAR(15),
  BITXOR_INT_INT(16),
  BITXOR_LONG_LONG(17),
  BITXOR_SHORT_SHORT(18),
  CASE_BOOL(19),
  CASE_CHAR(20),
  CASE_DOUBLE(21),
  CASE_FLOAT(22),
  CASE_INT(23),
  CASE_LONG(24),
  CASE_SHORT(25),
  CASE_STRINGVALUE(26),
  CASE_TIMESTAMPVALUE(27),
  CAST_BOOL_BOOL(28),
  CAST_BOOL_CHAR(29),
  CAST_BOOL_DOUBLE(30),
  CAST_BOOL_FLOAT(31),
  CAST_BOOL_INT(32),
  CAST_BOOL_LONG(33),
  CAST_BOOL_SHORT(34),
  CAST_BOOL_STRINGVALUE(35),
  CAST_BOOL_TIMESTAMPVALUE(36),
  CAST_CHAR_BOOL(37),
  CAST_CHAR_CHAR(38),
  CAST_CHAR_DOUBLE(39),
  CAST_CHAR_FLOAT(40),
  CAST_CHAR_INT(41),
  CAST_CHAR_LONG(42),
  CAST_CHAR_SHORT(43),
  CAST_CHAR_STRINGVALUE(44),
  CAST_CHAR_TIMESTAMPVALUE(45),
  CAST_DOUBLE_BOOL(46),
  CAST_DOUBLE_CHAR(47),
  CAST_DOUBLE_DOUBLE(48),
  CAST_DOUBLE_FLOAT(49),
  CAST_DOUBLE_INT(50),
  CAST_DOUBLE_LONG(51),
  CAST_DOUBLE_SHORT(52),
  CAST_DOUBLE_STRINGVALUE(53),
  CAST_DOUBLE_TIMESTAMPVALUE(54),
  CAST_FLOAT_BOOL(55),
  CAST_FLOAT_CHAR(56),
  CAST_FLOAT_DOUBLE(57),
  CAST_FLOAT_FLOAT(58),
  CAST_FLOAT_INT(59),
  CAST_FLOAT_LONG(60),
  CAST_FLOAT_SHORT(61),
  CAST_FLOAT_STRINGVALUE(62),
  CAST_FLOAT_TIMESTAMPVALUE(63),
  CAST_INT_BOOL(64),
  CAST_INT_CHAR(65),
  CAST_INT_DOUBLE(66),
  CAST_INT_FLOAT(67),
  CAST_INT_INT(68),
  CAST_INT_LONG(69),
  CAST_INT_SHORT(70),
  CAST_INT_STRINGVALUE(71),
  CAST_INT_TIMESTAMPVALUE(72),
  CAST_LONG_BOOL(73),
  CAST_LONG_CHAR(74),
  CAST_LONG_DOUBLE(75),
  CAST_LONG_FLOAT(76),
  CAST_LONG_INT(77),
  CAST_LONG_LONG(78),
  CAST_LONG_SHORT(79),
  CAST_LONG_STRINGVALUE(80),
  CAST_LONG_TIMESTAMPVALUE(81),
  CAST_SHORT_BOOL(82),
  CAST_SHORT_CHAR(83),
  CAST_SHORT_DOUBLE(84),
  CAST_SHORT_FLOAT(85),
  CAST_SHORT_INT(86),
  CAST_SHORT_LONG(87),
  CAST_SHORT_SHORT(88),
  CAST_SHORT_STRINGVALUE(89),
  CAST_SHORT_TIMESTAMPVALUE(90),
  CAST_STRINGVALUE_CHAR(91),
  CAST_STRINGVALUE_DOUBLE(92),
  CAST_STRINGVALUE_FLOAT(93),
  CAST_STRINGVALUE_INT(94),
  CAST_STRINGVALUE_LONG(95),
  CAST_STRINGVALUE_SHORT(96),
  CAST_STRINGVALUE_TIMESTAMPVALUE(97),
  CAST_TIMESTAMPVALUE_BOOL(98),
  CAST_TIMESTAMPVALUE_CHAR(99),
  CAST_TIMESTAMPVALUE_DOUBLE(100),
  CAST_TIMESTAMPVALUE_FLOAT(101),
  CAST_TIMESTAMPVALUE_INT(102),
  CAST_TIMESTAMPVALUE_LONG(103),
  CAST_TIMESTAMPVALUE_SHORT(104),
  CAST_TIMESTAMPVALUE_STRINGVALUE(105),
  COMPOUND_AND(106),
  COMPOUND_NOT(107),
  COMPOUND_OR(108),
  CONDITIONAL_COALESCE_BOOL_VARARGS(109),
  CONDITIONAL_COALESCE_DOUBLE_VARARGS(110),
  CONDITIONAL_COALESCE_LONG_VARARGS(111),
  CONDITIONAL_COALESCE_STRINGVALUE_VARARGS(112),
  CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS(113),
  CONDITIONAL_IF_BOOL_BOOL_BOOL(114),
  CONDITIONAL_IF_BOOL_CHAR_CHAR(115),
  CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE(116),
  CONDITIONAL_IF_BOOL_FLOAT_FLOAT(117),
  CONDITIONAL_IF_BOOL_INT_INT(118),
  CONDITIONAL_IF_BOOL_LONG_LONG(119),
  CONDITIONAL_IF_BOOL_SHORT_SHORT(120),
  CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE(121),
  CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE(122),
  CONDITIONAL_ISNULL_BOOL_BOOL(123),
  CONDITIONAL_ISNULL_DOUBLE_DOUBLE(124),
  CONDITIONAL_ISNULL_INT_INT(125),
  CONDITIONAL_ISNULL_LONG_LONG(126),
  CONDITIONAL_ISNULL_STRINGVALUE_STRINGVALUE(127),
  CONDITIONAL_ISNULL_TIMESTAMPVALUE_TIMESTAMPVALUE(128),
  CONSTANT_REGEX(129),
  CONSTANT_SUBSTRING(130),
  DIVIDE(131),
  EQ_BOOL_BOOL(132),
  EQ_CHAR_CHAR(133),
  EQ_DOUBLE_DOUBLE(134),
  EQ_FLOAT_FLOAT(135),
  EQ_INT_INT(136),
  EQ_LONG_LONG(137),
  EQ_SHORT_SHORT(138),
  EQ_STRINGVALUE_STRINGVALUE(139),
  EQ_TIMESTAMPVALUE_TIMESTAMPVALUE(140),
  FROM_UNIXTIME_INT(141),
  FROM_UNIXTIME_INT_STRINGVALUE(142),
  FROM_UTC_TIMESTAMP(143),
  GE_BOOL_BOOL(144),
  GE_CHAR_CHAR(145),
  GE_DOUBLE_DOUBLE(146),
  GE_FLOAT_FLOAT(147),
  GE_INT_INT(148),
  GE_LONG_LONG(149),
  GE_SHORT_SHORT(150),
  GE_STRINGVALUE_STRINGVALUE(151),
  GE_TIMESTAMPVALUE_TIMESTAMPVALUE(152),
  GT_BOOL_BOOL(153),
  GT_CHAR_CHAR(154),
  GT_DOUBLE_DOUBLE(155),
  GT_FLOAT_FLOAT(156),
  GT_INT_INT(157),
  GT_LONG_LONG(158),
  GT_SHORT_SHORT(159),
  GT_STRINGVALUE_STRINGVALUE(160),
  GT_TIMESTAMPVALUE_TIMESTAMPVALUE(161),
  INT_DIVIDE_CHAR_CHAR(162),
  INT_DIVIDE_INT_INT(163),
  INT_DIVIDE_LONG_LONG(164),
  INT_DIVIDE_SHORT_SHORT(165),
  LE_BOOL_BOOL(166),
  LE_CHAR_CHAR(167),
  LE_DOUBLE_DOUBLE(168),
  LE_FLOAT_FLOAT(169),
  LE_INT_INT(170),
  LE_LONG_LONG(171),
  LE_SHORT_SHORT(172),
  LE_STRINGVALUE_STRINGVALUE(173),
  LE_TIMESTAMPVALUE_TIMESTAMPVALUE(174),
  LIKE(175),
  LT_BOOL_BOOL(176),
  LT_CHAR_CHAR(177),
  LT_DOUBLE_DOUBLE(178),
  LT_FLOAT_FLOAT(179),
  LT_INT_INT(180),
  LT_LONG_LONG(181),
  LT_SHORT_SHORT(182),
  LT_STRINGVALUE_STRINGVALUE(183),
  LT_TIMESTAMPVALUE_TIMESTAMPVALUE(184),
  MATH_ABS(185),
  MATH_ACOS(186),
  MATH_ASIN(187),
  MATH_ATAN(188),
  MATH_BIN(189),
  MATH_CEIL(190),
  MATH_CONV_LONG_CHAR_CHAR(191),
  MATH_CONV_STRINGVALUE_CHAR_CHAR(192),
  MATH_COS(193),
  MATH_DEGREES(194),
  MATH_E(195),
  MATH_EXP(196),
  MATH_FLOOR(197),
  MATH_HEX_LONG(198),
  MATH_HEX_STRINGVALUE(199),
  MATH_LN(200),
  MATH_LOG(201),
  MATH_LOG10(202),
  MATH_LOG2(203),
  MATH_NEGATIVE_DOUBLE(204),
  MATH_NEGATIVE_LONG(205),
  MATH_PI(206),
  MATH_PMOD_DOUBLE_DOUBLE(207),
  MATH_PMOD_LONG_LONG(208),
  MATH_POSITIVE_DOUBLE(209),
  MATH_POSITIVE_LONG(210),
  MATH_POW(211),
  MATH_QUOTIENT_DOUBLE_DOUBLE(212),
  MATH_QUOTIENT_LONG_LONG(213),
  MATH_RADIANS(214),
  MATH_RAND(215),
  MATH_RAND_INT(216),
  MATH_ROUND_DOUBLE(217),
  MATH_ROUND_DOUBLE_INT(218),
  MATH_SIGN(219),
  MATH_SIN(220),
  MATH_SQRT(221),
  MATH_TAN(222),
  MATH_UNHEX(223),
  MOD_CHAR_CHAR(224),
  MOD_INT_INT(225),
  MOD_LONG_LONG(226),
  MOD_SHORT_SHORT(227),
  MULTIPLY_DOUBLE_DOUBLE(228),
  MULTIPLY_LONG_LONG(229),
  NE_BOOL_BOOL(230),
  NE_CHAR_CHAR(231),
  NE_DOUBLE_DOUBLE(232),
  NE_FLOAT_FLOAT(233),
  NE_INT_INT(234),
  NE_LONG_LONG(235),
  NE_SHORT_SHORT(236),
  NE_STRINGVALUE_STRINGVALUE(237),
  NE_TIMESTAMPVALUE_TIMESTAMPVALUE(238),
  REGEX(239),
  STRING_ASCII(240),
  STRING_CONCAT(241),
  STRING_CONCAT_WS(242),
  STRING_FIND_IN_SET(243),
  STRING_INSTR(244),
  STRING_LEFT_STRINGVALUE_INT(245),
  STRING_LEFT_STRINGVALUE_LONG(246),
  STRING_LENGTH(247),
  STRING_LOCATE_STRINGVALUE_STRINGVALUE(248),
  STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT(249),
  STRING_LOCATE_STRINGVALUE_STRINGVALUE_LONG(250),
  STRING_LOWER(251),
  STRING_LPAD_STRINGVALUE_INT_STRINGVALUE(252),
  STRING_LPAD_STRINGVALUE_LONG_STRINGVALUE(253),
  STRING_LTRIM(254),
  STRING_PARSE_URL_STRINGVALUE_STRINGVALUE(255),
  STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE(256),
  STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_INT(257),
  STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_LONG(258),
  STRING_REGEXP_REPLACE(259),
  STRING_REPEAT_STRINGVALUE_INT(260),
  STRING_REPEAT_STRINGVALUE_LONG(261),
  STRING_REVERSE(262),
  STRING_RIGHT_STRINGVALUE_INT(263),
  STRING_RIGHT_STRINGVALUE_LONG(264),
  STRING_RPAD_STRINGVALUE_INT_STRINGVALUE(265),
  STRING_RPAD_STRINGVALUE_LONG_STRINGVALUE(266),
  STRING_RTRIM(267),
  STRING_SPACE_INT(268),
  STRING_SPACE_LONG(269),
  STRING_SUBSTRING_STRINGVALUE_INT(270),
  STRING_SUBSTRING_STRINGVALUE_INT_INT(271),
  STRING_SUBSTRING_STRINGVALUE_LONG(272),
  STRING_SUBSTRING_STRINGVALUE_LONG_LONG(273),
  STRING_TRANSLATE(274),
  STRING_TRIM(275),
  STRING_UPPER(276),
  SUBTRACT_DOUBLE_DOUBLE(277),
  SUBTRACT_LONG_LONG(278),
  TIMESTAMP_DAYOFMONTH(279),
  TIMESTAMP_DAYOFWEEK(280),
  TIMESTAMP_DAYOFYEAR(281),
  TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_INT(282),
  TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_LONG(283),
  TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_INT(284),
  TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_LONG(285),
  TIMESTAMP_DIFF(286),
  TIMESTAMP_HOUR(287),
  TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_INT(288),
  TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_LONG(289),
  TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_INT(290),
  TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_LONG(291),
  TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_INT(292),
  TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_LONG(293),
  TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_INT(294),
  TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_LONG(295),
  TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_INT(296),
  TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_LONG(297),
  TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_INT(298),
  TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_LONG(299),
  TIMESTAMP_MINUTE(300),
  TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_INT(301),
  TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_LONG(302),
  TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_INT(303),
  TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_LONG(304),
  TIMESTAMP_MONTH(305),
  TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_INT(306),
  TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_LONG(307),
  TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_INT(308),
  TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_LONG(309),
  TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_INT(310),
  TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_LONG(311),
  TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_INT(312),
  TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_LONG(313),
  TIMESTAMP_NOW(314),
  TIMESTAMP_SECOND(315),
  TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_INT(316),
  TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_LONG(317),
  TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_INT(318),
  TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_LONG(319),
  TIMESTAMP_TO_DATE(320),
  TIMESTAMP_WEEKOFYEAR(321),
  TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_INT(322),
  TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_LONG(323),
  TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_INT(324),
  TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_LONG(325),
  TIMESTAMP_YEAR(326),
  TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_INT(327),
  TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_LONG(328),
  TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_INT(329),
  TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_LONG(330),
  TO_UTC_TIMESTAMP(331),
  UNIX_TIMESTAMP(332),
  UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE(333),
  UNIX_TIMESTAMP_TIMESTAMPVALUE(334),
  UTILITY_SLEEP(335),
  UTILITY_USER(336),
  UTILITY_VERSION(337),
  LAST_OPCODE(338);

  private final int value;

  private TExprOpcode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TExprOpcode findByValue(int value) { 
    switch (value) {
      case 0:
        return INVALID_OPCODE;
      case 1:
        return ADD_DOUBLE_DOUBLE;
      case 2:
        return ADD_LONG_LONG;
      case 3:
        return BITAND_CHAR_CHAR;
      case 4:
        return BITAND_INT_INT;
      case 5:
        return BITAND_LONG_LONG;
      case 6:
        return BITAND_SHORT_SHORT;
      case 7:
        return BITNOT_CHAR;
      case 8:
        return BITNOT_INT;
      case 9:
        return BITNOT_LONG;
      case 10:
        return BITNOT_SHORT;
      case 11:
        return BITOR_CHAR_CHAR;
      case 12:
        return BITOR_INT_INT;
      case 13:
        return BITOR_LONG_LONG;
      case 14:
        return BITOR_SHORT_SHORT;
      case 15:
        return BITXOR_CHAR_CHAR;
      case 16:
        return BITXOR_INT_INT;
      case 17:
        return BITXOR_LONG_LONG;
      case 18:
        return BITXOR_SHORT_SHORT;
      case 19:
        return CASE_BOOL;
      case 20:
        return CASE_CHAR;
      case 21:
        return CASE_DOUBLE;
      case 22:
        return CASE_FLOAT;
      case 23:
        return CASE_INT;
      case 24:
        return CASE_LONG;
      case 25:
        return CASE_SHORT;
      case 26:
        return CASE_STRINGVALUE;
      case 27:
        return CASE_TIMESTAMPVALUE;
      case 28:
        return CAST_BOOL_BOOL;
      case 29:
        return CAST_BOOL_CHAR;
      case 30:
        return CAST_BOOL_DOUBLE;
      case 31:
        return CAST_BOOL_FLOAT;
      case 32:
        return CAST_BOOL_INT;
      case 33:
        return CAST_BOOL_LONG;
      case 34:
        return CAST_BOOL_SHORT;
      case 35:
        return CAST_BOOL_STRINGVALUE;
      case 36:
        return CAST_BOOL_TIMESTAMPVALUE;
      case 37:
        return CAST_CHAR_BOOL;
      case 38:
        return CAST_CHAR_CHAR;
      case 39:
        return CAST_CHAR_DOUBLE;
      case 40:
        return CAST_CHAR_FLOAT;
      case 41:
        return CAST_CHAR_INT;
      case 42:
        return CAST_CHAR_LONG;
      case 43:
        return CAST_CHAR_SHORT;
      case 44:
        return CAST_CHAR_STRINGVALUE;
      case 45:
        return CAST_CHAR_TIMESTAMPVALUE;
      case 46:
        return CAST_DOUBLE_BOOL;
      case 47:
        return CAST_DOUBLE_CHAR;
      case 48:
        return CAST_DOUBLE_DOUBLE;
      case 49:
        return CAST_DOUBLE_FLOAT;
      case 50:
        return CAST_DOUBLE_INT;
      case 51:
        return CAST_DOUBLE_LONG;
      case 52:
        return CAST_DOUBLE_SHORT;
      case 53:
        return CAST_DOUBLE_STRINGVALUE;
      case 54:
        return CAST_DOUBLE_TIMESTAMPVALUE;
      case 55:
        return CAST_FLOAT_BOOL;
      case 56:
        return CAST_FLOAT_CHAR;
      case 57:
        return CAST_FLOAT_DOUBLE;
      case 58:
        return CAST_FLOAT_FLOAT;
      case 59:
        return CAST_FLOAT_INT;
      case 60:
        return CAST_FLOAT_LONG;
      case 61:
        return CAST_FLOAT_SHORT;
      case 62:
        return CAST_FLOAT_STRINGVALUE;
      case 63:
        return CAST_FLOAT_TIMESTAMPVALUE;
      case 64:
        return CAST_INT_BOOL;
      case 65:
        return CAST_INT_CHAR;
      case 66:
        return CAST_INT_DOUBLE;
      case 67:
        return CAST_INT_FLOAT;
      case 68:
        return CAST_INT_INT;
      case 69:
        return CAST_INT_LONG;
      case 70:
        return CAST_INT_SHORT;
      case 71:
        return CAST_INT_STRINGVALUE;
      case 72:
        return CAST_INT_TIMESTAMPVALUE;
      case 73:
        return CAST_LONG_BOOL;
      case 74:
        return CAST_LONG_CHAR;
      case 75:
        return CAST_LONG_DOUBLE;
      case 76:
        return CAST_LONG_FLOAT;
      case 77:
        return CAST_LONG_INT;
      case 78:
        return CAST_LONG_LONG;
      case 79:
        return CAST_LONG_SHORT;
      case 80:
        return CAST_LONG_STRINGVALUE;
      case 81:
        return CAST_LONG_TIMESTAMPVALUE;
      case 82:
        return CAST_SHORT_BOOL;
      case 83:
        return CAST_SHORT_CHAR;
      case 84:
        return CAST_SHORT_DOUBLE;
      case 85:
        return CAST_SHORT_FLOAT;
      case 86:
        return CAST_SHORT_INT;
      case 87:
        return CAST_SHORT_LONG;
      case 88:
        return CAST_SHORT_SHORT;
      case 89:
        return CAST_SHORT_STRINGVALUE;
      case 90:
        return CAST_SHORT_TIMESTAMPVALUE;
      case 91:
        return CAST_STRINGVALUE_CHAR;
      case 92:
        return CAST_STRINGVALUE_DOUBLE;
      case 93:
        return CAST_STRINGVALUE_FLOAT;
      case 94:
        return CAST_STRINGVALUE_INT;
      case 95:
        return CAST_STRINGVALUE_LONG;
      case 96:
        return CAST_STRINGVALUE_SHORT;
      case 97:
        return CAST_STRINGVALUE_TIMESTAMPVALUE;
      case 98:
        return CAST_TIMESTAMPVALUE_BOOL;
      case 99:
        return CAST_TIMESTAMPVALUE_CHAR;
      case 100:
        return CAST_TIMESTAMPVALUE_DOUBLE;
      case 101:
        return CAST_TIMESTAMPVALUE_FLOAT;
      case 102:
        return CAST_TIMESTAMPVALUE_INT;
      case 103:
        return CAST_TIMESTAMPVALUE_LONG;
      case 104:
        return CAST_TIMESTAMPVALUE_SHORT;
      case 105:
        return CAST_TIMESTAMPVALUE_STRINGVALUE;
      case 106:
        return COMPOUND_AND;
      case 107:
        return COMPOUND_NOT;
      case 108:
        return COMPOUND_OR;
      case 109:
        return CONDITIONAL_COALESCE_BOOL_VARARGS;
      case 110:
        return CONDITIONAL_COALESCE_DOUBLE_VARARGS;
      case 111:
        return CONDITIONAL_COALESCE_LONG_VARARGS;
      case 112:
        return CONDITIONAL_COALESCE_STRINGVALUE_VARARGS;
      case 113:
        return CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS;
      case 114:
        return CONDITIONAL_IF_BOOL_BOOL_BOOL;
      case 115:
        return CONDITIONAL_IF_BOOL_CHAR_CHAR;
      case 116:
        return CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE;
      case 117:
        return CONDITIONAL_IF_BOOL_FLOAT_FLOAT;
      case 118:
        return CONDITIONAL_IF_BOOL_INT_INT;
      case 119:
        return CONDITIONAL_IF_BOOL_LONG_LONG;
      case 120:
        return CONDITIONAL_IF_BOOL_SHORT_SHORT;
      case 121:
        return CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE;
      case 122:
        return CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 123:
        return CONDITIONAL_ISNULL_BOOL_BOOL;
      case 124:
        return CONDITIONAL_ISNULL_DOUBLE_DOUBLE;
      case 125:
        return CONDITIONAL_ISNULL_INT_INT;
      case 126:
        return CONDITIONAL_ISNULL_LONG_LONG;
      case 127:
        return CONDITIONAL_ISNULL_STRINGVALUE_STRINGVALUE;
      case 128:
        return CONDITIONAL_ISNULL_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 129:
        return CONSTANT_REGEX;
      case 130:
        return CONSTANT_SUBSTRING;
      case 131:
        return DIVIDE;
      case 132:
        return EQ_BOOL_BOOL;
      case 133:
        return EQ_CHAR_CHAR;
      case 134:
        return EQ_DOUBLE_DOUBLE;
      case 135:
        return EQ_FLOAT_FLOAT;
      case 136:
        return EQ_INT_INT;
      case 137:
        return EQ_LONG_LONG;
      case 138:
        return EQ_SHORT_SHORT;
      case 139:
        return EQ_STRINGVALUE_STRINGVALUE;
      case 140:
        return EQ_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 141:
        return FROM_UNIXTIME_INT;
      case 142:
        return FROM_UNIXTIME_INT_STRINGVALUE;
      case 143:
        return FROM_UTC_TIMESTAMP;
      case 144:
        return GE_BOOL_BOOL;
      case 145:
        return GE_CHAR_CHAR;
      case 146:
        return GE_DOUBLE_DOUBLE;
      case 147:
        return GE_FLOAT_FLOAT;
      case 148:
        return GE_INT_INT;
      case 149:
        return GE_LONG_LONG;
      case 150:
        return GE_SHORT_SHORT;
      case 151:
        return GE_STRINGVALUE_STRINGVALUE;
      case 152:
        return GE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 153:
        return GT_BOOL_BOOL;
      case 154:
        return GT_CHAR_CHAR;
      case 155:
        return GT_DOUBLE_DOUBLE;
      case 156:
        return GT_FLOAT_FLOAT;
      case 157:
        return GT_INT_INT;
      case 158:
        return GT_LONG_LONG;
      case 159:
        return GT_SHORT_SHORT;
      case 160:
        return GT_STRINGVALUE_STRINGVALUE;
      case 161:
        return GT_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 162:
        return INT_DIVIDE_CHAR_CHAR;
      case 163:
        return INT_DIVIDE_INT_INT;
      case 164:
        return INT_DIVIDE_LONG_LONG;
      case 165:
        return INT_DIVIDE_SHORT_SHORT;
      case 166:
        return LE_BOOL_BOOL;
      case 167:
        return LE_CHAR_CHAR;
      case 168:
        return LE_DOUBLE_DOUBLE;
      case 169:
        return LE_FLOAT_FLOAT;
      case 170:
        return LE_INT_INT;
      case 171:
        return LE_LONG_LONG;
      case 172:
        return LE_SHORT_SHORT;
      case 173:
        return LE_STRINGVALUE_STRINGVALUE;
      case 174:
        return LE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 175:
        return LIKE;
      case 176:
        return LT_BOOL_BOOL;
      case 177:
        return LT_CHAR_CHAR;
      case 178:
        return LT_DOUBLE_DOUBLE;
      case 179:
        return LT_FLOAT_FLOAT;
      case 180:
        return LT_INT_INT;
      case 181:
        return LT_LONG_LONG;
      case 182:
        return LT_SHORT_SHORT;
      case 183:
        return LT_STRINGVALUE_STRINGVALUE;
      case 184:
        return LT_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 185:
        return MATH_ABS;
      case 186:
        return MATH_ACOS;
      case 187:
        return MATH_ASIN;
      case 188:
        return MATH_ATAN;
      case 189:
        return MATH_BIN;
      case 190:
        return MATH_CEIL;
      case 191:
        return MATH_CONV_LONG_CHAR_CHAR;
      case 192:
        return MATH_CONV_STRINGVALUE_CHAR_CHAR;
      case 193:
        return MATH_COS;
      case 194:
        return MATH_DEGREES;
      case 195:
        return MATH_E;
      case 196:
        return MATH_EXP;
      case 197:
        return MATH_FLOOR;
      case 198:
        return MATH_HEX_LONG;
      case 199:
        return MATH_HEX_STRINGVALUE;
      case 200:
        return MATH_LN;
      case 201:
        return MATH_LOG;
      case 202:
        return MATH_LOG10;
      case 203:
        return MATH_LOG2;
      case 204:
        return MATH_NEGATIVE_DOUBLE;
      case 205:
        return MATH_NEGATIVE_LONG;
      case 206:
        return MATH_PI;
      case 207:
        return MATH_PMOD_DOUBLE_DOUBLE;
      case 208:
        return MATH_PMOD_LONG_LONG;
      case 209:
        return MATH_POSITIVE_DOUBLE;
      case 210:
        return MATH_POSITIVE_LONG;
      case 211:
        return MATH_POW;
      case 212:
        return MATH_QUOTIENT_DOUBLE_DOUBLE;
      case 213:
        return MATH_QUOTIENT_LONG_LONG;
      case 214:
        return MATH_RADIANS;
      case 215:
        return MATH_RAND;
      case 216:
        return MATH_RAND_INT;
      case 217:
        return MATH_ROUND_DOUBLE;
      case 218:
        return MATH_ROUND_DOUBLE_INT;
      case 219:
        return MATH_SIGN;
      case 220:
        return MATH_SIN;
      case 221:
        return MATH_SQRT;
      case 222:
        return MATH_TAN;
      case 223:
        return MATH_UNHEX;
      case 224:
        return MOD_CHAR_CHAR;
      case 225:
        return MOD_INT_INT;
      case 226:
        return MOD_LONG_LONG;
      case 227:
        return MOD_SHORT_SHORT;
      case 228:
        return MULTIPLY_DOUBLE_DOUBLE;
      case 229:
        return MULTIPLY_LONG_LONG;
      case 230:
        return NE_BOOL_BOOL;
      case 231:
        return NE_CHAR_CHAR;
      case 232:
        return NE_DOUBLE_DOUBLE;
      case 233:
        return NE_FLOAT_FLOAT;
      case 234:
        return NE_INT_INT;
      case 235:
        return NE_LONG_LONG;
      case 236:
        return NE_SHORT_SHORT;
      case 237:
        return NE_STRINGVALUE_STRINGVALUE;
      case 238:
        return NE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 239:
        return REGEX;
      case 240:
        return STRING_ASCII;
      case 241:
        return STRING_CONCAT;
      case 242:
        return STRING_CONCAT_WS;
      case 243:
        return STRING_FIND_IN_SET;
      case 244:
        return STRING_INSTR;
      case 245:
        return STRING_LEFT_STRINGVALUE_INT;
      case 246:
        return STRING_LEFT_STRINGVALUE_LONG;
      case 247:
        return STRING_LENGTH;
      case 248:
        return STRING_LOCATE_STRINGVALUE_STRINGVALUE;
      case 249:
        return STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT;
      case 250:
        return STRING_LOCATE_STRINGVALUE_STRINGVALUE_LONG;
      case 251:
        return STRING_LOWER;
      case 252:
        return STRING_LPAD_STRINGVALUE_INT_STRINGVALUE;
      case 253:
        return STRING_LPAD_STRINGVALUE_LONG_STRINGVALUE;
      case 254:
        return STRING_LTRIM;
      case 255:
        return STRING_PARSE_URL_STRINGVALUE_STRINGVALUE;
      case 256:
        return STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE;
      case 257:
        return STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_INT;
      case 258:
        return STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_LONG;
      case 259:
        return STRING_REGEXP_REPLACE;
      case 260:
        return STRING_REPEAT_STRINGVALUE_INT;
      case 261:
        return STRING_REPEAT_STRINGVALUE_LONG;
      case 262:
        return STRING_REVERSE;
      case 263:
        return STRING_RIGHT_STRINGVALUE_INT;
      case 264:
        return STRING_RIGHT_STRINGVALUE_LONG;
      case 265:
        return STRING_RPAD_STRINGVALUE_INT_STRINGVALUE;
      case 266:
        return STRING_RPAD_STRINGVALUE_LONG_STRINGVALUE;
      case 267:
        return STRING_RTRIM;
      case 268:
        return STRING_SPACE_INT;
      case 269:
        return STRING_SPACE_LONG;
      case 270:
        return STRING_SUBSTRING_STRINGVALUE_INT;
      case 271:
        return STRING_SUBSTRING_STRINGVALUE_INT_INT;
      case 272:
        return STRING_SUBSTRING_STRINGVALUE_LONG;
      case 273:
        return STRING_SUBSTRING_STRINGVALUE_LONG_LONG;
      case 274:
        return STRING_TRANSLATE;
      case 275:
        return STRING_TRIM;
      case 276:
        return STRING_UPPER;
      case 277:
        return SUBTRACT_DOUBLE_DOUBLE;
      case 278:
        return SUBTRACT_LONG_LONG;
      case 279:
        return TIMESTAMP_DAYOFMONTH;
      case 280:
        return TIMESTAMP_DAYOFWEEK;
      case 281:
        return TIMESTAMP_DAYOFYEAR;
      case 282:
        return TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_INT;
      case 283:
        return TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_LONG;
      case 284:
        return TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_INT;
      case 285:
        return TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_LONG;
      case 286:
        return TIMESTAMP_DIFF;
      case 287:
        return TIMESTAMP_HOUR;
      case 288:
        return TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_INT;
      case 289:
        return TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_LONG;
      case 290:
        return TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_INT;
      case 291:
        return TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_LONG;
      case 292:
        return TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_INT;
      case 293:
        return TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_LONG;
      case 294:
        return TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_INT;
      case 295:
        return TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_LONG;
      case 296:
        return TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_INT;
      case 297:
        return TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_LONG;
      case 298:
        return TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_INT;
      case 299:
        return TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_LONG;
      case 300:
        return TIMESTAMP_MINUTE;
      case 301:
        return TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_INT;
      case 302:
        return TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_LONG;
      case 303:
        return TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_INT;
      case 304:
        return TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_LONG;
      case 305:
        return TIMESTAMP_MONTH;
      case 306:
        return TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_INT;
      case 307:
        return TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_LONG;
      case 308:
        return TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_INT;
      case 309:
        return TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_LONG;
      case 310:
        return TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_INT;
      case 311:
        return TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_LONG;
      case 312:
        return TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_INT;
      case 313:
        return TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_LONG;
      case 314:
        return TIMESTAMP_NOW;
      case 315:
        return TIMESTAMP_SECOND;
      case 316:
        return TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_INT;
      case 317:
        return TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_LONG;
      case 318:
        return TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_INT;
      case 319:
        return TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_LONG;
      case 320:
        return TIMESTAMP_TO_DATE;
      case 321:
        return TIMESTAMP_WEEKOFYEAR;
      case 322:
        return TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_INT;
      case 323:
        return TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_LONG;
      case 324:
        return TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_INT;
      case 325:
        return TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_LONG;
      case 326:
        return TIMESTAMP_YEAR;
      case 327:
        return TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_INT;
      case 328:
        return TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_LONG;
      case 329:
        return TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_INT;
      case 330:
        return TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_LONG;
      case 331:
        return TO_UTC_TIMESTAMP;
      case 332:
        return UNIX_TIMESTAMP;
      case 333:
        return UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE;
      case 334:
        return UNIX_TIMESTAMP_TIMESTAMPVALUE;
      case 335:
        return UTILITY_SLEEP;
      case 336:
        return UTILITY_USER;
      case 337:
        return UTILITY_VERSION;
      case 338:
        return LAST_OPCODE;
      default:
        return null;
    }
  }
}
