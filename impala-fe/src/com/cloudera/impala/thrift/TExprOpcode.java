/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum TExprOpcode implements org.apache.thrift.TEnum {
  INVALID_OPCODE(0),
  ADD_DOUBLE_DOUBLE(1),
  ADD_LONG_LONG(2),
  BITAND_CHAR_CHAR(3),
  BITAND_INT_INT(4),
  BITAND_LONG_LONG(5),
  BITAND_SHORT_SHORT(6),
  BITNOT_CHAR(7),
  BITNOT_INT(8),
  BITNOT_LONG(9),
  BITNOT_SHORT(10),
  BITOR_CHAR_CHAR(11),
  BITOR_INT_INT(12),
  BITOR_LONG_LONG(13),
  BITOR_SHORT_SHORT(14),
  BITXOR_CHAR_CHAR(15),
  BITXOR_INT_INT(16),
  BITXOR_LONG_LONG(17),
  BITXOR_SHORT_SHORT(18),
  CASE_BOOL(19),
  CASE_CHAR(20),
  CASE_DOUBLE(21),
  CASE_FLOAT(22),
  CASE_INT(23),
  CASE_LONG(24),
  CASE_SHORT(25),
  CASE_STRINGVALUE(26),
  CASE_TIMESTAMPVALUE(27),
  CAST_BOOL_BOOL(28),
  CAST_BOOL_CHAR(29),
  CAST_BOOL_DOUBLE(30),
  CAST_BOOL_FLOAT(31),
  CAST_BOOL_INT(32),
  CAST_BOOL_LONG(33),
  CAST_BOOL_SHORT(34),
  CAST_BOOL_STRINGVALUE(35),
  CAST_BOOL_TIMESTAMPVALUE(36),
  CAST_CHAR_BOOL(37),
  CAST_CHAR_CHAR(38),
  CAST_CHAR_DOUBLE(39),
  CAST_CHAR_FLOAT(40),
  CAST_CHAR_INT(41),
  CAST_CHAR_LONG(42),
  CAST_CHAR_SHORT(43),
  CAST_CHAR_STRINGVALUE(44),
  CAST_CHAR_TIMESTAMPVALUE(45),
  CAST_DOUBLE_BOOL(46),
  CAST_DOUBLE_CHAR(47),
  CAST_DOUBLE_DOUBLE(48),
  CAST_DOUBLE_FLOAT(49),
  CAST_DOUBLE_INT(50),
  CAST_DOUBLE_LONG(51),
  CAST_DOUBLE_SHORT(52),
  CAST_DOUBLE_STRINGVALUE(53),
  CAST_DOUBLE_TIMESTAMPVALUE(54),
  CAST_FLOAT_BOOL(55),
  CAST_FLOAT_CHAR(56),
  CAST_FLOAT_DOUBLE(57),
  CAST_FLOAT_FLOAT(58),
  CAST_FLOAT_INT(59),
  CAST_FLOAT_LONG(60),
  CAST_FLOAT_SHORT(61),
  CAST_FLOAT_STRINGVALUE(62),
  CAST_FLOAT_TIMESTAMPVALUE(63),
  CAST_INT_BOOL(64),
  CAST_INT_CHAR(65),
  CAST_INT_DOUBLE(66),
  CAST_INT_FLOAT(67),
  CAST_INT_INT(68),
  CAST_INT_LONG(69),
  CAST_INT_SHORT(70),
  CAST_INT_STRINGVALUE(71),
  CAST_INT_TIMESTAMPVALUE(72),
  CAST_LONG_BOOL(73),
  CAST_LONG_CHAR(74),
  CAST_LONG_DOUBLE(75),
  CAST_LONG_FLOAT(76),
  CAST_LONG_INT(77),
  CAST_LONG_LONG(78),
  CAST_LONG_SHORT(79),
  CAST_LONG_STRINGVALUE(80),
  CAST_LONG_TIMESTAMPVALUE(81),
  CAST_SHORT_BOOL(82),
  CAST_SHORT_CHAR(83),
  CAST_SHORT_DOUBLE(84),
  CAST_SHORT_FLOAT(85),
  CAST_SHORT_INT(86),
  CAST_SHORT_LONG(87),
  CAST_SHORT_SHORT(88),
  CAST_SHORT_STRINGVALUE(89),
  CAST_SHORT_TIMESTAMPVALUE(90),
  CAST_STRINGVALUE_CHAR(91),
  CAST_STRINGVALUE_DOUBLE(92),
  CAST_STRINGVALUE_FLOAT(93),
  CAST_STRINGVALUE_INT(94),
  CAST_STRINGVALUE_LONG(95),
  CAST_STRINGVALUE_SHORT(96),
  CAST_STRINGVALUE_TIMESTAMPVALUE(97),
  CAST_TIMESTAMPVALUE_BOOL(98),
  CAST_TIMESTAMPVALUE_CHAR(99),
  CAST_TIMESTAMPVALUE_DOUBLE(100),
  CAST_TIMESTAMPVALUE_FLOAT(101),
  CAST_TIMESTAMPVALUE_INT(102),
  CAST_TIMESTAMPVALUE_LONG(103),
  CAST_TIMESTAMPVALUE_SHORT(104),
  CAST_TIMESTAMPVALUE_STRINGVALUE(105),
  COMPOUND_AND(106),
  COMPOUND_NOT(107),
  COMPOUND_OR(108),
  CONDITIONAL_COALESCE_BOOL_VARARGS(109),
  CONDITIONAL_COALESCE_DOUBLE_VARARGS(110),
  CONDITIONAL_COALESCE_LONG_VARARGS(111),
  CONDITIONAL_COALESCE_STRINGVALUE_VARARGS(112),
  CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS(113),
  CONDITIONAL_IF_BOOL_BOOL_BOOL(114),
  CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE(115),
  CONDITIONAL_IF_BOOL_LONG_LONG(116),
  CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE(117),
  CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE(118),
  CONSTANT_REGEX(119),
  CONSTANT_SUBSTRING(120),
  DIVIDE(121),
  EQ_BOOL_BOOL(122),
  EQ_CHAR_CHAR(123),
  EQ_DOUBLE_DOUBLE(124),
  EQ_FLOAT_FLOAT(125),
  EQ_INT_INT(126),
  EQ_LONG_LONG(127),
  EQ_SHORT_SHORT(128),
  EQ_STRINGVALUE_STRINGVALUE(129),
  EQ_TIMESTAMPVALUE_TIMESTAMPVALUE(130),
  FROM_UNIXTIME_INT(131),
  FROM_UNIXTIME_INT_STRINGVALUE(132),
  FROM_UTC_TIMESTAMP(133),
  GE_BOOL_BOOL(134),
  GE_CHAR_CHAR(135),
  GE_DOUBLE_DOUBLE(136),
  GE_FLOAT_FLOAT(137),
  GE_INT_INT(138),
  GE_LONG_LONG(139),
  GE_SHORT_SHORT(140),
  GE_STRINGVALUE_STRINGVALUE(141),
  GE_TIMESTAMPVALUE_TIMESTAMPVALUE(142),
  GT_BOOL_BOOL(143),
  GT_CHAR_CHAR(144),
  GT_DOUBLE_DOUBLE(145),
  GT_FLOAT_FLOAT(146),
  GT_INT_INT(147),
  GT_LONG_LONG(148),
  GT_SHORT_SHORT(149),
  GT_STRINGVALUE_STRINGVALUE(150),
  GT_TIMESTAMPVALUE_TIMESTAMPVALUE(151),
  INT_DIVIDE_CHAR_CHAR(152),
  INT_DIVIDE_INT_INT(153),
  INT_DIVIDE_LONG_LONG(154),
  INT_DIVIDE_SHORT_SHORT(155),
  LE_BOOL_BOOL(156),
  LE_CHAR_CHAR(157),
  LE_DOUBLE_DOUBLE(158),
  LE_FLOAT_FLOAT(159),
  LE_INT_INT(160),
  LE_LONG_LONG(161),
  LE_SHORT_SHORT(162),
  LE_STRINGVALUE_STRINGVALUE(163),
  LE_TIMESTAMPVALUE_TIMESTAMPVALUE(164),
  LIKE(165),
  LT_BOOL_BOOL(166),
  LT_CHAR_CHAR(167),
  LT_DOUBLE_DOUBLE(168),
  LT_FLOAT_FLOAT(169),
  LT_INT_INT(170),
  LT_LONG_LONG(171),
  LT_SHORT_SHORT(172),
  LT_STRINGVALUE_STRINGVALUE(173),
  LT_TIMESTAMPVALUE_TIMESTAMPVALUE(174),
  MATH_ABS(175),
  MATH_ACOS(176),
  MATH_ASIN(177),
  MATH_ATAN(178),
  MATH_BIN(179),
  MATH_CEIL(180),
  MATH_CONV_LONG_CHAR_CHAR(181),
  MATH_CONV_STRINGVALUE_CHAR_CHAR(182),
  MATH_COS(183),
  MATH_DEGREES(184),
  MATH_E(185),
  MATH_EXP(186),
  MATH_FLOOR(187),
  MATH_HEX_LONG(188),
  MATH_HEX_STRINGVALUE(189),
  MATH_LN(190),
  MATH_LOG(191),
  MATH_LOG10(192),
  MATH_LOG2(193),
  MATH_NEGATIVE_DOUBLE(194),
  MATH_NEGATIVE_LONG(195),
  MATH_PI(196),
  MATH_PMOD_DOUBLE_DOUBLE(197),
  MATH_PMOD_LONG_LONG(198),
  MATH_POSITIVE_DOUBLE(199),
  MATH_POSITIVE_LONG(200),
  MATH_POW(201),
  MATH_RADIANS(202),
  MATH_RAND(203),
  MATH_RAND_INT(204),
  MATH_ROUND_DOUBLE(205),
  MATH_ROUND_DOUBLE_INT(206),
  MATH_SIGN(207),
  MATH_SIN(208),
  MATH_SQRT(209),
  MATH_TAN(210),
  MATH_UNHEX(211),
  MOD_CHAR_CHAR(212),
  MOD_INT_INT(213),
  MOD_LONG_LONG(214),
  MOD_SHORT_SHORT(215),
  MULTIPLY_DOUBLE_DOUBLE(216),
  MULTIPLY_LONG_LONG(217),
  NE_BOOL_BOOL(218),
  NE_CHAR_CHAR(219),
  NE_DOUBLE_DOUBLE(220),
  NE_FLOAT_FLOAT(221),
  NE_INT_INT(222),
  NE_LONG_LONG(223),
  NE_SHORT_SHORT(224),
  NE_STRINGVALUE_STRINGVALUE(225),
  NE_TIMESTAMPVALUE_TIMESTAMPVALUE(226),
  REGEX(227),
  STRING_ASCII(228),
  STRING_CONCAT(229),
  STRING_CONCAT_WS(230),
  STRING_FIND_IN_SET(231),
  STRING_INSTR(232),
  STRING_LEFT(233),
  STRING_LENGTH(234),
  STRING_LOCATE_STRINGVALUE_STRINGVALUE(235),
  STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT(236),
  STRING_LOWER(237),
  STRING_LPAD(238),
  STRING_LTRIM(239),
  STRING_PARSE_URL_STRINGVALUE_STRINGVALUE(240),
  STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE(241),
  STRING_REGEXP_EXTRACT(242),
  STRING_REGEXP_REPLACE(243),
  STRING_REPEAT(244),
  STRING_REVERSE(245),
  STRING_RIGHT(246),
  STRING_RPAD(247),
  STRING_RTRIM(248),
  STRING_SPACE(249),
  STRING_SUBSTRING_STRINGVALUE_INT(250),
  STRING_SUBSTRING_STRINGVALUE_INT_INT(251),
  STRING_TRIM(252),
  STRING_UPPER(253),
  SUBTRACT_DOUBLE_DOUBLE(254),
  SUBTRACT_LONG_LONG(255),
  TIMESTAMP_DAY(256),
  TIMESTAMP_DAYOFMONTH(257),
  TIMESTAMP_DAYS_ADD(258),
  TIMESTAMP_DAYS_SUB(259),
  TIMESTAMP_DIFF(260),
  TIMESTAMP_HOUR(261),
  TIMESTAMP_HOURS_ADD(262),
  TIMESTAMP_HOURS_SUB(263),
  TIMESTAMP_MICROSECONDS_ADD(264),
  TIMESTAMP_MICROSECONDS_SUB(265),
  TIMESTAMP_MILLISECONDS_ADD(266),
  TIMESTAMP_MILLISECONDS_SUB(267),
  TIMESTAMP_MINUTE(268),
  TIMESTAMP_MINUTES_ADD(269),
  TIMESTAMP_MINUTES_SUB(270),
  TIMESTAMP_MONTH(271),
  TIMESTAMP_MONTHS_ADD(272),
  TIMESTAMP_MONTHS_SUB(273),
  TIMESTAMP_NANOSECONDS_ADD(274),
  TIMESTAMP_NANOSECONDS_SUB(275),
  TIMESTAMP_NOW(276),
  TIMESTAMP_SECOND(277),
  TIMESTAMP_SECONDS_ADD(278),
  TIMESTAMP_SECONDS_SUB(279),
  TIMESTAMP_TO_DATE(280),
  TIMESTAMP_WEEKOFYEAR(281),
  TIMESTAMP_WEEKS_ADD(282),
  TIMESTAMP_WEEKS_SUB(283),
  TIMESTAMP_YEAR(284),
  TIMESTAMP_YEARS_ADD(285),
  TIMESTAMP_YEARS_SUB(286),
  TO_UTC_TIMESTAMP(287),
  UNIX_TIMESTAMP(288),
  UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE(289),
  UNIX_TIMESTAMP_TIMESTAMPVALUE(290),
  UTILITY_VERSION(291),
  LAST_OPCODE(292);

  private final int value;

  private TExprOpcode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TExprOpcode findByValue(int value) { 
    switch (value) {
      case 0:
        return INVALID_OPCODE;
      case 1:
        return ADD_DOUBLE_DOUBLE;
      case 2:
        return ADD_LONG_LONG;
      case 3:
        return BITAND_CHAR_CHAR;
      case 4:
        return BITAND_INT_INT;
      case 5:
        return BITAND_LONG_LONG;
      case 6:
        return BITAND_SHORT_SHORT;
      case 7:
        return BITNOT_CHAR;
      case 8:
        return BITNOT_INT;
      case 9:
        return BITNOT_LONG;
      case 10:
        return BITNOT_SHORT;
      case 11:
        return BITOR_CHAR_CHAR;
      case 12:
        return BITOR_INT_INT;
      case 13:
        return BITOR_LONG_LONG;
      case 14:
        return BITOR_SHORT_SHORT;
      case 15:
        return BITXOR_CHAR_CHAR;
      case 16:
        return BITXOR_INT_INT;
      case 17:
        return BITXOR_LONG_LONG;
      case 18:
        return BITXOR_SHORT_SHORT;
      case 19:
        return CASE_BOOL;
      case 20:
        return CASE_CHAR;
      case 21:
        return CASE_DOUBLE;
      case 22:
        return CASE_FLOAT;
      case 23:
        return CASE_INT;
      case 24:
        return CASE_LONG;
      case 25:
        return CASE_SHORT;
      case 26:
        return CASE_STRINGVALUE;
      case 27:
        return CASE_TIMESTAMPVALUE;
      case 28:
        return CAST_BOOL_BOOL;
      case 29:
        return CAST_BOOL_CHAR;
      case 30:
        return CAST_BOOL_DOUBLE;
      case 31:
        return CAST_BOOL_FLOAT;
      case 32:
        return CAST_BOOL_INT;
      case 33:
        return CAST_BOOL_LONG;
      case 34:
        return CAST_BOOL_SHORT;
      case 35:
        return CAST_BOOL_STRINGVALUE;
      case 36:
        return CAST_BOOL_TIMESTAMPVALUE;
      case 37:
        return CAST_CHAR_BOOL;
      case 38:
        return CAST_CHAR_CHAR;
      case 39:
        return CAST_CHAR_DOUBLE;
      case 40:
        return CAST_CHAR_FLOAT;
      case 41:
        return CAST_CHAR_INT;
      case 42:
        return CAST_CHAR_LONG;
      case 43:
        return CAST_CHAR_SHORT;
      case 44:
        return CAST_CHAR_STRINGVALUE;
      case 45:
        return CAST_CHAR_TIMESTAMPVALUE;
      case 46:
        return CAST_DOUBLE_BOOL;
      case 47:
        return CAST_DOUBLE_CHAR;
      case 48:
        return CAST_DOUBLE_DOUBLE;
      case 49:
        return CAST_DOUBLE_FLOAT;
      case 50:
        return CAST_DOUBLE_INT;
      case 51:
        return CAST_DOUBLE_LONG;
      case 52:
        return CAST_DOUBLE_SHORT;
      case 53:
        return CAST_DOUBLE_STRINGVALUE;
      case 54:
        return CAST_DOUBLE_TIMESTAMPVALUE;
      case 55:
        return CAST_FLOAT_BOOL;
      case 56:
        return CAST_FLOAT_CHAR;
      case 57:
        return CAST_FLOAT_DOUBLE;
      case 58:
        return CAST_FLOAT_FLOAT;
      case 59:
        return CAST_FLOAT_INT;
      case 60:
        return CAST_FLOAT_LONG;
      case 61:
        return CAST_FLOAT_SHORT;
      case 62:
        return CAST_FLOAT_STRINGVALUE;
      case 63:
        return CAST_FLOAT_TIMESTAMPVALUE;
      case 64:
        return CAST_INT_BOOL;
      case 65:
        return CAST_INT_CHAR;
      case 66:
        return CAST_INT_DOUBLE;
      case 67:
        return CAST_INT_FLOAT;
      case 68:
        return CAST_INT_INT;
      case 69:
        return CAST_INT_LONG;
      case 70:
        return CAST_INT_SHORT;
      case 71:
        return CAST_INT_STRINGVALUE;
      case 72:
        return CAST_INT_TIMESTAMPVALUE;
      case 73:
        return CAST_LONG_BOOL;
      case 74:
        return CAST_LONG_CHAR;
      case 75:
        return CAST_LONG_DOUBLE;
      case 76:
        return CAST_LONG_FLOAT;
      case 77:
        return CAST_LONG_INT;
      case 78:
        return CAST_LONG_LONG;
      case 79:
        return CAST_LONG_SHORT;
      case 80:
        return CAST_LONG_STRINGVALUE;
      case 81:
        return CAST_LONG_TIMESTAMPVALUE;
      case 82:
        return CAST_SHORT_BOOL;
      case 83:
        return CAST_SHORT_CHAR;
      case 84:
        return CAST_SHORT_DOUBLE;
      case 85:
        return CAST_SHORT_FLOAT;
      case 86:
        return CAST_SHORT_INT;
      case 87:
        return CAST_SHORT_LONG;
      case 88:
        return CAST_SHORT_SHORT;
      case 89:
        return CAST_SHORT_STRINGVALUE;
      case 90:
        return CAST_SHORT_TIMESTAMPVALUE;
      case 91:
        return CAST_STRINGVALUE_CHAR;
      case 92:
        return CAST_STRINGVALUE_DOUBLE;
      case 93:
        return CAST_STRINGVALUE_FLOAT;
      case 94:
        return CAST_STRINGVALUE_INT;
      case 95:
        return CAST_STRINGVALUE_LONG;
      case 96:
        return CAST_STRINGVALUE_SHORT;
      case 97:
        return CAST_STRINGVALUE_TIMESTAMPVALUE;
      case 98:
        return CAST_TIMESTAMPVALUE_BOOL;
      case 99:
        return CAST_TIMESTAMPVALUE_CHAR;
      case 100:
        return CAST_TIMESTAMPVALUE_DOUBLE;
      case 101:
        return CAST_TIMESTAMPVALUE_FLOAT;
      case 102:
        return CAST_TIMESTAMPVALUE_INT;
      case 103:
        return CAST_TIMESTAMPVALUE_LONG;
      case 104:
        return CAST_TIMESTAMPVALUE_SHORT;
      case 105:
        return CAST_TIMESTAMPVALUE_STRINGVALUE;
      case 106:
        return COMPOUND_AND;
      case 107:
        return COMPOUND_NOT;
      case 108:
        return COMPOUND_OR;
      case 109:
        return CONDITIONAL_COALESCE_BOOL_VARARGS;
      case 110:
        return CONDITIONAL_COALESCE_DOUBLE_VARARGS;
      case 111:
        return CONDITIONAL_COALESCE_LONG_VARARGS;
      case 112:
        return CONDITIONAL_COALESCE_STRINGVALUE_VARARGS;
      case 113:
        return CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS;
      case 114:
        return CONDITIONAL_IF_BOOL_BOOL_BOOL;
      case 115:
        return CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE;
      case 116:
        return CONDITIONAL_IF_BOOL_LONG_LONG;
      case 117:
        return CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE;
      case 118:
        return CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 119:
        return CONSTANT_REGEX;
      case 120:
        return CONSTANT_SUBSTRING;
      case 121:
        return DIVIDE;
      case 122:
        return EQ_BOOL_BOOL;
      case 123:
        return EQ_CHAR_CHAR;
      case 124:
        return EQ_DOUBLE_DOUBLE;
      case 125:
        return EQ_FLOAT_FLOAT;
      case 126:
        return EQ_INT_INT;
      case 127:
        return EQ_LONG_LONG;
      case 128:
        return EQ_SHORT_SHORT;
      case 129:
        return EQ_STRINGVALUE_STRINGVALUE;
      case 130:
        return EQ_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 131:
        return FROM_UNIXTIME_INT;
      case 132:
        return FROM_UNIXTIME_INT_STRINGVALUE;
      case 133:
        return FROM_UTC_TIMESTAMP;
      case 134:
        return GE_BOOL_BOOL;
      case 135:
        return GE_CHAR_CHAR;
      case 136:
        return GE_DOUBLE_DOUBLE;
      case 137:
        return GE_FLOAT_FLOAT;
      case 138:
        return GE_INT_INT;
      case 139:
        return GE_LONG_LONG;
      case 140:
        return GE_SHORT_SHORT;
      case 141:
        return GE_STRINGVALUE_STRINGVALUE;
      case 142:
        return GE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 143:
        return GT_BOOL_BOOL;
      case 144:
        return GT_CHAR_CHAR;
      case 145:
        return GT_DOUBLE_DOUBLE;
      case 146:
        return GT_FLOAT_FLOAT;
      case 147:
        return GT_INT_INT;
      case 148:
        return GT_LONG_LONG;
      case 149:
        return GT_SHORT_SHORT;
      case 150:
        return GT_STRINGVALUE_STRINGVALUE;
      case 151:
        return GT_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 152:
        return INT_DIVIDE_CHAR_CHAR;
      case 153:
        return INT_DIVIDE_INT_INT;
      case 154:
        return INT_DIVIDE_LONG_LONG;
      case 155:
        return INT_DIVIDE_SHORT_SHORT;
      case 156:
        return LE_BOOL_BOOL;
      case 157:
        return LE_CHAR_CHAR;
      case 158:
        return LE_DOUBLE_DOUBLE;
      case 159:
        return LE_FLOAT_FLOAT;
      case 160:
        return LE_INT_INT;
      case 161:
        return LE_LONG_LONG;
      case 162:
        return LE_SHORT_SHORT;
      case 163:
        return LE_STRINGVALUE_STRINGVALUE;
      case 164:
        return LE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 165:
        return LIKE;
      case 166:
        return LT_BOOL_BOOL;
      case 167:
        return LT_CHAR_CHAR;
      case 168:
        return LT_DOUBLE_DOUBLE;
      case 169:
        return LT_FLOAT_FLOAT;
      case 170:
        return LT_INT_INT;
      case 171:
        return LT_LONG_LONG;
      case 172:
        return LT_SHORT_SHORT;
      case 173:
        return LT_STRINGVALUE_STRINGVALUE;
      case 174:
        return LT_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 175:
        return MATH_ABS;
      case 176:
        return MATH_ACOS;
      case 177:
        return MATH_ASIN;
      case 178:
        return MATH_ATAN;
      case 179:
        return MATH_BIN;
      case 180:
        return MATH_CEIL;
      case 181:
        return MATH_CONV_LONG_CHAR_CHAR;
      case 182:
        return MATH_CONV_STRINGVALUE_CHAR_CHAR;
      case 183:
        return MATH_COS;
      case 184:
        return MATH_DEGREES;
      case 185:
        return MATH_E;
      case 186:
        return MATH_EXP;
      case 187:
        return MATH_FLOOR;
      case 188:
        return MATH_HEX_LONG;
      case 189:
        return MATH_HEX_STRINGVALUE;
      case 190:
        return MATH_LN;
      case 191:
        return MATH_LOG;
      case 192:
        return MATH_LOG10;
      case 193:
        return MATH_LOG2;
      case 194:
        return MATH_NEGATIVE_DOUBLE;
      case 195:
        return MATH_NEGATIVE_LONG;
      case 196:
        return MATH_PI;
      case 197:
        return MATH_PMOD_DOUBLE_DOUBLE;
      case 198:
        return MATH_PMOD_LONG_LONG;
      case 199:
        return MATH_POSITIVE_DOUBLE;
      case 200:
        return MATH_POSITIVE_LONG;
      case 201:
        return MATH_POW;
      case 202:
        return MATH_RADIANS;
      case 203:
        return MATH_RAND;
      case 204:
        return MATH_RAND_INT;
      case 205:
        return MATH_ROUND_DOUBLE;
      case 206:
        return MATH_ROUND_DOUBLE_INT;
      case 207:
        return MATH_SIGN;
      case 208:
        return MATH_SIN;
      case 209:
        return MATH_SQRT;
      case 210:
        return MATH_TAN;
      case 211:
        return MATH_UNHEX;
      case 212:
        return MOD_CHAR_CHAR;
      case 213:
        return MOD_INT_INT;
      case 214:
        return MOD_LONG_LONG;
      case 215:
        return MOD_SHORT_SHORT;
      case 216:
        return MULTIPLY_DOUBLE_DOUBLE;
      case 217:
        return MULTIPLY_LONG_LONG;
      case 218:
        return NE_BOOL_BOOL;
      case 219:
        return NE_CHAR_CHAR;
      case 220:
        return NE_DOUBLE_DOUBLE;
      case 221:
        return NE_FLOAT_FLOAT;
      case 222:
        return NE_INT_INT;
      case 223:
        return NE_LONG_LONG;
      case 224:
        return NE_SHORT_SHORT;
      case 225:
        return NE_STRINGVALUE_STRINGVALUE;
      case 226:
        return NE_TIMESTAMPVALUE_TIMESTAMPVALUE;
      case 227:
        return REGEX;
      case 228:
        return STRING_ASCII;
      case 229:
        return STRING_CONCAT;
      case 230:
        return STRING_CONCAT_WS;
      case 231:
        return STRING_FIND_IN_SET;
      case 232:
        return STRING_INSTR;
      case 233:
        return STRING_LEFT;
      case 234:
        return STRING_LENGTH;
      case 235:
        return STRING_LOCATE_STRINGVALUE_STRINGVALUE;
      case 236:
        return STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT;
      case 237:
        return STRING_LOWER;
      case 238:
        return STRING_LPAD;
      case 239:
        return STRING_LTRIM;
      case 240:
        return STRING_PARSE_URL_STRINGVALUE_STRINGVALUE;
      case 241:
        return STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE;
      case 242:
        return STRING_REGEXP_EXTRACT;
      case 243:
        return STRING_REGEXP_REPLACE;
      case 244:
        return STRING_REPEAT;
      case 245:
        return STRING_REVERSE;
      case 246:
        return STRING_RIGHT;
      case 247:
        return STRING_RPAD;
      case 248:
        return STRING_RTRIM;
      case 249:
        return STRING_SPACE;
      case 250:
        return STRING_SUBSTRING_STRINGVALUE_INT;
      case 251:
        return STRING_SUBSTRING_STRINGVALUE_INT_INT;
      case 252:
        return STRING_TRIM;
      case 253:
        return STRING_UPPER;
      case 254:
        return SUBTRACT_DOUBLE_DOUBLE;
      case 255:
        return SUBTRACT_LONG_LONG;
      case 256:
        return TIMESTAMP_DAY;
      case 257:
        return TIMESTAMP_DAYOFMONTH;
      case 258:
        return TIMESTAMP_DAYS_ADD;
      case 259:
        return TIMESTAMP_DAYS_SUB;
      case 260:
        return TIMESTAMP_DIFF;
      case 261:
        return TIMESTAMP_HOUR;
      case 262:
        return TIMESTAMP_HOURS_ADD;
      case 263:
        return TIMESTAMP_HOURS_SUB;
      case 264:
        return TIMESTAMP_MICROSECONDS_ADD;
      case 265:
        return TIMESTAMP_MICROSECONDS_SUB;
      case 266:
        return TIMESTAMP_MILLISECONDS_ADD;
      case 267:
        return TIMESTAMP_MILLISECONDS_SUB;
      case 268:
        return TIMESTAMP_MINUTE;
      case 269:
        return TIMESTAMP_MINUTES_ADD;
      case 270:
        return TIMESTAMP_MINUTES_SUB;
      case 271:
        return TIMESTAMP_MONTH;
      case 272:
        return TIMESTAMP_MONTHS_ADD;
      case 273:
        return TIMESTAMP_MONTHS_SUB;
      case 274:
        return TIMESTAMP_NANOSECONDS_ADD;
      case 275:
        return TIMESTAMP_NANOSECONDS_SUB;
      case 276:
        return TIMESTAMP_NOW;
      case 277:
        return TIMESTAMP_SECOND;
      case 278:
        return TIMESTAMP_SECONDS_ADD;
      case 279:
        return TIMESTAMP_SECONDS_SUB;
      case 280:
        return TIMESTAMP_TO_DATE;
      case 281:
        return TIMESTAMP_WEEKOFYEAR;
      case 282:
        return TIMESTAMP_WEEKS_ADD;
      case 283:
        return TIMESTAMP_WEEKS_SUB;
      case 284:
        return TIMESTAMP_YEAR;
      case 285:
        return TIMESTAMP_YEARS_ADD;
      case 286:
        return TIMESTAMP_YEARS_SUB;
      case 287:
        return TO_UTC_TIMESTAMP;
      case 288:
        return UNIX_TIMESTAMP;
      case 289:
        return UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE;
      case 290:
        return UNIX_TIMESTAMP_TIMESTAMPVALUE;
      case 291:
        return UTILITY_VERSION;
      case 292:
        return LAST_OPCODE;
      default:
        return null;
    }
  }
}
