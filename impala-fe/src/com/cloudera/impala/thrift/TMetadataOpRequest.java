/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TMetadataOpRequest implements org.apache.thrift.TBase<TMetadataOpRequest, TMetadataOpRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMetadataOpRequest");

  private static final org.apache.thrift.protocol.TField OPCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("opcode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GET_INFO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_info_req", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField GET_TYPE_INFO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_type_info_req", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GET_CATALOGS_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_catalogs_req", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField GET_SCHEMAS_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_schemas_req", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField GET_TABLES_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_tables_req", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField GET_TABLE_TYPES_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_table_types_req", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField GET_COLUMNS_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_columns_req", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField GET_FUNCTIONS_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("get_functions_req", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMetadataOpRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMetadataOpRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TMetadataOpcode
   */
  public TMetadataOpcode opcode; // required
  public org.apache.hive.service.cli.thrift.TGetInfoReq get_info_req; // optional
  public org.apache.hive.service.cli.thrift.TGetTypeInfoReq get_type_info_req; // optional
  public org.apache.hive.service.cli.thrift.TGetCatalogsReq get_catalogs_req; // optional
  public org.apache.hive.service.cli.thrift.TGetSchemasReq get_schemas_req; // optional
  public org.apache.hive.service.cli.thrift.TGetTablesReq get_tables_req; // optional
  public org.apache.hive.service.cli.thrift.TGetTableTypesReq get_table_types_req; // optional
  public org.apache.hive.service.cli.thrift.TGetColumnsReq get_columns_req; // optional
  public org.apache.hive.service.cli.thrift.TGetFunctionsReq get_functions_req; // optional
  public TSessionState session; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TMetadataOpcode
     */
    OPCODE((short)1, "opcode"),
    GET_INFO_REQ((short)2, "get_info_req"),
    GET_TYPE_INFO_REQ((short)3, "get_type_info_req"),
    GET_CATALOGS_REQ((short)4, "get_catalogs_req"),
    GET_SCHEMAS_REQ((short)5, "get_schemas_req"),
    GET_TABLES_REQ((short)6, "get_tables_req"),
    GET_TABLE_TYPES_REQ((short)7, "get_table_types_req"),
    GET_COLUMNS_REQ((short)8, "get_columns_req"),
    GET_FUNCTIONS_REQ((short)9, "get_functions_req"),
    SESSION((short)10, "session");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPCODE
          return OPCODE;
        case 2: // GET_INFO_REQ
          return GET_INFO_REQ;
        case 3: // GET_TYPE_INFO_REQ
          return GET_TYPE_INFO_REQ;
        case 4: // GET_CATALOGS_REQ
          return GET_CATALOGS_REQ;
        case 5: // GET_SCHEMAS_REQ
          return GET_SCHEMAS_REQ;
        case 6: // GET_TABLES_REQ
          return GET_TABLES_REQ;
        case 7: // GET_TABLE_TYPES_REQ
          return GET_TABLE_TYPES_REQ;
        case 8: // GET_COLUMNS_REQ
          return GET_COLUMNS_REQ;
        case 9: // GET_FUNCTIONS_REQ
          return GET_FUNCTIONS_REQ;
        case 10: // SESSION
          return SESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.GET_INFO_REQ,_Fields.GET_TYPE_INFO_REQ,_Fields.GET_CATALOGS_REQ,_Fields.GET_SCHEMAS_REQ,_Fields.GET_TABLES_REQ,_Fields.GET_TABLE_TYPES_REQ,_Fields.GET_COLUMNS_REQ,_Fields.GET_FUNCTIONS_REQ,_Fields.SESSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPCODE, new org.apache.thrift.meta_data.FieldMetaData("opcode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TMetadataOpcode.class)));
    tmpMap.put(_Fields.GET_INFO_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_info_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetInfoReq.class)));
    tmpMap.put(_Fields.GET_TYPE_INFO_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_type_info_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetTypeInfoReq.class)));
    tmpMap.put(_Fields.GET_CATALOGS_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_catalogs_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetCatalogsReq.class)));
    tmpMap.put(_Fields.GET_SCHEMAS_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_schemas_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetSchemasReq.class)));
    tmpMap.put(_Fields.GET_TABLES_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_tables_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetTablesReq.class)));
    tmpMap.put(_Fields.GET_TABLE_TYPES_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_table_types_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetTableTypesReq.class)));
    tmpMap.put(_Fields.GET_COLUMNS_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_columns_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetColumnsReq.class)));
    tmpMap.put(_Fields.GET_FUNCTIONS_REQ, new org.apache.thrift.meta_data.FieldMetaData("get_functions_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.cli.thrift.TGetFunctionsReq.class)));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSessionState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMetadataOpRequest.class, metaDataMap);
  }

  public TMetadataOpRequest() {
  }

  public TMetadataOpRequest(
    TMetadataOpcode opcode)
  {
    this();
    this.opcode = opcode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMetadataOpRequest(TMetadataOpRequest other) {
    if (other.isSetOpcode()) {
      this.opcode = other.opcode;
    }
    if (other.isSetGet_info_req()) {
      this.get_info_req = new org.apache.hive.service.cli.thrift.TGetInfoReq(other.get_info_req);
    }
    if (other.isSetGet_type_info_req()) {
      this.get_type_info_req = new org.apache.hive.service.cli.thrift.TGetTypeInfoReq(other.get_type_info_req);
    }
    if (other.isSetGet_catalogs_req()) {
      this.get_catalogs_req = new org.apache.hive.service.cli.thrift.TGetCatalogsReq(other.get_catalogs_req);
    }
    if (other.isSetGet_schemas_req()) {
      this.get_schemas_req = new org.apache.hive.service.cli.thrift.TGetSchemasReq(other.get_schemas_req);
    }
    if (other.isSetGet_tables_req()) {
      this.get_tables_req = new org.apache.hive.service.cli.thrift.TGetTablesReq(other.get_tables_req);
    }
    if (other.isSetGet_table_types_req()) {
      this.get_table_types_req = new org.apache.hive.service.cli.thrift.TGetTableTypesReq(other.get_table_types_req);
    }
    if (other.isSetGet_columns_req()) {
      this.get_columns_req = new org.apache.hive.service.cli.thrift.TGetColumnsReq(other.get_columns_req);
    }
    if (other.isSetGet_functions_req()) {
      this.get_functions_req = new org.apache.hive.service.cli.thrift.TGetFunctionsReq(other.get_functions_req);
    }
    if (other.isSetSession()) {
      this.session = new TSessionState(other.session);
    }
  }

  public TMetadataOpRequest deepCopy() {
    return new TMetadataOpRequest(this);
  }

  @Override
  public void clear() {
    this.opcode = null;
    this.get_info_req = null;
    this.get_type_info_req = null;
    this.get_catalogs_req = null;
    this.get_schemas_req = null;
    this.get_tables_req = null;
    this.get_table_types_req = null;
    this.get_columns_req = null;
    this.get_functions_req = null;
    this.session = null;
  }

  /**
   * 
   * @see TMetadataOpcode
   */
  public TMetadataOpcode getOpcode() {
    return this.opcode;
  }

  /**
   * 
   * @see TMetadataOpcode
   */
  public TMetadataOpRequest setOpcode(TMetadataOpcode opcode) {
    this.opcode = opcode;
    return this;
  }

  public void unsetOpcode() {
    this.opcode = null;
  }

  /** Returns true if field opcode is set (has been assigned a value) and false otherwise */
  public boolean isSetOpcode() {
    return this.opcode != null;
  }

  public void setOpcodeIsSet(boolean value) {
    if (!value) {
      this.opcode = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetInfoReq getGet_info_req() {
    return this.get_info_req;
  }

  public TMetadataOpRequest setGet_info_req(org.apache.hive.service.cli.thrift.TGetInfoReq get_info_req) {
    this.get_info_req = get_info_req;
    return this;
  }

  public void unsetGet_info_req() {
    this.get_info_req = null;
  }

  /** Returns true if field get_info_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_info_req() {
    return this.get_info_req != null;
  }

  public void setGet_info_reqIsSet(boolean value) {
    if (!value) {
      this.get_info_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetTypeInfoReq getGet_type_info_req() {
    return this.get_type_info_req;
  }

  public TMetadataOpRequest setGet_type_info_req(org.apache.hive.service.cli.thrift.TGetTypeInfoReq get_type_info_req) {
    this.get_type_info_req = get_type_info_req;
    return this;
  }

  public void unsetGet_type_info_req() {
    this.get_type_info_req = null;
  }

  /** Returns true if field get_type_info_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_type_info_req() {
    return this.get_type_info_req != null;
  }

  public void setGet_type_info_reqIsSet(boolean value) {
    if (!value) {
      this.get_type_info_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetCatalogsReq getGet_catalogs_req() {
    return this.get_catalogs_req;
  }

  public TMetadataOpRequest setGet_catalogs_req(org.apache.hive.service.cli.thrift.TGetCatalogsReq get_catalogs_req) {
    this.get_catalogs_req = get_catalogs_req;
    return this;
  }

  public void unsetGet_catalogs_req() {
    this.get_catalogs_req = null;
  }

  /** Returns true if field get_catalogs_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_catalogs_req() {
    return this.get_catalogs_req != null;
  }

  public void setGet_catalogs_reqIsSet(boolean value) {
    if (!value) {
      this.get_catalogs_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetSchemasReq getGet_schemas_req() {
    return this.get_schemas_req;
  }

  public TMetadataOpRequest setGet_schemas_req(org.apache.hive.service.cli.thrift.TGetSchemasReq get_schemas_req) {
    this.get_schemas_req = get_schemas_req;
    return this;
  }

  public void unsetGet_schemas_req() {
    this.get_schemas_req = null;
  }

  /** Returns true if field get_schemas_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_schemas_req() {
    return this.get_schemas_req != null;
  }

  public void setGet_schemas_reqIsSet(boolean value) {
    if (!value) {
      this.get_schemas_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetTablesReq getGet_tables_req() {
    return this.get_tables_req;
  }

  public TMetadataOpRequest setGet_tables_req(org.apache.hive.service.cli.thrift.TGetTablesReq get_tables_req) {
    this.get_tables_req = get_tables_req;
    return this;
  }

  public void unsetGet_tables_req() {
    this.get_tables_req = null;
  }

  /** Returns true if field get_tables_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_tables_req() {
    return this.get_tables_req != null;
  }

  public void setGet_tables_reqIsSet(boolean value) {
    if (!value) {
      this.get_tables_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetTableTypesReq getGet_table_types_req() {
    return this.get_table_types_req;
  }

  public TMetadataOpRequest setGet_table_types_req(org.apache.hive.service.cli.thrift.TGetTableTypesReq get_table_types_req) {
    this.get_table_types_req = get_table_types_req;
    return this;
  }

  public void unsetGet_table_types_req() {
    this.get_table_types_req = null;
  }

  /** Returns true if field get_table_types_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_table_types_req() {
    return this.get_table_types_req != null;
  }

  public void setGet_table_types_reqIsSet(boolean value) {
    if (!value) {
      this.get_table_types_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetColumnsReq getGet_columns_req() {
    return this.get_columns_req;
  }

  public TMetadataOpRequest setGet_columns_req(org.apache.hive.service.cli.thrift.TGetColumnsReq get_columns_req) {
    this.get_columns_req = get_columns_req;
    return this;
  }

  public void unsetGet_columns_req() {
    this.get_columns_req = null;
  }

  /** Returns true if field get_columns_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_columns_req() {
    return this.get_columns_req != null;
  }

  public void setGet_columns_reqIsSet(boolean value) {
    if (!value) {
      this.get_columns_req = null;
    }
  }

  public org.apache.hive.service.cli.thrift.TGetFunctionsReq getGet_functions_req() {
    return this.get_functions_req;
  }

  public TMetadataOpRequest setGet_functions_req(org.apache.hive.service.cli.thrift.TGetFunctionsReq get_functions_req) {
    this.get_functions_req = get_functions_req;
    return this;
  }

  public void unsetGet_functions_req() {
    this.get_functions_req = null;
  }

  /** Returns true if field get_functions_req is set (has been assigned a value) and false otherwise */
  public boolean isSetGet_functions_req() {
    return this.get_functions_req != null;
  }

  public void setGet_functions_reqIsSet(boolean value) {
    if (!value) {
      this.get_functions_req = null;
    }
  }

  public TSessionState getSession() {
    return this.session;
  }

  public TMetadataOpRequest setSession(TSessionState session) {
    this.session = session;
    return this;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPCODE:
      if (value == null) {
        unsetOpcode();
      } else {
        setOpcode((TMetadataOpcode)value);
      }
      break;

    case GET_INFO_REQ:
      if (value == null) {
        unsetGet_info_req();
      } else {
        setGet_info_req((org.apache.hive.service.cli.thrift.TGetInfoReq)value);
      }
      break;

    case GET_TYPE_INFO_REQ:
      if (value == null) {
        unsetGet_type_info_req();
      } else {
        setGet_type_info_req((org.apache.hive.service.cli.thrift.TGetTypeInfoReq)value);
      }
      break;

    case GET_CATALOGS_REQ:
      if (value == null) {
        unsetGet_catalogs_req();
      } else {
        setGet_catalogs_req((org.apache.hive.service.cli.thrift.TGetCatalogsReq)value);
      }
      break;

    case GET_SCHEMAS_REQ:
      if (value == null) {
        unsetGet_schemas_req();
      } else {
        setGet_schemas_req((org.apache.hive.service.cli.thrift.TGetSchemasReq)value);
      }
      break;

    case GET_TABLES_REQ:
      if (value == null) {
        unsetGet_tables_req();
      } else {
        setGet_tables_req((org.apache.hive.service.cli.thrift.TGetTablesReq)value);
      }
      break;

    case GET_TABLE_TYPES_REQ:
      if (value == null) {
        unsetGet_table_types_req();
      } else {
        setGet_table_types_req((org.apache.hive.service.cli.thrift.TGetTableTypesReq)value);
      }
      break;

    case GET_COLUMNS_REQ:
      if (value == null) {
        unsetGet_columns_req();
      } else {
        setGet_columns_req((org.apache.hive.service.cli.thrift.TGetColumnsReq)value);
      }
      break;

    case GET_FUNCTIONS_REQ:
      if (value == null) {
        unsetGet_functions_req();
      } else {
        setGet_functions_req((org.apache.hive.service.cli.thrift.TGetFunctionsReq)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((TSessionState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPCODE:
      return getOpcode();

    case GET_INFO_REQ:
      return getGet_info_req();

    case GET_TYPE_INFO_REQ:
      return getGet_type_info_req();

    case GET_CATALOGS_REQ:
      return getGet_catalogs_req();

    case GET_SCHEMAS_REQ:
      return getGet_schemas_req();

    case GET_TABLES_REQ:
      return getGet_tables_req();

    case GET_TABLE_TYPES_REQ:
      return getGet_table_types_req();

    case GET_COLUMNS_REQ:
      return getGet_columns_req();

    case GET_FUNCTIONS_REQ:
      return getGet_functions_req();

    case SESSION:
      return getSession();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPCODE:
      return isSetOpcode();
    case GET_INFO_REQ:
      return isSetGet_info_req();
    case GET_TYPE_INFO_REQ:
      return isSetGet_type_info_req();
    case GET_CATALOGS_REQ:
      return isSetGet_catalogs_req();
    case GET_SCHEMAS_REQ:
      return isSetGet_schemas_req();
    case GET_TABLES_REQ:
      return isSetGet_tables_req();
    case GET_TABLE_TYPES_REQ:
      return isSetGet_table_types_req();
    case GET_COLUMNS_REQ:
      return isSetGet_columns_req();
    case GET_FUNCTIONS_REQ:
      return isSetGet_functions_req();
    case SESSION:
      return isSetSession();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMetadataOpRequest)
      return this.equals((TMetadataOpRequest)that);
    return false;
  }

  public boolean equals(TMetadataOpRequest that) {
    if (that == null)
      return false;

    boolean this_present_opcode = true && this.isSetOpcode();
    boolean that_present_opcode = true && that.isSetOpcode();
    if (this_present_opcode || that_present_opcode) {
      if (!(this_present_opcode && that_present_opcode))
        return false;
      if (!this.opcode.equals(that.opcode))
        return false;
    }

    boolean this_present_get_info_req = true && this.isSetGet_info_req();
    boolean that_present_get_info_req = true && that.isSetGet_info_req();
    if (this_present_get_info_req || that_present_get_info_req) {
      if (!(this_present_get_info_req && that_present_get_info_req))
        return false;
      if (!this.get_info_req.equals(that.get_info_req))
        return false;
    }

    boolean this_present_get_type_info_req = true && this.isSetGet_type_info_req();
    boolean that_present_get_type_info_req = true && that.isSetGet_type_info_req();
    if (this_present_get_type_info_req || that_present_get_type_info_req) {
      if (!(this_present_get_type_info_req && that_present_get_type_info_req))
        return false;
      if (!this.get_type_info_req.equals(that.get_type_info_req))
        return false;
    }

    boolean this_present_get_catalogs_req = true && this.isSetGet_catalogs_req();
    boolean that_present_get_catalogs_req = true && that.isSetGet_catalogs_req();
    if (this_present_get_catalogs_req || that_present_get_catalogs_req) {
      if (!(this_present_get_catalogs_req && that_present_get_catalogs_req))
        return false;
      if (!this.get_catalogs_req.equals(that.get_catalogs_req))
        return false;
    }

    boolean this_present_get_schemas_req = true && this.isSetGet_schemas_req();
    boolean that_present_get_schemas_req = true && that.isSetGet_schemas_req();
    if (this_present_get_schemas_req || that_present_get_schemas_req) {
      if (!(this_present_get_schemas_req && that_present_get_schemas_req))
        return false;
      if (!this.get_schemas_req.equals(that.get_schemas_req))
        return false;
    }

    boolean this_present_get_tables_req = true && this.isSetGet_tables_req();
    boolean that_present_get_tables_req = true && that.isSetGet_tables_req();
    if (this_present_get_tables_req || that_present_get_tables_req) {
      if (!(this_present_get_tables_req && that_present_get_tables_req))
        return false;
      if (!this.get_tables_req.equals(that.get_tables_req))
        return false;
    }

    boolean this_present_get_table_types_req = true && this.isSetGet_table_types_req();
    boolean that_present_get_table_types_req = true && that.isSetGet_table_types_req();
    if (this_present_get_table_types_req || that_present_get_table_types_req) {
      if (!(this_present_get_table_types_req && that_present_get_table_types_req))
        return false;
      if (!this.get_table_types_req.equals(that.get_table_types_req))
        return false;
    }

    boolean this_present_get_columns_req = true && this.isSetGet_columns_req();
    boolean that_present_get_columns_req = true && that.isSetGet_columns_req();
    if (this_present_get_columns_req || that_present_get_columns_req) {
      if (!(this_present_get_columns_req && that_present_get_columns_req))
        return false;
      if (!this.get_columns_req.equals(that.get_columns_req))
        return false;
    }

    boolean this_present_get_functions_req = true && this.isSetGet_functions_req();
    boolean that_present_get_functions_req = true && that.isSetGet_functions_req();
    if (this_present_get_functions_req || that_present_get_functions_req) {
      if (!(this_present_get_functions_req && that_present_get_functions_req))
        return false;
      if (!this.get_functions_req.equals(that.get_functions_req))
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TMetadataOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TMetadataOpRequest typedOther = (TMetadataOpRequest)other;

    lastComparison = Boolean.valueOf(isSetOpcode()).compareTo(typedOther.isSetOpcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opcode, typedOther.opcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_info_req()).compareTo(typedOther.isSetGet_info_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_info_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_info_req, typedOther.get_info_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_type_info_req()).compareTo(typedOther.isSetGet_type_info_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_type_info_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_type_info_req, typedOther.get_type_info_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_catalogs_req()).compareTo(typedOther.isSetGet_catalogs_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_catalogs_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_catalogs_req, typedOther.get_catalogs_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_schemas_req()).compareTo(typedOther.isSetGet_schemas_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_schemas_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_schemas_req, typedOther.get_schemas_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_tables_req()).compareTo(typedOther.isSetGet_tables_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_tables_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_tables_req, typedOther.get_tables_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_table_types_req()).compareTo(typedOther.isSetGet_table_types_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_table_types_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_table_types_req, typedOther.get_table_types_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_columns_req()).compareTo(typedOther.isSetGet_columns_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_columns_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_columns_req, typedOther.get_columns_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGet_functions_req()).compareTo(typedOther.isSetGet_functions_req());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGet_functions_req()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.get_functions_req, typedOther.get_functions_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession()).compareTo(typedOther.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, typedOther.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMetadataOpRequest(");
    boolean first = true;

    sb.append("opcode:");
    if (this.opcode == null) {
      sb.append("null");
    } else {
      sb.append(this.opcode);
    }
    first = false;
    if (isSetGet_info_req()) {
      if (!first) sb.append(", ");
      sb.append("get_info_req:");
      if (this.get_info_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_info_req);
      }
      first = false;
    }
    if (isSetGet_type_info_req()) {
      if (!first) sb.append(", ");
      sb.append("get_type_info_req:");
      if (this.get_type_info_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_type_info_req);
      }
      first = false;
    }
    if (isSetGet_catalogs_req()) {
      if (!first) sb.append(", ");
      sb.append("get_catalogs_req:");
      if (this.get_catalogs_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_catalogs_req);
      }
      first = false;
    }
    if (isSetGet_schemas_req()) {
      if (!first) sb.append(", ");
      sb.append("get_schemas_req:");
      if (this.get_schemas_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_schemas_req);
      }
      first = false;
    }
    if (isSetGet_tables_req()) {
      if (!first) sb.append(", ");
      sb.append("get_tables_req:");
      if (this.get_tables_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_tables_req);
      }
      first = false;
    }
    if (isSetGet_table_types_req()) {
      if (!first) sb.append(", ");
      sb.append("get_table_types_req:");
      if (this.get_table_types_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_table_types_req);
      }
      first = false;
    }
    if (isSetGet_columns_req()) {
      if (!first) sb.append(", ");
      sb.append("get_columns_req:");
      if (this.get_columns_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_columns_req);
      }
      first = false;
    }
    if (isSetGet_functions_req()) {
      if (!first) sb.append(", ");
      sb.append("get_functions_req:");
      if (this.get_functions_req == null) {
        sb.append("null");
      } else {
        sb.append(this.get_functions_req);
      }
      first = false;
    }
    if (isSetSession()) {
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (opcode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'opcode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (get_info_req != null) {
      get_info_req.validate();
    }
    if (get_type_info_req != null) {
      get_type_info_req.validate();
    }
    if (get_catalogs_req != null) {
      get_catalogs_req.validate();
    }
    if (get_schemas_req != null) {
      get_schemas_req.validate();
    }
    if (get_tables_req != null) {
      get_tables_req.validate();
    }
    if (get_table_types_req != null) {
      get_table_types_req.validate();
    }
    if (get_columns_req != null) {
      get_columns_req.validate();
    }
    if (get_functions_req != null) {
      get_functions_req.validate();
    }
    if (session != null) {
      session.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMetadataOpRequestStandardSchemeFactory implements SchemeFactory {
    public TMetadataOpRequestStandardScheme getScheme() {
      return new TMetadataOpRequestStandardScheme();
    }
  }

  private static class TMetadataOpRequestStandardScheme extends StandardScheme<TMetadataOpRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMetadataOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opcode = TMetadataOpcode.findByValue(iprot.readI32());
              struct.setOpcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GET_INFO_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_info_req = new org.apache.hive.service.cli.thrift.TGetInfoReq();
              struct.get_info_req.read(iprot);
              struct.setGet_info_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GET_TYPE_INFO_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_type_info_req = new org.apache.hive.service.cli.thrift.TGetTypeInfoReq();
              struct.get_type_info_req.read(iprot);
              struct.setGet_type_info_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GET_CATALOGS_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_catalogs_req = new org.apache.hive.service.cli.thrift.TGetCatalogsReq();
              struct.get_catalogs_req.read(iprot);
              struct.setGet_catalogs_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GET_SCHEMAS_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_schemas_req = new org.apache.hive.service.cli.thrift.TGetSchemasReq();
              struct.get_schemas_req.read(iprot);
              struct.setGet_schemas_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GET_TABLES_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_tables_req = new org.apache.hive.service.cli.thrift.TGetTablesReq();
              struct.get_tables_req.read(iprot);
              struct.setGet_tables_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GET_TABLE_TYPES_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_table_types_req = new org.apache.hive.service.cli.thrift.TGetTableTypesReq();
              struct.get_table_types_req.read(iprot);
              struct.setGet_table_types_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GET_COLUMNS_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_columns_req = new org.apache.hive.service.cli.thrift.TGetColumnsReq();
              struct.get_columns_req.read(iprot);
              struct.setGet_columns_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GET_FUNCTIONS_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.get_functions_req = new org.apache.hive.service.cli.thrift.TGetFunctionsReq();
              struct.get_functions_req.read(iprot);
              struct.setGet_functions_reqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new TSessionState();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMetadataOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.opcode != null) {
        oprot.writeFieldBegin(OPCODE_FIELD_DESC);
        oprot.writeI32(struct.opcode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.get_info_req != null) {
        if (struct.isSetGet_info_req()) {
          oprot.writeFieldBegin(GET_INFO_REQ_FIELD_DESC);
          struct.get_info_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_type_info_req != null) {
        if (struct.isSetGet_type_info_req()) {
          oprot.writeFieldBegin(GET_TYPE_INFO_REQ_FIELD_DESC);
          struct.get_type_info_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_catalogs_req != null) {
        if (struct.isSetGet_catalogs_req()) {
          oprot.writeFieldBegin(GET_CATALOGS_REQ_FIELD_DESC);
          struct.get_catalogs_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_schemas_req != null) {
        if (struct.isSetGet_schemas_req()) {
          oprot.writeFieldBegin(GET_SCHEMAS_REQ_FIELD_DESC);
          struct.get_schemas_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_tables_req != null) {
        if (struct.isSetGet_tables_req()) {
          oprot.writeFieldBegin(GET_TABLES_REQ_FIELD_DESC);
          struct.get_tables_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_table_types_req != null) {
        if (struct.isSetGet_table_types_req()) {
          oprot.writeFieldBegin(GET_TABLE_TYPES_REQ_FIELD_DESC);
          struct.get_table_types_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_columns_req != null) {
        if (struct.isSetGet_columns_req()) {
          oprot.writeFieldBegin(GET_COLUMNS_REQ_FIELD_DESC);
          struct.get_columns_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.get_functions_req != null) {
        if (struct.isSetGet_functions_req()) {
          oprot.writeFieldBegin(GET_FUNCTIONS_REQ_FIELD_DESC);
          struct.get_functions_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.session != null) {
        if (struct.isSetSession()) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMetadataOpRequestTupleSchemeFactory implements SchemeFactory {
    public TMetadataOpRequestTupleScheme getScheme() {
      return new TMetadataOpRequestTupleScheme();
    }
  }

  private static class TMetadataOpRequestTupleScheme extends TupleScheme<TMetadataOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMetadataOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.opcode.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetGet_info_req()) {
        optionals.set(0);
      }
      if (struct.isSetGet_type_info_req()) {
        optionals.set(1);
      }
      if (struct.isSetGet_catalogs_req()) {
        optionals.set(2);
      }
      if (struct.isSetGet_schemas_req()) {
        optionals.set(3);
      }
      if (struct.isSetGet_tables_req()) {
        optionals.set(4);
      }
      if (struct.isSetGet_table_types_req()) {
        optionals.set(5);
      }
      if (struct.isSetGet_columns_req()) {
        optionals.set(6);
      }
      if (struct.isSetGet_functions_req()) {
        optionals.set(7);
      }
      if (struct.isSetSession()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetGet_info_req()) {
        struct.get_info_req.write(oprot);
      }
      if (struct.isSetGet_type_info_req()) {
        struct.get_type_info_req.write(oprot);
      }
      if (struct.isSetGet_catalogs_req()) {
        struct.get_catalogs_req.write(oprot);
      }
      if (struct.isSetGet_schemas_req()) {
        struct.get_schemas_req.write(oprot);
      }
      if (struct.isSetGet_tables_req()) {
        struct.get_tables_req.write(oprot);
      }
      if (struct.isSetGet_table_types_req()) {
        struct.get_table_types_req.write(oprot);
      }
      if (struct.isSetGet_columns_req()) {
        struct.get_columns_req.write(oprot);
      }
      if (struct.isSetGet_functions_req()) {
        struct.get_functions_req.write(oprot);
      }
      if (struct.isSetSession()) {
        struct.session.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMetadataOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.opcode = TMetadataOpcode.findByValue(iprot.readI32());
      struct.setOpcodeIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.get_info_req = new org.apache.hive.service.cli.thrift.TGetInfoReq();
        struct.get_info_req.read(iprot);
        struct.setGet_info_reqIsSet(true);
      }
      if (incoming.get(1)) {
        struct.get_type_info_req = new org.apache.hive.service.cli.thrift.TGetTypeInfoReq();
        struct.get_type_info_req.read(iprot);
        struct.setGet_type_info_reqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.get_catalogs_req = new org.apache.hive.service.cli.thrift.TGetCatalogsReq();
        struct.get_catalogs_req.read(iprot);
        struct.setGet_catalogs_reqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.get_schemas_req = new org.apache.hive.service.cli.thrift.TGetSchemasReq();
        struct.get_schemas_req.read(iprot);
        struct.setGet_schemas_reqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.get_tables_req = new org.apache.hive.service.cli.thrift.TGetTablesReq();
        struct.get_tables_req.read(iprot);
        struct.setGet_tables_reqIsSet(true);
      }
      if (incoming.get(5)) {
        struct.get_table_types_req = new org.apache.hive.service.cli.thrift.TGetTableTypesReq();
        struct.get_table_types_req.read(iprot);
        struct.setGet_table_types_reqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.get_columns_req = new org.apache.hive.service.cli.thrift.TGetColumnsReq();
        struct.get_columns_req.read(iprot);
        struct.setGet_columns_reqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.get_functions_req = new org.apache.hive.service.cli.thrift.TGetFunctionsReq();
        struct.get_functions_req.read(iprot);
        struct.setGet_functions_reqIsSet(true);
      }
      if (incoming.get(8)) {
        struct.session = new TSessionState();
        struct.session.read(iprot);
        struct.setSessionIsSet(true);
      }
    }
  }

}

