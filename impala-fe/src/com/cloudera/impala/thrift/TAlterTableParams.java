/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlterTableParams implements org.apache.thrift.TBase<TAlterTableParams, TAlterTableParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableParams");

  private static final org.apache.thrift.protocol.TField ALTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RENAME_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("rename_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ADD_REPLACE_COLS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("add_replace_cols_params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ADD_PARTITION_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("add_partition_params", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CHANGE_COL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("change_col_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DROP_COL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_col_params", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField DROP_PARTITION_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_partition_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SET_FILE_FORMAT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("set_file_format_params", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SET_LOCATION_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("set_location_params", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see TAlterTableType
   */
  public TAlterTableType alter_type; // required
  public TTableName table_name; // required
  public TAlterTableOrViewRenameParams rename_params; // optional
  public TAlterTableAddReplaceColsParams add_replace_cols_params; // optional
  public TAlterTableAddPartitionParams add_partition_params; // optional
  public TAlterTableChangeColParams change_col_params; // optional
  public TAlterTableDropColParams drop_col_params; // optional
  public TAlterTableDropPartitionParams drop_partition_params; // optional
  public TAlterTableSetFileFormatParams set_file_format_params; // optional
  public TAlterTableSetLocationParams set_location_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TAlterTableType
     */
    ALTER_TYPE((short)1, "alter_type"),
    TABLE_NAME((short)2, "table_name"),
    RENAME_PARAMS((short)3, "rename_params"),
    ADD_REPLACE_COLS_PARAMS((short)4, "add_replace_cols_params"),
    ADD_PARTITION_PARAMS((short)5, "add_partition_params"),
    CHANGE_COL_PARAMS((short)6, "change_col_params"),
    DROP_COL_PARAMS((short)7, "drop_col_params"),
    DROP_PARTITION_PARAMS((short)8, "drop_partition_params"),
    SET_FILE_FORMAT_PARAMS((short)9, "set_file_format_params"),
    SET_LOCATION_PARAMS((short)10, "set_location_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALTER_TYPE
          return ALTER_TYPE;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // RENAME_PARAMS
          return RENAME_PARAMS;
        case 4: // ADD_REPLACE_COLS_PARAMS
          return ADD_REPLACE_COLS_PARAMS;
        case 5: // ADD_PARTITION_PARAMS
          return ADD_PARTITION_PARAMS;
        case 6: // CHANGE_COL_PARAMS
          return CHANGE_COL_PARAMS;
        case 7: // DROP_COL_PARAMS
          return DROP_COL_PARAMS;
        case 8: // DROP_PARTITION_PARAMS
          return DROP_PARTITION_PARAMS;
        case 9: // SET_FILE_FORMAT_PARAMS
          return SET_FILE_FORMAT_PARAMS;
        case 10: // SET_LOCATION_PARAMS
          return SET_LOCATION_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.RENAME_PARAMS,_Fields.ADD_REPLACE_COLS_PARAMS,_Fields.ADD_PARTITION_PARAMS,_Fields.CHANGE_COL_PARAMS,_Fields.DROP_COL_PARAMS,_Fields.DROP_PARTITION_PARAMS,_Fields.SET_FILE_FORMAT_PARAMS,_Fields.SET_LOCATION_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alter_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAlterTableType.class)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableName.class)));
    tmpMap.put(_Fields.RENAME_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("rename_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableOrViewRenameParams.class)));
    tmpMap.put(_Fields.ADD_REPLACE_COLS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("add_replace_cols_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableAddReplaceColsParams.class)));
    tmpMap.put(_Fields.ADD_PARTITION_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("add_partition_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableAddPartitionParams.class)));
    tmpMap.put(_Fields.CHANGE_COL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("change_col_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableChangeColParams.class)));
    tmpMap.put(_Fields.DROP_COL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_col_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableDropColParams.class)));
    tmpMap.put(_Fields.DROP_PARTITION_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_partition_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableDropPartitionParams.class)));
    tmpMap.put(_Fields.SET_FILE_FORMAT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("set_file_format_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableSetFileFormatParams.class)));
    tmpMap.put(_Fields.SET_LOCATION_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("set_location_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTableSetLocationParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableParams.class, metaDataMap);
  }

  public TAlterTableParams() {
  }

  public TAlterTableParams(
    TAlterTableType alter_type,
    TTableName table_name)
  {
    this();
    this.alter_type = alter_type;
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableParams(TAlterTableParams other) {
    if (other.isSetAlter_type()) {
      this.alter_type = other.alter_type;
    }
    if (other.isSetTable_name()) {
      this.table_name = new TTableName(other.table_name);
    }
    if (other.isSetRename_params()) {
      this.rename_params = new TAlterTableOrViewRenameParams(other.rename_params);
    }
    if (other.isSetAdd_replace_cols_params()) {
      this.add_replace_cols_params = new TAlterTableAddReplaceColsParams(other.add_replace_cols_params);
    }
    if (other.isSetAdd_partition_params()) {
      this.add_partition_params = new TAlterTableAddPartitionParams(other.add_partition_params);
    }
    if (other.isSetChange_col_params()) {
      this.change_col_params = new TAlterTableChangeColParams(other.change_col_params);
    }
    if (other.isSetDrop_col_params()) {
      this.drop_col_params = new TAlterTableDropColParams(other.drop_col_params);
    }
    if (other.isSetDrop_partition_params()) {
      this.drop_partition_params = new TAlterTableDropPartitionParams(other.drop_partition_params);
    }
    if (other.isSetSet_file_format_params()) {
      this.set_file_format_params = new TAlterTableSetFileFormatParams(other.set_file_format_params);
    }
    if (other.isSetSet_location_params()) {
      this.set_location_params = new TAlterTableSetLocationParams(other.set_location_params);
    }
  }

  public TAlterTableParams deepCopy() {
    return new TAlterTableParams(this);
  }

  @Override
  public void clear() {
    this.alter_type = null;
    this.table_name = null;
    this.rename_params = null;
    this.add_replace_cols_params = null;
    this.add_partition_params = null;
    this.change_col_params = null;
    this.drop_col_params = null;
    this.drop_partition_params = null;
    this.set_file_format_params = null;
    this.set_location_params = null;
  }

  /**
   * 
   * @see TAlterTableType
   */
  public TAlterTableType getAlter_type() {
    return this.alter_type;
  }

  /**
   * 
   * @see TAlterTableType
   */
  public TAlterTableParams setAlter_type(TAlterTableType alter_type) {
    this.alter_type = alter_type;
    return this;
  }

  public void unsetAlter_type() {
    this.alter_type = null;
  }

  /** Returns true if field alter_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_type() {
    return this.alter_type != null;
  }

  public void setAlter_typeIsSet(boolean value) {
    if (!value) {
      this.alter_type = null;
    }
  }

  public TTableName getTable_name() {
    return this.table_name;
  }

  public TAlterTableParams setTable_name(TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public TAlterTableOrViewRenameParams getRename_params() {
    return this.rename_params;
  }

  public TAlterTableParams setRename_params(TAlterTableOrViewRenameParams rename_params) {
    this.rename_params = rename_params;
    return this;
  }

  public void unsetRename_params() {
    this.rename_params = null;
  }

  /** Returns true if field rename_params is set (has been assigned a value) and false otherwise */
  public boolean isSetRename_params() {
    return this.rename_params != null;
  }

  public void setRename_paramsIsSet(boolean value) {
    if (!value) {
      this.rename_params = null;
    }
  }

  public TAlterTableAddReplaceColsParams getAdd_replace_cols_params() {
    return this.add_replace_cols_params;
  }

  public TAlterTableParams setAdd_replace_cols_params(TAlterTableAddReplaceColsParams add_replace_cols_params) {
    this.add_replace_cols_params = add_replace_cols_params;
    return this;
  }

  public void unsetAdd_replace_cols_params() {
    this.add_replace_cols_params = null;
  }

  /** Returns true if field add_replace_cols_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_replace_cols_params() {
    return this.add_replace_cols_params != null;
  }

  public void setAdd_replace_cols_paramsIsSet(boolean value) {
    if (!value) {
      this.add_replace_cols_params = null;
    }
  }

  public TAlterTableAddPartitionParams getAdd_partition_params() {
    return this.add_partition_params;
  }

  public TAlterTableParams setAdd_partition_params(TAlterTableAddPartitionParams add_partition_params) {
    this.add_partition_params = add_partition_params;
    return this;
  }

  public void unsetAdd_partition_params() {
    this.add_partition_params = null;
  }

  /** Returns true if field add_partition_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_partition_params() {
    return this.add_partition_params != null;
  }

  public void setAdd_partition_paramsIsSet(boolean value) {
    if (!value) {
      this.add_partition_params = null;
    }
  }

  public TAlterTableChangeColParams getChange_col_params() {
    return this.change_col_params;
  }

  public TAlterTableParams setChange_col_params(TAlterTableChangeColParams change_col_params) {
    this.change_col_params = change_col_params;
    return this;
  }

  public void unsetChange_col_params() {
    this.change_col_params = null;
  }

  /** Returns true if field change_col_params is set (has been assigned a value) and false otherwise */
  public boolean isSetChange_col_params() {
    return this.change_col_params != null;
  }

  public void setChange_col_paramsIsSet(boolean value) {
    if (!value) {
      this.change_col_params = null;
    }
  }

  public TAlterTableDropColParams getDrop_col_params() {
    return this.drop_col_params;
  }

  public TAlterTableParams setDrop_col_params(TAlterTableDropColParams drop_col_params) {
    this.drop_col_params = drop_col_params;
    return this;
  }

  public void unsetDrop_col_params() {
    this.drop_col_params = null;
  }

  /** Returns true if field drop_col_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_col_params() {
    return this.drop_col_params != null;
  }

  public void setDrop_col_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_col_params = null;
    }
  }

  public TAlterTableDropPartitionParams getDrop_partition_params() {
    return this.drop_partition_params;
  }

  public TAlterTableParams setDrop_partition_params(TAlterTableDropPartitionParams drop_partition_params) {
    this.drop_partition_params = drop_partition_params;
    return this;
  }

  public void unsetDrop_partition_params() {
    this.drop_partition_params = null;
  }

  /** Returns true if field drop_partition_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_partition_params() {
    return this.drop_partition_params != null;
  }

  public void setDrop_partition_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_partition_params = null;
    }
  }

  public TAlterTableSetFileFormatParams getSet_file_format_params() {
    return this.set_file_format_params;
  }

  public TAlterTableParams setSet_file_format_params(TAlterTableSetFileFormatParams set_file_format_params) {
    this.set_file_format_params = set_file_format_params;
    return this;
  }

  public void unsetSet_file_format_params() {
    this.set_file_format_params = null;
  }

  /** Returns true if field set_file_format_params is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_file_format_params() {
    return this.set_file_format_params != null;
  }

  public void setSet_file_format_paramsIsSet(boolean value) {
    if (!value) {
      this.set_file_format_params = null;
    }
  }

  public TAlterTableSetLocationParams getSet_location_params() {
    return this.set_location_params;
  }

  public TAlterTableParams setSet_location_params(TAlterTableSetLocationParams set_location_params) {
    this.set_location_params = set_location_params;
    return this;
  }

  public void unsetSet_location_params() {
    this.set_location_params = null;
  }

  /** Returns true if field set_location_params is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_location_params() {
    return this.set_location_params != null;
  }

  public void setSet_location_paramsIsSet(boolean value) {
    if (!value) {
      this.set_location_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALTER_TYPE:
      if (value == null) {
        unsetAlter_type();
      } else {
        setAlter_type((TAlterTableType)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((TTableName)value);
      }
      break;

    case RENAME_PARAMS:
      if (value == null) {
        unsetRename_params();
      } else {
        setRename_params((TAlterTableOrViewRenameParams)value);
      }
      break;

    case ADD_REPLACE_COLS_PARAMS:
      if (value == null) {
        unsetAdd_replace_cols_params();
      } else {
        setAdd_replace_cols_params((TAlterTableAddReplaceColsParams)value);
      }
      break;

    case ADD_PARTITION_PARAMS:
      if (value == null) {
        unsetAdd_partition_params();
      } else {
        setAdd_partition_params((TAlterTableAddPartitionParams)value);
      }
      break;

    case CHANGE_COL_PARAMS:
      if (value == null) {
        unsetChange_col_params();
      } else {
        setChange_col_params((TAlterTableChangeColParams)value);
      }
      break;

    case DROP_COL_PARAMS:
      if (value == null) {
        unsetDrop_col_params();
      } else {
        setDrop_col_params((TAlterTableDropColParams)value);
      }
      break;

    case DROP_PARTITION_PARAMS:
      if (value == null) {
        unsetDrop_partition_params();
      } else {
        setDrop_partition_params((TAlterTableDropPartitionParams)value);
      }
      break;

    case SET_FILE_FORMAT_PARAMS:
      if (value == null) {
        unsetSet_file_format_params();
      } else {
        setSet_file_format_params((TAlterTableSetFileFormatParams)value);
      }
      break;

    case SET_LOCATION_PARAMS:
      if (value == null) {
        unsetSet_location_params();
      } else {
        setSet_location_params((TAlterTableSetLocationParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALTER_TYPE:
      return getAlter_type();

    case TABLE_NAME:
      return getTable_name();

    case RENAME_PARAMS:
      return getRename_params();

    case ADD_REPLACE_COLS_PARAMS:
      return getAdd_replace_cols_params();

    case ADD_PARTITION_PARAMS:
      return getAdd_partition_params();

    case CHANGE_COL_PARAMS:
      return getChange_col_params();

    case DROP_COL_PARAMS:
      return getDrop_col_params();

    case DROP_PARTITION_PARAMS:
      return getDrop_partition_params();

    case SET_FILE_FORMAT_PARAMS:
      return getSet_file_format_params();

    case SET_LOCATION_PARAMS:
      return getSet_location_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALTER_TYPE:
      return isSetAlter_type();
    case TABLE_NAME:
      return isSetTable_name();
    case RENAME_PARAMS:
      return isSetRename_params();
    case ADD_REPLACE_COLS_PARAMS:
      return isSetAdd_replace_cols_params();
    case ADD_PARTITION_PARAMS:
      return isSetAdd_partition_params();
    case CHANGE_COL_PARAMS:
      return isSetChange_col_params();
    case DROP_COL_PARAMS:
      return isSetDrop_col_params();
    case DROP_PARTITION_PARAMS:
      return isSetDrop_partition_params();
    case SET_FILE_FORMAT_PARAMS:
      return isSetSet_file_format_params();
    case SET_LOCATION_PARAMS:
      return isSetSet_location_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableParams)
      return this.equals((TAlterTableParams)that);
    return false;
  }

  public boolean equals(TAlterTableParams that) {
    if (that == null)
      return false;

    boolean this_present_alter_type = true && this.isSetAlter_type();
    boolean that_present_alter_type = true && that.isSetAlter_type();
    if (this_present_alter_type || that_present_alter_type) {
      if (!(this_present_alter_type && that_present_alter_type))
        return false;
      if (!this.alter_type.equals(that.alter_type))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_rename_params = true && this.isSetRename_params();
    boolean that_present_rename_params = true && that.isSetRename_params();
    if (this_present_rename_params || that_present_rename_params) {
      if (!(this_present_rename_params && that_present_rename_params))
        return false;
      if (!this.rename_params.equals(that.rename_params))
        return false;
    }

    boolean this_present_add_replace_cols_params = true && this.isSetAdd_replace_cols_params();
    boolean that_present_add_replace_cols_params = true && that.isSetAdd_replace_cols_params();
    if (this_present_add_replace_cols_params || that_present_add_replace_cols_params) {
      if (!(this_present_add_replace_cols_params && that_present_add_replace_cols_params))
        return false;
      if (!this.add_replace_cols_params.equals(that.add_replace_cols_params))
        return false;
    }

    boolean this_present_add_partition_params = true && this.isSetAdd_partition_params();
    boolean that_present_add_partition_params = true && that.isSetAdd_partition_params();
    if (this_present_add_partition_params || that_present_add_partition_params) {
      if (!(this_present_add_partition_params && that_present_add_partition_params))
        return false;
      if (!this.add_partition_params.equals(that.add_partition_params))
        return false;
    }

    boolean this_present_change_col_params = true && this.isSetChange_col_params();
    boolean that_present_change_col_params = true && that.isSetChange_col_params();
    if (this_present_change_col_params || that_present_change_col_params) {
      if (!(this_present_change_col_params && that_present_change_col_params))
        return false;
      if (!this.change_col_params.equals(that.change_col_params))
        return false;
    }

    boolean this_present_drop_col_params = true && this.isSetDrop_col_params();
    boolean that_present_drop_col_params = true && that.isSetDrop_col_params();
    if (this_present_drop_col_params || that_present_drop_col_params) {
      if (!(this_present_drop_col_params && that_present_drop_col_params))
        return false;
      if (!this.drop_col_params.equals(that.drop_col_params))
        return false;
    }

    boolean this_present_drop_partition_params = true && this.isSetDrop_partition_params();
    boolean that_present_drop_partition_params = true && that.isSetDrop_partition_params();
    if (this_present_drop_partition_params || that_present_drop_partition_params) {
      if (!(this_present_drop_partition_params && that_present_drop_partition_params))
        return false;
      if (!this.drop_partition_params.equals(that.drop_partition_params))
        return false;
    }

    boolean this_present_set_file_format_params = true && this.isSetSet_file_format_params();
    boolean that_present_set_file_format_params = true && that.isSetSet_file_format_params();
    if (this_present_set_file_format_params || that_present_set_file_format_params) {
      if (!(this_present_set_file_format_params && that_present_set_file_format_params))
        return false;
      if (!this.set_file_format_params.equals(that.set_file_format_params))
        return false;
    }

    boolean this_present_set_location_params = true && this.isSetSet_location_params();
    boolean that_present_set_location_params = true && that.isSetSet_location_params();
    if (this_present_set_location_params || that_present_set_location_params) {
      if (!(this_present_set_location_params && that_present_set_location_params))
        return false;
      if (!this.set_location_params.equals(that.set_location_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TAlterTableParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAlterTableParams typedOther = (TAlterTableParams)other;

    lastComparison = Boolean.valueOf(isSetAlter_type()).compareTo(typedOther.isSetAlter_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_type, typedOther.alter_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRename_params()).compareTo(typedOther.isSetRename_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRename_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rename_params, typedOther.rename_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd_replace_cols_params()).compareTo(typedOther.isSetAdd_replace_cols_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_replace_cols_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_replace_cols_params, typedOther.add_replace_cols_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd_partition_params()).compareTo(typedOther.isSetAdd_partition_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_partition_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_partition_params, typedOther.add_partition_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChange_col_params()).compareTo(typedOther.isSetChange_col_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChange_col_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.change_col_params, typedOther.change_col_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_col_params()).compareTo(typedOther.isSetDrop_col_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_col_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_col_params, typedOther.drop_col_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_partition_params()).compareTo(typedOther.isSetDrop_partition_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_partition_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_partition_params, typedOther.drop_partition_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_file_format_params()).compareTo(typedOther.isSetSet_file_format_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_file_format_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_file_format_params, typedOther.set_file_format_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_location_params()).compareTo(typedOther.isSetSet_location_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_location_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_location_params, typedOther.set_location_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableParams(");
    boolean first = true;

    sb.append("alter_type:");
    if (this.alter_type == null) {
      sb.append("null");
    } else {
      sb.append(this.alter_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetRename_params()) {
      if (!first) sb.append(", ");
      sb.append("rename_params:");
      if (this.rename_params == null) {
        sb.append("null");
      } else {
        sb.append(this.rename_params);
      }
      first = false;
    }
    if (isSetAdd_replace_cols_params()) {
      if (!first) sb.append(", ");
      sb.append("add_replace_cols_params:");
      if (this.add_replace_cols_params == null) {
        sb.append("null");
      } else {
        sb.append(this.add_replace_cols_params);
      }
      first = false;
    }
    if (isSetAdd_partition_params()) {
      if (!first) sb.append(", ");
      sb.append("add_partition_params:");
      if (this.add_partition_params == null) {
        sb.append("null");
      } else {
        sb.append(this.add_partition_params);
      }
      first = false;
    }
    if (isSetChange_col_params()) {
      if (!first) sb.append(", ");
      sb.append("change_col_params:");
      if (this.change_col_params == null) {
        sb.append("null");
      } else {
        sb.append(this.change_col_params);
      }
      first = false;
    }
    if (isSetDrop_col_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_col_params:");
      if (this.drop_col_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_col_params);
      }
      first = false;
    }
    if (isSetDrop_partition_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_partition_params:");
      if (this.drop_partition_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_partition_params);
      }
      first = false;
    }
    if (isSetSet_file_format_params()) {
      if (!first) sb.append(", ");
      sb.append("set_file_format_params:");
      if (this.set_file_format_params == null) {
        sb.append("null");
      } else {
        sb.append(this.set_file_format_params);
      }
      first = false;
    }
    if (isSetSet_location_params()) {
      if (!first) sb.append(", ");
      sb.append("set_location_params:");
      if (this.set_location_params == null) {
        sb.append("null");
      } else {
        sb.append(this.set_location_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (alter_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alter_type' was not present! Struct: " + toString());
    }
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (rename_params != null) {
      rename_params.validate();
    }
    if (add_replace_cols_params != null) {
      add_replace_cols_params.validate();
    }
    if (add_partition_params != null) {
      add_partition_params.validate();
    }
    if (change_col_params != null) {
      change_col_params.validate();
    }
    if (drop_col_params != null) {
      drop_col_params.validate();
    }
    if (drop_partition_params != null) {
      drop_partition_params.validate();
    }
    if (set_file_format_params != null) {
      set_file_format_params.validate();
    }
    if (set_location_params != null) {
      set_location_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableParamsStandardScheme getScheme() {
      return new TAlterTableParamsStandardScheme();
    }
  }

  private static class TAlterTableParamsStandardScheme extends StandardScheme<TAlterTableParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alter_type = TAlterTableType.findByValue(iprot.readI32());
              struct.setAlter_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RENAME_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rename_params = new TAlterTableOrViewRenameParams();
              struct.rename_params.read(iprot);
              struct.setRename_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADD_REPLACE_COLS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.add_replace_cols_params = new TAlterTableAddReplaceColsParams();
              struct.add_replace_cols_params.read(iprot);
              struct.setAdd_replace_cols_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADD_PARTITION_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.add_partition_params = new TAlterTableAddPartitionParams();
              struct.add_partition_params.read(iprot);
              struct.setAdd_partition_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANGE_COL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.change_col_params = new TAlterTableChangeColParams();
              struct.change_col_params.read(iprot);
              struct.setChange_col_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DROP_COL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_col_params = new TAlterTableDropColParams();
              struct.drop_col_params.read(iprot);
              struct.setDrop_col_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DROP_PARTITION_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_partition_params = new TAlterTableDropPartitionParams();
              struct.drop_partition_params.read(iprot);
              struct.setDrop_partition_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SET_FILE_FORMAT_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.set_file_format_params = new TAlterTableSetFileFormatParams();
              struct.set_file_format_params.read(iprot);
              struct.setSet_file_format_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SET_LOCATION_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.set_location_params = new TAlterTableSetLocationParams();
              struct.set_location_params.read(iprot);
              struct.setSet_location_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.alter_type != null) {
        oprot.writeFieldBegin(ALTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.alter_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rename_params != null) {
        if (struct.isSetRename_params()) {
          oprot.writeFieldBegin(RENAME_PARAMS_FIELD_DESC);
          struct.rename_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.add_replace_cols_params != null) {
        if (struct.isSetAdd_replace_cols_params()) {
          oprot.writeFieldBegin(ADD_REPLACE_COLS_PARAMS_FIELD_DESC);
          struct.add_replace_cols_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.add_partition_params != null) {
        if (struct.isSetAdd_partition_params()) {
          oprot.writeFieldBegin(ADD_PARTITION_PARAMS_FIELD_DESC);
          struct.add_partition_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.change_col_params != null) {
        if (struct.isSetChange_col_params()) {
          oprot.writeFieldBegin(CHANGE_COL_PARAMS_FIELD_DESC);
          struct.change_col_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_col_params != null) {
        if (struct.isSetDrop_col_params()) {
          oprot.writeFieldBegin(DROP_COL_PARAMS_FIELD_DESC);
          struct.drop_col_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_partition_params != null) {
        if (struct.isSetDrop_partition_params()) {
          oprot.writeFieldBegin(DROP_PARTITION_PARAMS_FIELD_DESC);
          struct.drop_partition_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_file_format_params != null) {
        if (struct.isSetSet_file_format_params()) {
          oprot.writeFieldBegin(SET_FILE_FORMAT_PARAMS_FIELD_DESC);
          struct.set_file_format_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_location_params != null) {
        if (struct.isSetSet_location_params()) {
          oprot.writeFieldBegin(SET_LOCATION_PARAMS_FIELD_DESC);
          struct.set_location_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableParamsTupleScheme getScheme() {
      return new TAlterTableParamsTupleScheme();
    }
  }

  private static class TAlterTableParamsTupleScheme extends TupleScheme<TAlterTableParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.alter_type.getValue());
      struct.table_name.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetRename_params()) {
        optionals.set(0);
      }
      if (struct.isSetAdd_replace_cols_params()) {
        optionals.set(1);
      }
      if (struct.isSetAdd_partition_params()) {
        optionals.set(2);
      }
      if (struct.isSetChange_col_params()) {
        optionals.set(3);
      }
      if (struct.isSetDrop_col_params()) {
        optionals.set(4);
      }
      if (struct.isSetDrop_partition_params()) {
        optionals.set(5);
      }
      if (struct.isSetSet_file_format_params()) {
        optionals.set(6);
      }
      if (struct.isSetSet_location_params()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRename_params()) {
        struct.rename_params.write(oprot);
      }
      if (struct.isSetAdd_replace_cols_params()) {
        struct.add_replace_cols_params.write(oprot);
      }
      if (struct.isSetAdd_partition_params()) {
        struct.add_partition_params.write(oprot);
      }
      if (struct.isSetChange_col_params()) {
        struct.change_col_params.write(oprot);
      }
      if (struct.isSetDrop_col_params()) {
        struct.drop_col_params.write(oprot);
      }
      if (struct.isSetDrop_partition_params()) {
        struct.drop_partition_params.write(oprot);
      }
      if (struct.isSetSet_file_format_params()) {
        struct.set_file_format_params.write(oprot);
      }
      if (struct.isSetSet_location_params()) {
        struct.set_location_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.alter_type = TAlterTableType.findByValue(iprot.readI32());
      struct.setAlter_typeIsSet(true);
      struct.table_name = new TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.rename_params = new TAlterTableOrViewRenameParams();
        struct.rename_params.read(iprot);
        struct.setRename_paramsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.add_replace_cols_params = new TAlterTableAddReplaceColsParams();
        struct.add_replace_cols_params.read(iprot);
        struct.setAdd_replace_cols_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.add_partition_params = new TAlterTableAddPartitionParams();
        struct.add_partition_params.read(iprot);
        struct.setAdd_partition_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.change_col_params = new TAlterTableChangeColParams();
        struct.change_col_params.read(iprot);
        struct.setChange_col_paramsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.drop_col_params = new TAlterTableDropColParams();
        struct.drop_col_params.read(iprot);
        struct.setDrop_col_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.drop_partition_params = new TAlterTableDropPartitionParams();
        struct.drop_partition_params.read(iprot);
        struct.setDrop_partition_paramsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.set_file_format_params = new TAlterTableSetFileFormatParams();
        struct.set_file_format_params.read(iprot);
        struct.setSet_file_format_paramsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.set_location_params = new TAlterTableSetLocationParams();
        struct.set_location_params.read(iprot);
        struct.setSet_location_paramsIsSet(true);
      }
    }
  }

}

