/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTableDescriptor implements org.apache.thrift.TBase<TTableDescriptor, TTableDescriptor._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableDescriptor");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tableType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("numCols", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_CLUSTERING_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClusteringCols", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HDFS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfsTable", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField HBASE_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hbaseTable", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dbName", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableDescriptorTupleSchemeFactory());
  }

  public int id; // required
  /**
   * 
   * @see TTableType
   */
  public TTableType tableType; // required
  public int numCols; // required
  public int numClusteringCols; // required
  public THdfsTable hdfsTable; // optional
  public THBaseTable hbaseTable; // optional
  public String tableName; // required
  public String dbName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see TTableType
     */
    TABLE_TYPE((short)2, "tableType"),
    NUM_COLS((short)3, "numCols"),
    NUM_CLUSTERING_COLS((short)4, "numClusteringCols"),
    HDFS_TABLE((short)5, "hdfsTable"),
    HBASE_TABLE((short)6, "hbaseTable"),
    TABLE_NAME((short)7, "tableName"),
    DB_NAME((short)8, "dbName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TABLE_TYPE
          return TABLE_TYPE;
        case 3: // NUM_COLS
          return NUM_COLS;
        case 4: // NUM_CLUSTERING_COLS
          return NUM_CLUSTERING_COLS;
        case 5: // HDFS_TABLE
          return HDFS_TABLE;
        case 6: // HBASE_TABLE
          return HBASE_TABLE;
        case 7: // TABLE_NAME
          return TABLE_NAME;
        case 8: // DB_NAME
          return DB_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NUMCOLS_ISSET_ID = 1;
  private static final int __NUMCLUSTERINGCOLS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.HDFS_TABLE,_Fields.HBASE_TABLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTableId")));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tableType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTableType.class)));
    tmpMap.put(_Fields.NUM_COLS, new org.apache.thrift.meta_data.FieldMetaData("numCols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_CLUSTERING_COLS, new org.apache.thrift.meta_data.FieldMetaData("numClusteringCols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HDFS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hdfsTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsTable.class)));
    tmpMap.put(_Fields.HBASE_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hbaseTable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THBaseTable.class)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("dbName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableDescriptor.class, metaDataMap);
  }

  public TTableDescriptor() {
  }

  public TTableDescriptor(
    int id,
    TTableType tableType,
    int numCols,
    int numClusteringCols,
    String tableName,
    String dbName)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.tableType = tableType;
    this.numCols = numCols;
    setNumColsIsSet(true);
    this.numClusteringCols = numClusteringCols;
    setNumClusteringColsIsSet(true);
    this.tableName = tableName;
    this.dbName = dbName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableDescriptor(TTableDescriptor other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetTableType()) {
      this.tableType = other.tableType;
    }
    this.numCols = other.numCols;
    this.numClusteringCols = other.numClusteringCols;
    if (other.isSetHdfsTable()) {
      this.hdfsTable = new THdfsTable(other.hdfsTable);
    }
    if (other.isSetHbaseTable()) {
      this.hbaseTable = new THBaseTable(other.hbaseTable);
    }
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetDbName()) {
      this.dbName = other.dbName;
    }
  }

  public TTableDescriptor deepCopy() {
    return new TTableDescriptor(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.tableType = null;
    setNumColsIsSet(false);
    this.numCols = 0;
    setNumClusteringColsIsSet(false);
    this.numClusteringCols = 0;
    this.hdfsTable = null;
    this.hbaseTable = null;
    this.tableName = null;
    this.dbName = null;
  }

  public int getId() {
    return this.id;
  }

  public TTableDescriptor setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TTableType
   */
  public TTableType getTableType() {
    return this.tableType;
  }

  /**
   * 
   * @see TTableType
   */
  public TTableDescriptor setTableType(TTableType tableType) {
    this.tableType = tableType;
    return this;
  }

  public void unsetTableType() {
    this.tableType = null;
  }

  /** Returns true if field tableType is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.tableType != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.tableType = null;
    }
  }

  public int getNumCols() {
    return this.numCols;
  }

  public TTableDescriptor setNumCols(int numCols) {
    this.numCols = numCols;
    setNumColsIsSet(true);
    return this;
  }

  public void unsetNumCols() {
    __isset_bit_vector.clear(__NUMCOLS_ISSET_ID);
  }

  /** Returns true if field numCols is set (has been assigned a value) and false otherwise */
  public boolean isSetNumCols() {
    return __isset_bit_vector.get(__NUMCOLS_ISSET_ID);
  }

  public void setNumColsIsSet(boolean value) {
    __isset_bit_vector.set(__NUMCOLS_ISSET_ID, value);
  }

  public int getNumClusteringCols() {
    return this.numClusteringCols;
  }

  public TTableDescriptor setNumClusteringCols(int numClusteringCols) {
    this.numClusteringCols = numClusteringCols;
    setNumClusteringColsIsSet(true);
    return this;
  }

  public void unsetNumClusteringCols() {
    __isset_bit_vector.clear(__NUMCLUSTERINGCOLS_ISSET_ID);
  }

  /** Returns true if field numClusteringCols is set (has been assigned a value) and false otherwise */
  public boolean isSetNumClusteringCols() {
    return __isset_bit_vector.get(__NUMCLUSTERINGCOLS_ISSET_ID);
  }

  public void setNumClusteringColsIsSet(boolean value) {
    __isset_bit_vector.set(__NUMCLUSTERINGCOLS_ISSET_ID, value);
  }

  public THdfsTable getHdfsTable() {
    return this.hdfsTable;
  }

  public TTableDescriptor setHdfsTable(THdfsTable hdfsTable) {
    this.hdfsTable = hdfsTable;
    return this;
  }

  public void unsetHdfsTable() {
    this.hdfsTable = null;
  }

  /** Returns true if field hdfsTable is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfsTable() {
    return this.hdfsTable != null;
  }

  public void setHdfsTableIsSet(boolean value) {
    if (!value) {
      this.hdfsTable = null;
    }
  }

  public THBaseTable getHbaseTable() {
    return this.hbaseTable;
  }

  public TTableDescriptor setHbaseTable(THBaseTable hbaseTable) {
    this.hbaseTable = hbaseTable;
    return this;
  }

  public void unsetHbaseTable() {
    this.hbaseTable = null;
  }

  /** Returns true if field hbaseTable is set (has been assigned a value) and false otherwise */
  public boolean isSetHbaseTable() {
    return this.hbaseTable != null;
  }

  public void setHbaseTableIsSet(boolean value) {
    if (!value) {
      this.hbaseTable = null;
    }
  }

  public String getTableName() {
    return this.tableName;
  }

  public TTableDescriptor setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getDbName() {
    return this.dbName;
  }

  public TTableDescriptor setDbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

  public void unsetDbName() {
    this.dbName = null;
  }

  /** Returns true if field dbName is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.dbName != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.dbName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((TTableType)value);
      }
      break;

    case NUM_COLS:
      if (value == null) {
        unsetNumCols();
      } else {
        setNumCols((Integer)value);
      }
      break;

    case NUM_CLUSTERING_COLS:
      if (value == null) {
        unsetNumClusteringCols();
      } else {
        setNumClusteringCols((Integer)value);
      }
      break;

    case HDFS_TABLE:
      if (value == null) {
        unsetHdfsTable();
      } else {
        setHdfsTable((THdfsTable)value);
      }
      break;

    case HBASE_TABLE:
      if (value == null) {
        unsetHbaseTable();
      } else {
        setHbaseTable((THBaseTable)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case TABLE_TYPE:
      return getTableType();

    case NUM_COLS:
      return Integer.valueOf(getNumCols());

    case NUM_CLUSTERING_COLS:
      return Integer.valueOf(getNumClusteringCols());

    case HDFS_TABLE:
      return getHdfsTable();

    case HBASE_TABLE:
      return getHbaseTable();

    case TABLE_NAME:
      return getTableName();

    case DB_NAME:
      return getDbName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TABLE_TYPE:
      return isSetTableType();
    case NUM_COLS:
      return isSetNumCols();
    case NUM_CLUSTERING_COLS:
      return isSetNumClusteringCols();
    case HDFS_TABLE:
      return isSetHdfsTable();
    case HBASE_TABLE:
      return isSetHbaseTable();
    case TABLE_NAME:
      return isSetTableName();
    case DB_NAME:
      return isSetDbName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableDescriptor)
      return this.equals((TTableDescriptor)that);
    return false;
  }

  public boolean equals(TTableDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_tableType = true && this.isSetTableType();
    boolean that_present_tableType = true && that.isSetTableType();
    if (this_present_tableType || that_present_tableType) {
      if (!(this_present_tableType && that_present_tableType))
        return false;
      if (!this.tableType.equals(that.tableType))
        return false;
    }

    boolean this_present_numCols = true;
    boolean that_present_numCols = true;
    if (this_present_numCols || that_present_numCols) {
      if (!(this_present_numCols && that_present_numCols))
        return false;
      if (this.numCols != that.numCols)
        return false;
    }

    boolean this_present_numClusteringCols = true;
    boolean that_present_numClusteringCols = true;
    if (this_present_numClusteringCols || that_present_numClusteringCols) {
      if (!(this_present_numClusteringCols && that_present_numClusteringCols))
        return false;
      if (this.numClusteringCols != that.numClusteringCols)
        return false;
    }

    boolean this_present_hdfsTable = true && this.isSetHdfsTable();
    boolean that_present_hdfsTable = true && that.isSetHdfsTable();
    if (this_present_hdfsTable || that_present_hdfsTable) {
      if (!(this_present_hdfsTable && that_present_hdfsTable))
        return false;
      if (!this.hdfsTable.equals(that.hdfsTable))
        return false;
    }

    boolean this_present_hbaseTable = true && this.isSetHbaseTable();
    boolean that_present_hbaseTable = true && that.isSetHbaseTable();
    if (this_present_hbaseTable || that_present_hbaseTable) {
      if (!(this_present_hbaseTable && that_present_hbaseTable))
        return false;
      if (!this.hbaseTable.equals(that.hbaseTable))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_dbName = true && this.isSetDbName();
    boolean that_present_dbName = true && that.isSetDbName();
    if (this_present_dbName || that_present_dbName) {
      if (!(this_present_dbName && that_present_dbName))
        return false;
      if (!this.dbName.equals(that.dbName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTableDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTableDescriptor typedOther = (TTableDescriptor)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableType()).compareTo(typedOther.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableType, typedOther.tableType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumCols()).compareTo(typedOther.isSetNumCols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumCols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCols, typedOther.numCols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumClusteringCols()).compareTo(typedOther.isSetNumClusteringCols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumClusteringCols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClusteringCols, typedOther.numClusteringCols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHdfsTable()).compareTo(typedOther.isSetHdfsTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfsTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfsTable, typedOther.hdfsTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbaseTable()).compareTo(typedOther.isSetHbaseTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbaseTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbaseTable, typedOther.hbaseTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(typedOther.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, typedOther.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbName()).compareTo(typedOther.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbName, typedOther.dbName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableDescriptor(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableType:");
    if (this.tableType == null) {
      sb.append("null");
    } else {
      sb.append(this.tableType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numCols:");
    sb.append(this.numCols);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numClusteringCols:");
    sb.append(this.numClusteringCols);
    first = false;
    if (isSetHdfsTable()) {
      if (!first) sb.append(", ");
      sb.append("hdfsTable:");
      if (this.hdfsTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfsTable);
      }
      first = false;
    }
    if (isSetHbaseTable()) {
      if (!first) sb.append(", ");
      sb.append("hbaseTable:");
      if (this.hbaseTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hbaseTable);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dbName:");
    if (this.dbName == null) {
      sb.append("null");
    } else {
      sb.append(this.dbName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (tableType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numCols' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numClusteringCols' because it's a primitive and you chose the non-beans generator.
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    if (dbName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dbName' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableDescriptorStandardSchemeFactory implements SchemeFactory {
    public TTableDescriptorStandardScheme getScheme() {
      return new TTableDescriptorStandardScheme();
    }
  }

  private static class TTableDescriptorStandardScheme extends StandardScheme<TTableDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tableType = TTableType.findByValue(iprot.readI32());
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numCols = iprot.readI32();
              struct.setNumColsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_CLUSTERING_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numClusteringCols = iprot.readI32();
              struct.setNumClusteringColsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HDFS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfsTable = new THdfsTable();
              struct.hdfsTable.read(iprot);
              struct.setHdfsTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HBASE_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hbaseTable = new THBaseTable();
              struct.hbaseTable.read(iprot);
              struct.setHbaseTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dbName = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumCols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numCols' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumClusteringCols()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numClusteringCols' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.tableType != null) {
        oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.tableType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_COLS_FIELD_DESC);
      oprot.writeI32(struct.numCols);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_CLUSTERING_COLS_FIELD_DESC);
      oprot.writeI32(struct.numClusteringCols);
      oprot.writeFieldEnd();
      if (struct.hdfsTable != null) {
        if (struct.isSetHdfsTable()) {
          oprot.writeFieldBegin(HDFS_TABLE_FIELD_DESC);
          struct.hdfsTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hbaseTable != null) {
        if (struct.isSetHbaseTable()) {
          oprot.writeFieldBegin(HBASE_TABLE_FIELD_DESC);
          struct.hbaseTable.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.dbName != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.dbName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableDescriptorTupleSchemeFactory implements SchemeFactory {
    public TTableDescriptorTupleScheme getScheme() {
      return new TTableDescriptorTupleScheme();
    }
  }

  private static class TTableDescriptorTupleScheme extends TupleScheme<TTableDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.tableType.getValue());
      oprot.writeI32(struct.numCols);
      oprot.writeI32(struct.numClusteringCols);
      oprot.writeString(struct.tableName);
      oprot.writeString(struct.dbName);
      BitSet optionals = new BitSet();
      if (struct.isSetHdfsTable()) {
        optionals.set(0);
      }
      if (struct.isSetHbaseTable()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHdfsTable()) {
        struct.hdfsTable.write(oprot);
      }
      if (struct.isSetHbaseTable()) {
        struct.hbaseTable.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.tableType = TTableType.findByValue(iprot.readI32());
      struct.setTableTypeIsSet(true);
      struct.numCols = iprot.readI32();
      struct.setNumColsIsSet(true);
      struct.numClusteringCols = iprot.readI32();
      struct.setNumClusteringColsIsSet(true);
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.hdfsTable = new THdfsTable();
        struct.hdfsTable.read(iprot);
        struct.setHdfsTableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hbaseTable = new THBaseTable();
        struct.hbaseTable.read(iprot);
        struct.setHbaseTableIsSet(true);
      }
    }
  }

}

