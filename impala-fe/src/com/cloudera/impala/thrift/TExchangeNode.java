/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExchangeNode implements org.apache.thrift.TBase<TExchangeNode, TExchangeNode._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExchangeNode");

  private static final org.apache.thrift.protocol.TField INPUT_ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("input_row_tuples", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExchangeNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExchangeNodeTupleSchemeFactory());
  }

  public List<Integer> input_row_tuples; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_ROW_TUPLES((short)1, "input_row_tuples");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_ROW_TUPLES
          return INPUT_ROW_TUPLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("input_row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExchangeNode.class, metaDataMap);
  }

  public TExchangeNode() {
  }

  public TExchangeNode(
    List<Integer> input_row_tuples)
  {
    this();
    this.input_row_tuples = input_row_tuples;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExchangeNode(TExchangeNode other) {
    if (other.isSetInput_row_tuples()) {
      List<Integer> __this__input_row_tuples = new ArrayList<Integer>();
      for (Integer other_element : other.input_row_tuples) {
        __this__input_row_tuples.add(other_element);
      }
      this.input_row_tuples = __this__input_row_tuples;
    }
  }

  public TExchangeNode deepCopy() {
    return new TExchangeNode(this);
  }

  @Override
  public void clear() {
    this.input_row_tuples = null;
  }

  public int getInput_row_tuplesSize() {
    return (this.input_row_tuples == null) ? 0 : this.input_row_tuples.size();
  }

  public java.util.Iterator<Integer> getInput_row_tuplesIterator() {
    return (this.input_row_tuples == null) ? null : this.input_row_tuples.iterator();
  }

  public void addToInput_row_tuples(int elem) {
    if (this.input_row_tuples == null) {
      this.input_row_tuples = new ArrayList<Integer>();
    }
    this.input_row_tuples.add(elem);
  }

  public List<Integer> getInput_row_tuples() {
    return this.input_row_tuples;
  }

  public TExchangeNode setInput_row_tuples(List<Integer> input_row_tuples) {
    this.input_row_tuples = input_row_tuples;
    return this;
  }

  public void unsetInput_row_tuples() {
    this.input_row_tuples = null;
  }

  /** Returns true if field input_row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_row_tuples() {
    return this.input_row_tuples != null;
  }

  public void setInput_row_tuplesIsSet(boolean value) {
    if (!value) {
      this.input_row_tuples = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      if (value == null) {
        unsetInput_row_tuples();
      } else {
        setInput_row_tuples((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      return getInput_row_tuples();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INPUT_ROW_TUPLES:
      return isSetInput_row_tuples();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExchangeNode)
      return this.equals((TExchangeNode)that);
    return false;
  }

  public boolean equals(TExchangeNode that) {
    if (that == null)
      return false;

    boolean this_present_input_row_tuples = true && this.isSetInput_row_tuples();
    boolean that_present_input_row_tuples = true && that.isSetInput_row_tuples();
    if (this_present_input_row_tuples || that_present_input_row_tuples) {
      if (!(this_present_input_row_tuples && that_present_input_row_tuples))
        return false;
      if (!this.input_row_tuples.equals(that.input_row_tuples))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TExchangeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExchangeNode typedOther = (TExchangeNode)other;

    lastComparison = Boolean.valueOf(isSetInput_row_tuples()).compareTo(typedOther.isSetInput_row_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_row_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_row_tuples, typedOther.input_row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExchangeNode(");
    boolean first = true;

    sb.append("input_row_tuples:");
    if (this.input_row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.input_row_tuples);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (input_row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_row_tuples' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExchangeNodeStandardSchemeFactory implements SchemeFactory {
    public TExchangeNodeStandardScheme getScheme() {
      return new TExchangeNodeStandardScheme();
    }
  }

  private static class TExchangeNodeStandardScheme extends StandardScheme<TExchangeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExchangeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.input_row_tuples = new ArrayList<Integer>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  int _elem90; // required
                  _elem90 = iprot.readI32();
                  struct.input_row_tuples.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setInput_row_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExchangeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.input_row_tuples != null) {
        oprot.writeFieldBegin(INPUT_ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.input_row_tuples.size()));
          for (int _iter91 : struct.input_row_tuples)
          {
            oprot.writeI32(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExchangeNodeTupleSchemeFactory implements SchemeFactory {
    public TExchangeNodeTupleScheme getScheme() {
      return new TExchangeNodeTupleScheme();
    }
  }

  private static class TExchangeNodeTupleScheme extends TupleScheme<TExchangeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.input_row_tuples.size());
        for (int _iter92 : struct.input_row_tuples)
        {
          oprot.writeI32(_iter92);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.input_row_tuples = new ArrayList<Integer>(_list93.size);
        for (int _i94 = 0; _i94 < _list93.size; ++_i94)
        {
          int _elem95; // required
          _elem95 = iprot.readI32();
          struct.input_row_tuples.add(_elem95);
        }
      }
      struct.setInput_row_tuplesIsSet(true);
    }
  }

}

