/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueryOptions implements org.apache.thrift.TBase<TQueryOptions, TQueryOptions._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryOptions");

  private static final org.apache.thrift.protocol.TField ABORT_ON_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_error", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_errors", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_nodes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_RANGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_range_length", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_SCANNER_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_scanner_threads", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_IO_BUFFERS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_io_buffers", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ALLOW_UNSUPPORTED_FORMATS_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_unsupported_formats", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DEFAULT_ORDER_BY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_order_by_limit", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField DEBUG_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_action", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_default_limit_exceeded", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField PARQUET_COMPRESSION_CODEC_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_compression_codec", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField HBASE_CACHING_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_caching", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HBASE_CACHE_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_cache_blocks", org.apache.thrift.protocol.TType.BOOL, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryOptionsTupleSchemeFactory());
  }

  public boolean abort_on_error; // optional
  public int max_errors; // optional
  public boolean disable_codegen; // optional
  public int batch_size; // optional
  public int num_nodes; // optional
  public long max_scan_range_length; // optional
  public int num_scanner_threads; // optional
  public int max_io_buffers; // optional
  public boolean allow_unsupported_formats; // optional
  public long default_order_by_limit; // optional
  public String debug_action; // optional
  public long mem_limit; // optional
  public boolean abort_on_default_limit_exceeded; // optional
  /**
   * 
   * @see com.cloudera.impala.thrift.THdfsCompression
   */
  public com.cloudera.impala.thrift.THdfsCompression parquet_compression_codec; // optional
  public int hbase_caching; // optional
  public boolean hbase_cache_blocks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABORT_ON_ERROR((short)1, "abort_on_error"),
    MAX_ERRORS((short)2, "max_errors"),
    DISABLE_CODEGEN((short)3, "disable_codegen"),
    BATCH_SIZE((short)4, "batch_size"),
    NUM_NODES((short)5, "num_nodes"),
    MAX_SCAN_RANGE_LENGTH((short)6, "max_scan_range_length"),
    NUM_SCANNER_THREADS((short)7, "num_scanner_threads"),
    MAX_IO_BUFFERS((short)8, "max_io_buffers"),
    ALLOW_UNSUPPORTED_FORMATS((short)9, "allow_unsupported_formats"),
    DEFAULT_ORDER_BY_LIMIT((short)10, "default_order_by_limit"),
    DEBUG_ACTION((short)11, "debug_action"),
    MEM_LIMIT((short)12, "mem_limit"),
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED((short)13, "abort_on_default_limit_exceeded"),
    /**
     * 
     * @see com.cloudera.impala.thrift.THdfsCompression
     */
    PARQUET_COMPRESSION_CODEC((short)14, "parquet_compression_codec"),
    HBASE_CACHING((short)15, "hbase_caching"),
    HBASE_CACHE_BLOCKS((short)16, "hbase_cache_blocks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABORT_ON_ERROR
          return ABORT_ON_ERROR;
        case 2: // MAX_ERRORS
          return MAX_ERRORS;
        case 3: // DISABLE_CODEGEN
          return DISABLE_CODEGEN;
        case 4: // BATCH_SIZE
          return BATCH_SIZE;
        case 5: // NUM_NODES
          return NUM_NODES;
        case 6: // MAX_SCAN_RANGE_LENGTH
          return MAX_SCAN_RANGE_LENGTH;
        case 7: // NUM_SCANNER_THREADS
          return NUM_SCANNER_THREADS;
        case 8: // MAX_IO_BUFFERS
          return MAX_IO_BUFFERS;
        case 9: // ALLOW_UNSUPPORTED_FORMATS
          return ALLOW_UNSUPPORTED_FORMATS;
        case 10: // DEFAULT_ORDER_BY_LIMIT
          return DEFAULT_ORDER_BY_LIMIT;
        case 11: // DEBUG_ACTION
          return DEBUG_ACTION;
        case 12: // MEM_LIMIT
          return MEM_LIMIT;
        case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
          return ABORT_ON_DEFAULT_LIMIT_EXCEEDED;
        case 14: // PARQUET_COMPRESSION_CODEC
          return PARQUET_COMPRESSION_CODEC;
        case 15: // HBASE_CACHING
          return HBASE_CACHING;
        case 16: // HBASE_CACHE_BLOCKS
          return HBASE_CACHE_BLOCKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ABORT_ON_ERROR_ISSET_ID = 0;
  private static final int __MAX_ERRORS_ISSET_ID = 1;
  private static final int __DISABLE_CODEGEN_ISSET_ID = 2;
  private static final int __BATCH_SIZE_ISSET_ID = 3;
  private static final int __NUM_NODES_ISSET_ID = 4;
  private static final int __MAX_SCAN_RANGE_LENGTH_ISSET_ID = 5;
  private static final int __NUM_SCANNER_THREADS_ISSET_ID = 6;
  private static final int __MAX_IO_BUFFERS_ISSET_ID = 7;
  private static final int __ALLOW_UNSUPPORTED_FORMATS_ISSET_ID = 8;
  private static final int __DEFAULT_ORDER_BY_LIMIT_ISSET_ID = 9;
  private static final int __MEM_LIMIT_ISSET_ID = 10;
  private static final int __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID = 11;
  private static final int __HBASE_CACHING_ISSET_ID = 12;
  private static final int __HBASE_CACHE_BLOCKS_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ABORT_ON_ERROR,_Fields.MAX_ERRORS,_Fields.DISABLE_CODEGEN,_Fields.BATCH_SIZE,_Fields.NUM_NODES,_Fields.MAX_SCAN_RANGE_LENGTH,_Fields.NUM_SCANNER_THREADS,_Fields.MAX_IO_BUFFERS,_Fields.ALLOW_UNSUPPORTED_FORMATS,_Fields.DEFAULT_ORDER_BY_LIMIT,_Fields.DEBUG_ACTION,_Fields.MEM_LIMIT,_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED,_Fields.PARQUET_COMPRESSION_CODEC,_Fields.HBASE_CACHING,_Fields.HBASE_CACHE_BLOCKS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABORT_ON_ERROR, new org.apache.thrift.meta_data.FieldMetaData("abort_on_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_ERRORS, new org.apache.thrift.meta_data.FieldMetaData("max_errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_CODEGEN, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_NODES, new org.apache.thrift.meta_data.FieldMetaData("num_nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SCAN_RANGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("max_scan_range_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_SCANNER_THREADS, new org.apache.thrift.meta_data.FieldMetaData("num_scanner_threads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_IO_BUFFERS, new org.apache.thrift.meta_data.FieldMetaData("max_io_buffers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOW_UNSUPPORTED_FORMATS, new org.apache.thrift.meta_data.FieldMetaData("allow_unsupported_formats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_ORDER_BY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("default_order_by_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEBUG_ACTION, new org.apache.thrift.meta_data.FieldMetaData("debug_action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED, new org.apache.thrift.meta_data.FieldMetaData("abort_on_default_limit_exceeded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_COMPRESSION_CODEC, new org.apache.thrift.meta_data.FieldMetaData("parquet_compression_codec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.cloudera.impala.thrift.THdfsCompression.class)));
    tmpMap.put(_Fields.HBASE_CACHING, new org.apache.thrift.meta_data.FieldMetaData("hbase_caching", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HBASE_CACHE_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("hbase_cache_blocks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryOptions.class, metaDataMap);
  }

  public TQueryOptions() {
    this.abort_on_error = false;

    this.max_errors = 0;

    this.disable_codegen = false;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.max_io_buffers = 0;

    this.allow_unsupported_formats = false;

    this.default_order_by_limit = -1L;

    this.debug_action = "";

    this.mem_limit = 0L;

    this.abort_on_default_limit_exceeded = false;

    this.parquet_compression_codec = com.cloudera.impala.thrift.THdfsCompression.SNAPPY;

    this.hbase_caching = 0;

    this.hbase_cache_blocks = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryOptions(TQueryOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.abort_on_error = other.abort_on_error;
    this.max_errors = other.max_errors;
    this.disable_codegen = other.disable_codegen;
    this.batch_size = other.batch_size;
    this.num_nodes = other.num_nodes;
    this.max_scan_range_length = other.max_scan_range_length;
    this.num_scanner_threads = other.num_scanner_threads;
    this.max_io_buffers = other.max_io_buffers;
    this.allow_unsupported_formats = other.allow_unsupported_formats;
    this.default_order_by_limit = other.default_order_by_limit;
    if (other.isSetDebug_action()) {
      this.debug_action = other.debug_action;
    }
    this.mem_limit = other.mem_limit;
    this.abort_on_default_limit_exceeded = other.abort_on_default_limit_exceeded;
    if (other.isSetParquet_compression_codec()) {
      this.parquet_compression_codec = other.parquet_compression_codec;
    }
    this.hbase_caching = other.hbase_caching;
    this.hbase_cache_blocks = other.hbase_cache_blocks;
  }

  public TQueryOptions deepCopy() {
    return new TQueryOptions(this);
  }

  @Override
  public void clear() {
    this.abort_on_error = false;

    this.max_errors = 0;

    this.disable_codegen = false;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.max_io_buffers = 0;

    this.allow_unsupported_formats = false;

    this.default_order_by_limit = -1L;

    this.debug_action = "";

    this.mem_limit = 0L;

    this.abort_on_default_limit_exceeded = false;

    this.parquet_compression_codec = com.cloudera.impala.thrift.THdfsCompression.SNAPPY;

    this.hbase_caching = 0;

    this.hbase_cache_blocks = false;

  }

  public boolean isAbort_on_error() {
    return this.abort_on_error;
  }

  public TQueryOptions setAbort_on_error(boolean abort_on_error) {
    this.abort_on_error = abort_on_error;
    setAbort_on_errorIsSet(true);
    return this;
  }

  public void unsetAbort_on_error() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABORT_ON_ERROR_ISSET_ID);
  }

  /** Returns true if field abort_on_error is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_on_error() {
    return EncodingUtils.testBit(__isset_bitfield, __ABORT_ON_ERROR_ISSET_ID);
  }

  public void setAbort_on_errorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABORT_ON_ERROR_ISSET_ID, value);
  }

  public int getMax_errors() {
    return this.max_errors;
  }

  public TQueryOptions setMax_errors(int max_errors) {
    this.max_errors = max_errors;
    setMax_errorsIsSet(true);
    return this;
  }

  public void unsetMax_errors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID);
  }

  /** Returns true if field max_errors is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_errors() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID);
  }

  public void setMax_errorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ERRORS_ISSET_ID, value);
  }

  public boolean isDisable_codegen() {
    return this.disable_codegen;
  }

  public TQueryOptions setDisable_codegen(boolean disable_codegen) {
    this.disable_codegen = disable_codegen;
    setDisable_codegenIsSet(true);
    return this;
  }

  public void unsetDisable_codegen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID);
  }

  /** Returns true if field disable_codegen is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_codegen() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID);
  }

  public void setDisable_codegenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID, value);
  }

  public int getBatch_size() {
    return this.batch_size;
  }

  public TQueryOptions setBatch_size(int batch_size) {
    this.batch_size = batch_size;
    setBatch_sizeIsSet(true);
    return this;
  }

  public void unsetBatch_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_size() {
    return EncodingUtils.testBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  public void setBatch_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID, value);
  }

  public int getNum_nodes() {
    return this.num_nodes;
  }

  public TQueryOptions setNum_nodes(int num_nodes) {
    this.num_nodes = num_nodes;
    setNum_nodesIsSet(true);
    return this;
  }

  public void unsetNum_nodes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_NODES_ISSET_ID);
  }

  /** Returns true if field num_nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_nodes() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_NODES_ISSET_ID);
  }

  public void setNum_nodesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_NODES_ISSET_ID, value);
  }

  public long getMax_scan_range_length() {
    return this.max_scan_range_length;
  }

  public TQueryOptions setMax_scan_range_length(long max_scan_range_length) {
    this.max_scan_range_length = max_scan_range_length;
    setMax_scan_range_lengthIsSet(true);
    return this;
  }

  public void unsetMax_scan_range_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field max_scan_range_length is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_scan_range_length() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  public void setMax_scan_range_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SCAN_RANGE_LENGTH_ISSET_ID, value);
  }

  public int getNum_scanner_threads() {
    return this.num_scanner_threads;
  }

  public TQueryOptions setNum_scanner_threads(int num_scanner_threads) {
    this.num_scanner_threads = num_scanner_threads;
    setNum_scanner_threadsIsSet(true);
    return this;
  }

  public void unsetNum_scanner_threads() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_SCANNER_THREADS_ISSET_ID);
  }

  /** Returns true if field num_scanner_threads is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_scanner_threads() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_SCANNER_THREADS_ISSET_ID);
  }

  public void setNum_scanner_threadsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_SCANNER_THREADS_ISSET_ID, value);
  }

  public int getMax_io_buffers() {
    return this.max_io_buffers;
  }

  public TQueryOptions setMax_io_buffers(int max_io_buffers) {
    this.max_io_buffers = max_io_buffers;
    setMax_io_buffersIsSet(true);
    return this;
  }

  public void unsetMax_io_buffers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_IO_BUFFERS_ISSET_ID);
  }

  /** Returns true if field max_io_buffers is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_io_buffers() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_IO_BUFFERS_ISSET_ID);
  }

  public void setMax_io_buffersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_IO_BUFFERS_ISSET_ID, value);
  }

  public boolean isAllow_unsupported_formats() {
    return this.allow_unsupported_formats;
  }

  public TQueryOptions setAllow_unsupported_formats(boolean allow_unsupported_formats) {
    this.allow_unsupported_formats = allow_unsupported_formats;
    setAllow_unsupported_formatsIsSet(true);
    return this;
  }

  public void unsetAllow_unsupported_formats() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOW_UNSUPPORTED_FORMATS_ISSET_ID);
  }

  /** Returns true if field allow_unsupported_formats is set (has been assigned a value) and false otherwise */
  public boolean isSetAllow_unsupported_formats() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOW_UNSUPPORTED_FORMATS_ISSET_ID);
  }

  public void setAllow_unsupported_formatsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOW_UNSUPPORTED_FORMATS_ISSET_ID, value);
  }

  public long getDefault_order_by_limit() {
    return this.default_order_by_limit;
  }

  public TQueryOptions setDefault_order_by_limit(long default_order_by_limit) {
    this.default_order_by_limit = default_order_by_limit;
    setDefault_order_by_limitIsSet(true);
    return this;
  }

  public void unsetDefault_order_by_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULT_ORDER_BY_LIMIT_ISSET_ID);
  }

  /** Returns true if field default_order_by_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_order_by_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULT_ORDER_BY_LIMIT_ISSET_ID);
  }

  public void setDefault_order_by_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULT_ORDER_BY_LIMIT_ISSET_ID, value);
  }

  public String getDebug_action() {
    return this.debug_action;
  }

  public TQueryOptions setDebug_action(String debug_action) {
    this.debug_action = debug_action;
    return this;
  }

  public void unsetDebug_action() {
    this.debug_action = null;
  }

  /** Returns true if field debug_action is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_action() {
    return this.debug_action != null;
  }

  public void setDebug_actionIsSet(boolean value) {
    if (!value) {
      this.debug_action = null;
    }
  }

  public long getMem_limit() {
    return this.mem_limit;
  }

  public TQueryOptions setMem_limit(long mem_limit) {
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
    return this;
  }

  public void unsetMem_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID);
  }

  public void setMem_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isAbort_on_default_limit_exceeded() {
    return this.abort_on_default_limit_exceeded;
  }

  public TQueryOptions setAbort_on_default_limit_exceeded(boolean abort_on_default_limit_exceeded) {
    this.abort_on_default_limit_exceeded = abort_on_default_limit_exceeded;
    setAbort_on_default_limit_exceededIsSet(true);
    return this;
  }

  public void unsetAbort_on_default_limit_exceeded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  /** Returns true if field abort_on_default_limit_exceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_on_default_limit_exceeded() {
    return EncodingUtils.testBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  public void setAbort_on_default_limit_exceededIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID, value);
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.THdfsCompression
   */
  public com.cloudera.impala.thrift.THdfsCompression getParquet_compression_codec() {
    return this.parquet_compression_codec;
  }

  /**
   * 
   * @see com.cloudera.impala.thrift.THdfsCompression
   */
  public TQueryOptions setParquet_compression_codec(com.cloudera.impala.thrift.THdfsCompression parquet_compression_codec) {
    this.parquet_compression_codec = parquet_compression_codec;
    return this;
  }

  public void unsetParquet_compression_codec() {
    this.parquet_compression_codec = null;
  }

  /** Returns true if field parquet_compression_codec is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_compression_codec() {
    return this.parquet_compression_codec != null;
  }

  public void setParquet_compression_codecIsSet(boolean value) {
    if (!value) {
      this.parquet_compression_codec = null;
    }
  }

  public int getHbase_caching() {
    return this.hbase_caching;
  }

  public TQueryOptions setHbase_caching(int hbase_caching) {
    this.hbase_caching = hbase_caching;
    setHbase_cachingIsSet(true);
    return this;
  }

  public void unsetHbase_caching() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HBASE_CACHING_ISSET_ID);
  }

  /** Returns true if field hbase_caching is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_caching() {
    return EncodingUtils.testBit(__isset_bitfield, __HBASE_CACHING_ISSET_ID);
  }

  public void setHbase_cachingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HBASE_CACHING_ISSET_ID, value);
  }

  public boolean isHbase_cache_blocks() {
    return this.hbase_cache_blocks;
  }

  public TQueryOptions setHbase_cache_blocks(boolean hbase_cache_blocks) {
    this.hbase_cache_blocks = hbase_cache_blocks;
    setHbase_cache_blocksIsSet(true);
    return this;
  }

  public void unsetHbase_cache_blocks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HBASE_CACHE_BLOCKS_ISSET_ID);
  }

  /** Returns true if field hbase_cache_blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_cache_blocks() {
    return EncodingUtils.testBit(__isset_bitfield, __HBASE_CACHE_BLOCKS_ISSET_ID);
  }

  public void setHbase_cache_blocksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HBASE_CACHE_BLOCKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ABORT_ON_ERROR:
      if (value == null) {
        unsetAbort_on_error();
      } else {
        setAbort_on_error((Boolean)value);
      }
      break;

    case MAX_ERRORS:
      if (value == null) {
        unsetMax_errors();
      } else {
        setMax_errors((Integer)value);
      }
      break;

    case DISABLE_CODEGEN:
      if (value == null) {
        unsetDisable_codegen();
      } else {
        setDisable_codegen((Boolean)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatch_size();
      } else {
        setBatch_size((Integer)value);
      }
      break;

    case NUM_NODES:
      if (value == null) {
        unsetNum_nodes();
      } else {
        setNum_nodes((Integer)value);
      }
      break;

    case MAX_SCAN_RANGE_LENGTH:
      if (value == null) {
        unsetMax_scan_range_length();
      } else {
        setMax_scan_range_length((Long)value);
      }
      break;

    case NUM_SCANNER_THREADS:
      if (value == null) {
        unsetNum_scanner_threads();
      } else {
        setNum_scanner_threads((Integer)value);
      }
      break;

    case MAX_IO_BUFFERS:
      if (value == null) {
        unsetMax_io_buffers();
      } else {
        setMax_io_buffers((Integer)value);
      }
      break;

    case ALLOW_UNSUPPORTED_FORMATS:
      if (value == null) {
        unsetAllow_unsupported_formats();
      } else {
        setAllow_unsupported_formats((Boolean)value);
      }
      break;

    case DEFAULT_ORDER_BY_LIMIT:
      if (value == null) {
        unsetDefault_order_by_limit();
      } else {
        setDefault_order_by_limit((Long)value);
      }
      break;

    case DEBUG_ACTION:
      if (value == null) {
        unsetDebug_action();
      } else {
        setDebug_action((String)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMem_limit();
      } else {
        setMem_limit((Long)value);
      }
      break;

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      if (value == null) {
        unsetAbort_on_default_limit_exceeded();
      } else {
        setAbort_on_default_limit_exceeded((Boolean)value);
      }
      break;

    case PARQUET_COMPRESSION_CODEC:
      if (value == null) {
        unsetParquet_compression_codec();
      } else {
        setParquet_compression_codec((com.cloudera.impala.thrift.THdfsCompression)value);
      }
      break;

    case HBASE_CACHING:
      if (value == null) {
        unsetHbase_caching();
      } else {
        setHbase_caching((Integer)value);
      }
      break;

    case HBASE_CACHE_BLOCKS:
      if (value == null) {
        unsetHbase_cache_blocks();
      } else {
        setHbase_cache_blocks((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ABORT_ON_ERROR:
      return Boolean.valueOf(isAbort_on_error());

    case MAX_ERRORS:
      return Integer.valueOf(getMax_errors());

    case DISABLE_CODEGEN:
      return Boolean.valueOf(isDisable_codegen());

    case BATCH_SIZE:
      return Integer.valueOf(getBatch_size());

    case NUM_NODES:
      return Integer.valueOf(getNum_nodes());

    case MAX_SCAN_RANGE_LENGTH:
      return Long.valueOf(getMax_scan_range_length());

    case NUM_SCANNER_THREADS:
      return Integer.valueOf(getNum_scanner_threads());

    case MAX_IO_BUFFERS:
      return Integer.valueOf(getMax_io_buffers());

    case ALLOW_UNSUPPORTED_FORMATS:
      return Boolean.valueOf(isAllow_unsupported_formats());

    case DEFAULT_ORDER_BY_LIMIT:
      return Long.valueOf(getDefault_order_by_limit());

    case DEBUG_ACTION:
      return getDebug_action();

    case MEM_LIMIT:
      return Long.valueOf(getMem_limit());

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return Boolean.valueOf(isAbort_on_default_limit_exceeded());

    case PARQUET_COMPRESSION_CODEC:
      return getParquet_compression_codec();

    case HBASE_CACHING:
      return Integer.valueOf(getHbase_caching());

    case HBASE_CACHE_BLOCKS:
      return Boolean.valueOf(isHbase_cache_blocks());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ABORT_ON_ERROR:
      return isSetAbort_on_error();
    case MAX_ERRORS:
      return isSetMax_errors();
    case DISABLE_CODEGEN:
      return isSetDisable_codegen();
    case BATCH_SIZE:
      return isSetBatch_size();
    case NUM_NODES:
      return isSetNum_nodes();
    case MAX_SCAN_RANGE_LENGTH:
      return isSetMax_scan_range_length();
    case NUM_SCANNER_THREADS:
      return isSetNum_scanner_threads();
    case MAX_IO_BUFFERS:
      return isSetMax_io_buffers();
    case ALLOW_UNSUPPORTED_FORMATS:
      return isSetAllow_unsupported_formats();
    case DEFAULT_ORDER_BY_LIMIT:
      return isSetDefault_order_by_limit();
    case DEBUG_ACTION:
      return isSetDebug_action();
    case MEM_LIMIT:
      return isSetMem_limit();
    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return isSetAbort_on_default_limit_exceeded();
    case PARQUET_COMPRESSION_CODEC:
      return isSetParquet_compression_codec();
    case HBASE_CACHING:
      return isSetHbase_caching();
    case HBASE_CACHE_BLOCKS:
      return isSetHbase_cache_blocks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryOptions)
      return this.equals((TQueryOptions)that);
    return false;
  }

  public boolean equals(TQueryOptions that) {
    if (that == null)
      return false;

    boolean this_present_abort_on_error = true && this.isSetAbort_on_error();
    boolean that_present_abort_on_error = true && that.isSetAbort_on_error();
    if (this_present_abort_on_error || that_present_abort_on_error) {
      if (!(this_present_abort_on_error && that_present_abort_on_error))
        return false;
      if (this.abort_on_error != that.abort_on_error)
        return false;
    }

    boolean this_present_max_errors = true && this.isSetMax_errors();
    boolean that_present_max_errors = true && that.isSetMax_errors();
    if (this_present_max_errors || that_present_max_errors) {
      if (!(this_present_max_errors && that_present_max_errors))
        return false;
      if (this.max_errors != that.max_errors)
        return false;
    }

    boolean this_present_disable_codegen = true && this.isSetDisable_codegen();
    boolean that_present_disable_codegen = true && that.isSetDisable_codegen();
    if (this_present_disable_codegen || that_present_disable_codegen) {
      if (!(this_present_disable_codegen && that_present_disable_codegen))
        return false;
      if (this.disable_codegen != that.disable_codegen)
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatch_size();
    boolean that_present_batch_size = true && that.isSetBatch_size();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    boolean this_present_num_nodes = true && this.isSetNum_nodes();
    boolean that_present_num_nodes = true && that.isSetNum_nodes();
    if (this_present_num_nodes || that_present_num_nodes) {
      if (!(this_present_num_nodes && that_present_num_nodes))
        return false;
      if (this.num_nodes != that.num_nodes)
        return false;
    }

    boolean this_present_max_scan_range_length = true && this.isSetMax_scan_range_length();
    boolean that_present_max_scan_range_length = true && that.isSetMax_scan_range_length();
    if (this_present_max_scan_range_length || that_present_max_scan_range_length) {
      if (!(this_present_max_scan_range_length && that_present_max_scan_range_length))
        return false;
      if (this.max_scan_range_length != that.max_scan_range_length)
        return false;
    }

    boolean this_present_num_scanner_threads = true && this.isSetNum_scanner_threads();
    boolean that_present_num_scanner_threads = true && that.isSetNum_scanner_threads();
    if (this_present_num_scanner_threads || that_present_num_scanner_threads) {
      if (!(this_present_num_scanner_threads && that_present_num_scanner_threads))
        return false;
      if (this.num_scanner_threads != that.num_scanner_threads)
        return false;
    }

    boolean this_present_max_io_buffers = true && this.isSetMax_io_buffers();
    boolean that_present_max_io_buffers = true && that.isSetMax_io_buffers();
    if (this_present_max_io_buffers || that_present_max_io_buffers) {
      if (!(this_present_max_io_buffers && that_present_max_io_buffers))
        return false;
      if (this.max_io_buffers != that.max_io_buffers)
        return false;
    }

    boolean this_present_allow_unsupported_formats = true && this.isSetAllow_unsupported_formats();
    boolean that_present_allow_unsupported_formats = true && that.isSetAllow_unsupported_formats();
    if (this_present_allow_unsupported_formats || that_present_allow_unsupported_formats) {
      if (!(this_present_allow_unsupported_formats && that_present_allow_unsupported_formats))
        return false;
      if (this.allow_unsupported_formats != that.allow_unsupported_formats)
        return false;
    }

    boolean this_present_default_order_by_limit = true && this.isSetDefault_order_by_limit();
    boolean that_present_default_order_by_limit = true && that.isSetDefault_order_by_limit();
    if (this_present_default_order_by_limit || that_present_default_order_by_limit) {
      if (!(this_present_default_order_by_limit && that_present_default_order_by_limit))
        return false;
      if (this.default_order_by_limit != that.default_order_by_limit)
        return false;
    }

    boolean this_present_debug_action = true && this.isSetDebug_action();
    boolean that_present_debug_action = true && that.isSetDebug_action();
    if (this_present_debug_action || that_present_debug_action) {
      if (!(this_present_debug_action && that_present_debug_action))
        return false;
      if (!this.debug_action.equals(that.debug_action))
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMem_limit();
    boolean that_present_mem_limit = true && that.isSetMem_limit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    boolean this_present_abort_on_default_limit_exceeded = true && this.isSetAbort_on_default_limit_exceeded();
    boolean that_present_abort_on_default_limit_exceeded = true && that.isSetAbort_on_default_limit_exceeded();
    if (this_present_abort_on_default_limit_exceeded || that_present_abort_on_default_limit_exceeded) {
      if (!(this_present_abort_on_default_limit_exceeded && that_present_abort_on_default_limit_exceeded))
        return false;
      if (this.abort_on_default_limit_exceeded != that.abort_on_default_limit_exceeded)
        return false;
    }

    boolean this_present_parquet_compression_codec = true && this.isSetParquet_compression_codec();
    boolean that_present_parquet_compression_codec = true && that.isSetParquet_compression_codec();
    if (this_present_parquet_compression_codec || that_present_parquet_compression_codec) {
      if (!(this_present_parquet_compression_codec && that_present_parquet_compression_codec))
        return false;
      if (!this.parquet_compression_codec.equals(that.parquet_compression_codec))
        return false;
    }

    boolean this_present_hbase_caching = true && this.isSetHbase_caching();
    boolean that_present_hbase_caching = true && that.isSetHbase_caching();
    if (this_present_hbase_caching || that_present_hbase_caching) {
      if (!(this_present_hbase_caching && that_present_hbase_caching))
        return false;
      if (this.hbase_caching != that.hbase_caching)
        return false;
    }

    boolean this_present_hbase_cache_blocks = true && this.isSetHbase_cache_blocks();
    boolean that_present_hbase_cache_blocks = true && that.isSetHbase_cache_blocks();
    if (this_present_hbase_cache_blocks || that_present_hbase_cache_blocks) {
      if (!(this_present_hbase_cache_blocks && that_present_hbase_cache_blocks))
        return false;
      if (this.hbase_cache_blocks != that.hbase_cache_blocks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueryOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueryOptions typedOther = (TQueryOptions)other;

    lastComparison = Boolean.valueOf(isSetAbort_on_error()).compareTo(typedOther.isSetAbort_on_error());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_on_error()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_error, typedOther.abort_on_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_errors()).compareTo(typedOther.isSetMax_errors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_errors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_errors, typedOther.max_errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_codegen()).compareTo(typedOther.isSetDisable_codegen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_codegen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen, typedOther.disable_codegen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch_size()).compareTo(typedOther.isSetBatch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, typedOther.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_nodes()).compareTo(typedOther.isSetNum_nodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_nodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_nodes, typedOther.num_nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_scan_range_length()).compareTo(typedOther.isSetMax_scan_range_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_scan_range_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_range_length, typedOther.max_scan_range_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_scanner_threads()).compareTo(typedOther.isSetNum_scanner_threads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_scanner_threads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_scanner_threads, typedOther.num_scanner_threads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_io_buffers()).compareTo(typedOther.isSetMax_io_buffers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_io_buffers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_io_buffers, typedOther.max_io_buffers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllow_unsupported_formats()).compareTo(typedOther.isSetAllow_unsupported_formats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllow_unsupported_formats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_unsupported_formats, typedOther.allow_unsupported_formats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_order_by_limit()).compareTo(typedOther.isSetDefault_order_by_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_order_by_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_order_by_limit, typedOther.default_order_by_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_action()).compareTo(typedOther.isSetDebug_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_action, typedOther.debug_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_limit()).compareTo(typedOther.isSetMem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, typedOther.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbort_on_default_limit_exceeded()).compareTo(typedOther.isSetAbort_on_default_limit_exceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_on_default_limit_exceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_default_limit_exceeded, typedOther.abort_on_default_limit_exceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_compression_codec()).compareTo(typedOther.isSetParquet_compression_codec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_compression_codec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_compression_codec, typedOther.parquet_compression_codec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_caching()).compareTo(typedOther.isSetHbase_caching());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_caching()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_caching, typedOther.hbase_caching);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_cache_blocks()).compareTo(typedOther.isSetHbase_cache_blocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_cache_blocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_cache_blocks, typedOther.hbase_cache_blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryOptions(");
    boolean first = true;

    if (isSetAbort_on_error()) {
      sb.append("abort_on_error:");
      sb.append(this.abort_on_error);
      first = false;
    }
    if (isSetMax_errors()) {
      if (!first) sb.append(", ");
      sb.append("max_errors:");
      sb.append(this.max_errors);
      first = false;
    }
    if (isSetDisable_codegen()) {
      if (!first) sb.append(", ");
      sb.append("disable_codegen:");
      sb.append(this.disable_codegen);
      first = false;
    }
    if (isSetBatch_size()) {
      if (!first) sb.append(", ");
      sb.append("batch_size:");
      sb.append(this.batch_size);
      first = false;
    }
    if (isSetNum_nodes()) {
      if (!first) sb.append(", ");
      sb.append("num_nodes:");
      sb.append(this.num_nodes);
      first = false;
    }
    if (isSetMax_scan_range_length()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_range_length:");
      sb.append(this.max_scan_range_length);
      first = false;
    }
    if (isSetNum_scanner_threads()) {
      if (!first) sb.append(", ");
      sb.append("num_scanner_threads:");
      sb.append(this.num_scanner_threads);
      first = false;
    }
    if (isSetMax_io_buffers()) {
      if (!first) sb.append(", ");
      sb.append("max_io_buffers:");
      sb.append(this.max_io_buffers);
      first = false;
    }
    if (isSetAllow_unsupported_formats()) {
      if (!first) sb.append(", ");
      sb.append("allow_unsupported_formats:");
      sb.append(this.allow_unsupported_formats);
      first = false;
    }
    if (isSetDefault_order_by_limit()) {
      if (!first) sb.append(", ");
      sb.append("default_order_by_limit:");
      sb.append(this.default_order_by_limit);
      first = false;
    }
    if (isSetDebug_action()) {
      if (!first) sb.append(", ");
      sb.append("debug_action:");
      if (this.debug_action == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_action);
      }
      first = false;
    }
    if (isSetMem_limit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      sb.append(this.mem_limit);
      first = false;
    }
    if (isSetAbort_on_default_limit_exceeded()) {
      if (!first) sb.append(", ");
      sb.append("abort_on_default_limit_exceeded:");
      sb.append(this.abort_on_default_limit_exceeded);
      first = false;
    }
    if (isSetParquet_compression_codec()) {
      if (!first) sb.append(", ");
      sb.append("parquet_compression_codec:");
      if (this.parquet_compression_codec == null) {
        sb.append("null");
      } else {
        sb.append(this.parquet_compression_codec);
      }
      first = false;
    }
    if (isSetHbase_caching()) {
      if (!first) sb.append(", ");
      sb.append("hbase_caching:");
      sb.append(this.hbase_caching);
      first = false;
    }
    if (isSetHbase_cache_blocks()) {
      if (!first) sb.append(", ");
      sb.append("hbase_cache_blocks:");
      sb.append(this.hbase_cache_blocks);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryOptionsStandardSchemeFactory implements SchemeFactory {
    public TQueryOptionsStandardScheme getScheme() {
      return new TQueryOptionsStandardScheme();
    }
  }

  private static class TQueryOptionsStandardScheme extends StandardScheme<TQueryOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ABORT_ON_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_error = iprot.readBool();
              struct.setAbort_on_errorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_errors = iprot.readI32();
              struct.setMax_errorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISABLE_CODEGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_codegen = iprot.readBool();
              struct.setDisable_codegenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_nodes = iprot.readI32();
              struct.setNum_nodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_SCAN_RANGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_scan_range_length = iprot.readI64();
              struct.setMax_scan_range_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_SCANNER_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_scanner_threads = iprot.readI32();
              struct.setNum_scanner_threadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_IO_BUFFERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_io_buffers = iprot.readI32();
              struct.setMax_io_buffersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALLOW_UNSUPPORTED_FORMATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_unsupported_formats = iprot.readBool();
              struct.setAllow_unsupported_formatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEFAULT_ORDER_BY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.default_order_by_limit = iprot.readI64();
              struct.setDefault_order_by_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEBUG_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug_action = iprot.readString();
              struct.setDebug_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit = iprot.readI64();
              struct.setMem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_default_limit_exceeded = iprot.readBool();
              struct.setAbort_on_default_limit_exceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARQUET_COMPRESSION_CODEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_compression_codec = com.cloudera.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
              struct.setParquet_compression_codecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HBASE_CACHING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hbase_caching = iprot.readI32();
              struct.setHbase_cachingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HBASE_CACHE_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hbase_cache_blocks = iprot.readBool();
              struct.setHbase_cache_blocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAbort_on_error()) {
        oprot.writeFieldBegin(ABORT_ON_ERROR_FIELD_DESC);
        oprot.writeBool(struct.abort_on_error);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_errors()) {
        oprot.writeFieldBegin(MAX_ERRORS_FIELD_DESC);
        oprot.writeI32(struct.max_errors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_codegen()) {
        oprot.writeFieldBegin(DISABLE_CODEGEN_FIELD_DESC);
        oprot.writeBool(struct.disable_codegen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatch_size()) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_nodes()) {
        oprot.writeFieldBegin(NUM_NODES_FIELD_DESC);
        oprot.writeI32(struct.num_nodes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_scan_range_length()) {
        oprot.writeFieldBegin(MAX_SCAN_RANGE_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.max_scan_range_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_scanner_threads()) {
        oprot.writeFieldBegin(NUM_SCANNER_THREADS_FIELD_DESC);
        oprot.writeI32(struct.num_scanner_threads);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_io_buffers()) {
        oprot.writeFieldBegin(MAX_IO_BUFFERS_FIELD_DESC);
        oprot.writeI32(struct.max_io_buffers);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllow_unsupported_formats()) {
        oprot.writeFieldBegin(ALLOW_UNSUPPORTED_FORMATS_FIELD_DESC);
        oprot.writeBool(struct.allow_unsupported_formats);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefault_order_by_limit()) {
        oprot.writeFieldBegin(DEFAULT_ORDER_BY_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.default_order_by_limit);
        oprot.writeFieldEnd();
      }
      if (struct.debug_action != null) {
        if (struct.isSetDebug_action()) {
          oprot.writeFieldBegin(DEBUG_ACTION_FIELD_DESC);
          oprot.writeString(struct.debug_action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMem_limit()) {
        oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        oprot.writeFieldBegin(ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC);
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
        oprot.writeFieldEnd();
      }
      if (struct.parquet_compression_codec != null) {
        if (struct.isSetParquet_compression_codec()) {
          oprot.writeFieldBegin(PARQUET_COMPRESSION_CODEC_FIELD_DESC);
          oprot.writeI32(struct.parquet_compression_codec.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHbase_caching()) {
        oprot.writeFieldBegin(HBASE_CACHING_FIELD_DESC);
        oprot.writeI32(struct.hbase_caching);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHbase_cache_blocks()) {
        oprot.writeFieldBegin(HBASE_CACHE_BLOCKS_FIELD_DESC);
        oprot.writeBool(struct.hbase_cache_blocks);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryOptionsTupleSchemeFactory implements SchemeFactory {
    public TQueryOptionsTupleScheme getScheme() {
      return new TQueryOptionsTupleScheme();
    }
  }

  private static class TQueryOptionsTupleScheme extends TupleScheme<TQueryOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAbort_on_error()) {
        optionals.set(0);
      }
      if (struct.isSetMax_errors()) {
        optionals.set(1);
      }
      if (struct.isSetDisable_codegen()) {
        optionals.set(2);
      }
      if (struct.isSetBatch_size()) {
        optionals.set(3);
      }
      if (struct.isSetNum_nodes()) {
        optionals.set(4);
      }
      if (struct.isSetMax_scan_range_length()) {
        optionals.set(5);
      }
      if (struct.isSetNum_scanner_threads()) {
        optionals.set(6);
      }
      if (struct.isSetMax_io_buffers()) {
        optionals.set(7);
      }
      if (struct.isSetAllow_unsupported_formats()) {
        optionals.set(8);
      }
      if (struct.isSetDefault_order_by_limit()) {
        optionals.set(9);
      }
      if (struct.isSetDebug_action()) {
        optionals.set(10);
      }
      if (struct.isSetMem_limit()) {
        optionals.set(11);
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        optionals.set(12);
      }
      if (struct.isSetParquet_compression_codec()) {
        optionals.set(13);
      }
      if (struct.isSetHbase_caching()) {
        optionals.set(14);
      }
      if (struct.isSetHbase_cache_blocks()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetAbort_on_error()) {
        oprot.writeBool(struct.abort_on_error);
      }
      if (struct.isSetMax_errors()) {
        oprot.writeI32(struct.max_errors);
      }
      if (struct.isSetDisable_codegen()) {
        oprot.writeBool(struct.disable_codegen);
      }
      if (struct.isSetBatch_size()) {
        oprot.writeI32(struct.batch_size);
      }
      if (struct.isSetNum_nodes()) {
        oprot.writeI32(struct.num_nodes);
      }
      if (struct.isSetMax_scan_range_length()) {
        oprot.writeI64(struct.max_scan_range_length);
      }
      if (struct.isSetNum_scanner_threads()) {
        oprot.writeI32(struct.num_scanner_threads);
      }
      if (struct.isSetMax_io_buffers()) {
        oprot.writeI32(struct.max_io_buffers);
      }
      if (struct.isSetAllow_unsupported_formats()) {
        oprot.writeBool(struct.allow_unsupported_formats);
      }
      if (struct.isSetDefault_order_by_limit()) {
        oprot.writeI64(struct.default_order_by_limit);
      }
      if (struct.isSetDebug_action()) {
        oprot.writeString(struct.debug_action);
      }
      if (struct.isSetMem_limit()) {
        oprot.writeI64(struct.mem_limit);
      }
      if (struct.isSetAbort_on_default_limit_exceeded()) {
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
      }
      if (struct.isSetParquet_compression_codec()) {
        oprot.writeI32(struct.parquet_compression_codec.getValue());
      }
      if (struct.isSetHbase_caching()) {
        oprot.writeI32(struct.hbase_caching);
      }
      if (struct.isSetHbase_cache_blocks()) {
        oprot.writeBool(struct.hbase_cache_blocks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.abort_on_error = iprot.readBool();
        struct.setAbort_on_errorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max_errors = iprot.readI32();
        struct.setMax_errorsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disable_codegen = iprot.readBool();
        struct.setDisable_codegenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batch_size = iprot.readI32();
        struct.setBatch_sizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_nodes = iprot.readI32();
        struct.setNum_nodesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_scan_range_length = iprot.readI64();
        struct.setMax_scan_range_lengthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_scanner_threads = iprot.readI32();
        struct.setNum_scanner_threadsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_io_buffers = iprot.readI32();
        struct.setMax_io_buffersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allow_unsupported_formats = iprot.readBool();
        struct.setAllow_unsupported_formatsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.default_order_by_limit = iprot.readI64();
        struct.setDefault_order_by_limitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.debug_action = iprot.readString();
        struct.setDebug_actionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mem_limit = iprot.readI64();
        struct.setMem_limitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.abort_on_default_limit_exceeded = iprot.readBool();
        struct.setAbort_on_default_limit_exceededIsSet(true);
      }
      if (incoming.get(13)) {
        struct.parquet_compression_codec = com.cloudera.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
        struct.setParquet_compression_codecIsSet(true);
      }
      if (incoming.get(14)) {
        struct.hbase_caching = iprot.readI32();
        struct.setHbase_cachingIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hbase_cache_blocks = iprot.readBool();
        struct.setHbase_cache_blocksIsSet(true);
      }
    }
  }

}

