/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.adrd.data.sessionlog.thrift.operation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExOperation implements org.apache.thrift.TBase<ExOperation, ExOperation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExOperation");

  private static final org.apache.thrift.protocol.TField DSP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dspID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bidID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("impID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MONITOR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("suv", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adpID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField AD_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("adSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField AD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("adUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BID_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("bidFloor", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SECOND_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("secondPrice", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("latency", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField LOG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("logType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LOG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("logTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("logLevel", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExOperationTupleSchemeFactory());
  }

  public int dspID; // optional
  public String bidID; // optional
  public String impID; // optional
  public String monitorKey; // optional
  public String suv; // optional
  public String adID; // optional
  public String adpID; // optional
  public int adSize; // optional
  public String adUrl; // optional
  public int bidFloor; // optional
  public int bidPrice; // optional
  public int secondPrice; // optional
  public String status; // optional
  public long latency; // optional
  public String logType; // optional
  public String logTime; // optional
  public String logLevel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DSP_ID((short)1, "dspID"),
    BID_ID((short)2, "bidID"),
    IMP_ID((short)3, "impID"),
    MONITOR_KEY((short)4, "monitorKey"),
    SUV((short)5, "suv"),
    AD_ID((short)6, "adID"),
    ADP_ID((short)7, "adpID"),
    AD_SIZE((short)8, "adSize"),
    AD_URL((short)9, "adUrl"),
    BID_FLOOR((short)10, "bidFloor"),
    BID_PRICE((short)11, "bidPrice"),
    SECOND_PRICE((short)12, "secondPrice"),
    STATUS((short)13, "status"),
    LATENCY((short)14, "latency"),
    LOG_TYPE((short)15, "logType"),
    LOG_TIME((short)16, "logTime"),
    LOG_LEVEL((short)17, "logLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DSP_ID
          return DSP_ID;
        case 2: // BID_ID
          return BID_ID;
        case 3: // IMP_ID
          return IMP_ID;
        case 4: // MONITOR_KEY
          return MONITOR_KEY;
        case 5: // SUV
          return SUV;
        case 6: // AD_ID
          return AD_ID;
        case 7: // ADP_ID
          return ADP_ID;
        case 8: // AD_SIZE
          return AD_SIZE;
        case 9: // AD_URL
          return AD_URL;
        case 10: // BID_FLOOR
          return BID_FLOOR;
        case 11: // BID_PRICE
          return BID_PRICE;
        case 12: // SECOND_PRICE
          return SECOND_PRICE;
        case 13: // STATUS
          return STATUS;
        case 14: // LATENCY
          return LATENCY;
        case 15: // LOG_TYPE
          return LOG_TYPE;
        case 16: // LOG_TIME
          return LOG_TIME;
        case 17: // LOG_LEVEL
          return LOG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DSPID_ISSET_ID = 0;
  private static final int __ADSIZE_ISSET_ID = 1;
  private static final int __BIDFLOOR_ISSET_ID = 2;
  private static final int __BIDPRICE_ISSET_ID = 3;
  private static final int __SECONDPRICE_ISSET_ID = 4;
  private static final int __LATENCY_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.DSP_ID,_Fields.BID_ID,_Fields.IMP_ID,_Fields.MONITOR_KEY,_Fields.SUV,_Fields.AD_ID,_Fields.ADP_ID,_Fields.AD_SIZE,_Fields.AD_URL,_Fields.BID_FLOOR,_Fields.BID_PRICE,_Fields.SECOND_PRICE,_Fields.STATUS,_Fields.LATENCY,_Fields.LOG_TYPE,_Fields.LOG_TIME,_Fields.LOG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DSP_ID, new org.apache.thrift.meta_data.FieldMetaData("dspID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID_ID, new org.apache.thrift.meta_data.FieldMetaData("bidID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMP_ID, new org.apache.thrift.meta_data.FieldMetaData("impID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONITOR_KEY, new org.apache.thrift.meta_data.FieldMetaData("monitorKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUV, new org.apache.thrift.meta_data.FieldMetaData("suv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_ID, new org.apache.thrift.meta_data.FieldMetaData("adpID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_SIZE, new org.apache.thrift.meta_data.FieldMetaData("adSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_URL, new org.apache.thrift.meta_data.FieldMetaData("adUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("bidFloor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECOND_PRICE, new org.apache.thrift.meta_data.FieldMetaData("secondPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATENCY, new org.apache.thrift.meta_data.FieldMetaData("latency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("logType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_TIME, new org.apache.thrift.meta_data.FieldMetaData("logTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("logLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExOperation.class, metaDataMap);
  }

  public ExOperation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExOperation(ExOperation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.dspID = other.dspID;
    if (other.isSetBidID()) {
      this.bidID = other.bidID;
    }
    if (other.isSetImpID()) {
      this.impID = other.impID;
    }
    if (other.isSetMonitorKey()) {
      this.monitorKey = other.monitorKey;
    }
    if (other.isSetSuv()) {
      this.suv = other.suv;
    }
    if (other.isSetAdID()) {
      this.adID = other.adID;
    }
    if (other.isSetAdpID()) {
      this.adpID = other.adpID;
    }
    this.adSize = other.adSize;
    if (other.isSetAdUrl()) {
      this.adUrl = other.adUrl;
    }
    this.bidFloor = other.bidFloor;
    this.bidPrice = other.bidPrice;
    this.secondPrice = other.secondPrice;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.latency = other.latency;
    if (other.isSetLogType()) {
      this.logType = other.logType;
    }
    if (other.isSetLogTime()) {
      this.logTime = other.logTime;
    }
    if (other.isSetLogLevel()) {
      this.logLevel = other.logLevel;
    }
  }

  public ExOperation deepCopy() {
    return new ExOperation(this);
  }

  @Override
  public void clear() {
    setDspIDIsSet(false);
    this.dspID = 0;
    this.bidID = null;
    this.impID = null;
    this.monitorKey = null;
    this.suv = null;
    this.adID = null;
    this.adpID = null;
    setAdSizeIsSet(false);
    this.adSize = 0;
    this.adUrl = null;
    setBidFloorIsSet(false);
    this.bidFloor = 0;
    setBidPriceIsSet(false);
    this.bidPrice = 0;
    setSecondPriceIsSet(false);
    this.secondPrice = 0;
    this.status = null;
    setLatencyIsSet(false);
    this.latency = 0;
    this.logType = null;
    this.logTime = null;
    this.logLevel = null;
  }

  public int getDspID() {
    return this.dspID;
  }

  public ExOperation setDspID(int dspID) {
    this.dspID = dspID;
    setDspIDIsSet(true);
    return this;
  }

  public void unsetDspID() {
    __isset_bit_vector.clear(__DSPID_ISSET_ID);
  }

  /** Returns true if field dspID is set (has been assigned a value) and false otherwise */
  public boolean isSetDspID() {
    return __isset_bit_vector.get(__DSPID_ISSET_ID);
  }

  public void setDspIDIsSet(boolean value) {
    __isset_bit_vector.set(__DSPID_ISSET_ID, value);
  }

  public String getBidID() {
    return this.bidID;
  }

  public ExOperation setBidID(String bidID) {
    this.bidID = bidID;
    return this;
  }

  public void unsetBidID() {
    this.bidID = null;
  }

  /** Returns true if field bidID is set (has been assigned a value) and false otherwise */
  public boolean isSetBidID() {
    return this.bidID != null;
  }

  public void setBidIDIsSet(boolean value) {
    if (!value) {
      this.bidID = null;
    }
  }

  public String getImpID() {
    return this.impID;
  }

  public ExOperation setImpID(String impID) {
    this.impID = impID;
    return this;
  }

  public void unsetImpID() {
    this.impID = null;
  }

  /** Returns true if field impID is set (has been assigned a value) and false otherwise */
  public boolean isSetImpID() {
    return this.impID != null;
  }

  public void setImpIDIsSet(boolean value) {
    if (!value) {
      this.impID = null;
    }
  }

  public String getMonitorKey() {
    return this.monitorKey;
  }

  public ExOperation setMonitorKey(String monitorKey) {
    this.monitorKey = monitorKey;
    return this;
  }

  public void unsetMonitorKey() {
    this.monitorKey = null;
  }

  /** Returns true if field monitorKey is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorKey() {
    return this.monitorKey != null;
  }

  public void setMonitorKeyIsSet(boolean value) {
    if (!value) {
      this.monitorKey = null;
    }
  }

  public String getSuv() {
    return this.suv;
  }

  public ExOperation setSuv(String suv) {
    this.suv = suv;
    return this;
  }

  public void unsetSuv() {
    this.suv = null;
  }

  /** Returns true if field suv is set (has been assigned a value) and false otherwise */
  public boolean isSetSuv() {
    return this.suv != null;
  }

  public void setSuvIsSet(boolean value) {
    if (!value) {
      this.suv = null;
    }
  }

  public String getAdID() {
    return this.adID;
  }

  public ExOperation setAdID(String adID) {
    this.adID = adID;
    return this;
  }

  public void unsetAdID() {
    this.adID = null;
  }

  /** Returns true if field adID is set (has been assigned a value) and false otherwise */
  public boolean isSetAdID() {
    return this.adID != null;
  }

  public void setAdIDIsSet(boolean value) {
    if (!value) {
      this.adID = null;
    }
  }

  public String getAdpID() {
    return this.adpID;
  }

  public ExOperation setAdpID(String adpID) {
    this.adpID = adpID;
    return this;
  }

  public void unsetAdpID() {
    this.adpID = null;
  }

  /** Returns true if field adpID is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpID() {
    return this.adpID != null;
  }

  public void setAdpIDIsSet(boolean value) {
    if (!value) {
      this.adpID = null;
    }
  }

  public int getAdSize() {
    return this.adSize;
  }

  public ExOperation setAdSize(int adSize) {
    this.adSize = adSize;
    setAdSizeIsSet(true);
    return this;
  }

  public void unsetAdSize() {
    __isset_bit_vector.clear(__ADSIZE_ISSET_ID);
  }

  /** Returns true if field adSize is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSize() {
    return __isset_bit_vector.get(__ADSIZE_ISSET_ID);
  }

  public void setAdSizeIsSet(boolean value) {
    __isset_bit_vector.set(__ADSIZE_ISSET_ID, value);
  }

  public String getAdUrl() {
    return this.adUrl;
  }

  public ExOperation setAdUrl(String adUrl) {
    this.adUrl = adUrl;
    return this;
  }

  public void unsetAdUrl() {
    this.adUrl = null;
  }

  /** Returns true if field adUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAdUrl() {
    return this.adUrl != null;
  }

  public void setAdUrlIsSet(boolean value) {
    if (!value) {
      this.adUrl = null;
    }
  }

  public int getBidFloor() {
    return this.bidFloor;
  }

  public ExOperation setBidFloor(int bidFloor) {
    this.bidFloor = bidFloor;
    setBidFloorIsSet(true);
    return this;
  }

  public void unsetBidFloor() {
    __isset_bit_vector.clear(__BIDFLOOR_ISSET_ID);
  }

  /** Returns true if field bidFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetBidFloor() {
    return __isset_bit_vector.get(__BIDFLOOR_ISSET_ID);
  }

  public void setBidFloorIsSet(boolean value) {
    __isset_bit_vector.set(__BIDFLOOR_ISSET_ID, value);
  }

  public int getBidPrice() {
    return this.bidPrice;
  }

  public ExOperation setBidPrice(int bidPrice) {
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    return this;
  }

  public void unsetBidPrice() {
    __isset_bit_vector.clear(__BIDPRICE_ISSET_ID);
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return __isset_bit_vector.get(__BIDPRICE_ISSET_ID);
  }

  public void setBidPriceIsSet(boolean value) {
    __isset_bit_vector.set(__BIDPRICE_ISSET_ID, value);
  }

  public int getSecondPrice() {
    return this.secondPrice;
  }

  public ExOperation setSecondPrice(int secondPrice) {
    this.secondPrice = secondPrice;
    setSecondPriceIsSet(true);
    return this;
  }

  public void unsetSecondPrice() {
    __isset_bit_vector.clear(__SECONDPRICE_ISSET_ID);
  }

  /** Returns true if field secondPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondPrice() {
    return __isset_bit_vector.get(__SECONDPRICE_ISSET_ID);
  }

  public void setSecondPriceIsSet(boolean value) {
    __isset_bit_vector.set(__SECONDPRICE_ISSET_ID, value);
  }

  public String getStatus() {
    return this.status;
  }

  public ExOperation setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getLatency() {
    return this.latency;
  }

  public ExOperation setLatency(long latency) {
    this.latency = latency;
    setLatencyIsSet(true);
    return this;
  }

  public void unsetLatency() {
    __isset_bit_vector.clear(__LATENCY_ISSET_ID);
  }

  /** Returns true if field latency is set (has been assigned a value) and false otherwise */
  public boolean isSetLatency() {
    return __isset_bit_vector.get(__LATENCY_ISSET_ID);
  }

  public void setLatencyIsSet(boolean value) {
    __isset_bit_vector.set(__LATENCY_ISSET_ID, value);
  }

  public String getLogType() {
    return this.logType;
  }

  public ExOperation setLogType(String logType) {
    this.logType = logType;
    return this;
  }

  public void unsetLogType() {
    this.logType = null;
  }

  /** Returns true if field logType is set (has been assigned a value) and false otherwise */
  public boolean isSetLogType() {
    return this.logType != null;
  }

  public void setLogTypeIsSet(boolean value) {
    if (!value) {
      this.logType = null;
    }
  }

  public String getLogTime() {
    return this.logTime;
  }

  public ExOperation setLogTime(String logTime) {
    this.logTime = logTime;
    return this;
  }

  public void unsetLogTime() {
    this.logTime = null;
  }

  /** Returns true if field logTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLogTime() {
    return this.logTime != null;
  }

  public void setLogTimeIsSet(boolean value) {
    if (!value) {
      this.logTime = null;
    }
  }

  public String getLogLevel() {
    return this.logLevel;
  }

  public ExOperation setLogLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  public void unsetLogLevel() {
    this.logLevel = null;
  }

  /** Returns true if field logLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetLogLevel() {
    return this.logLevel != null;
  }

  public void setLogLevelIsSet(boolean value) {
    if (!value) {
      this.logLevel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DSP_ID:
      if (value == null) {
        unsetDspID();
      } else {
        setDspID((Integer)value);
      }
      break;

    case BID_ID:
      if (value == null) {
        unsetBidID();
      } else {
        setBidID((String)value);
      }
      break;

    case IMP_ID:
      if (value == null) {
        unsetImpID();
      } else {
        setImpID((String)value);
      }
      break;

    case MONITOR_KEY:
      if (value == null) {
        unsetMonitorKey();
      } else {
        setMonitorKey((String)value);
      }
      break;

    case SUV:
      if (value == null) {
        unsetSuv();
      } else {
        setSuv((String)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAdID();
      } else {
        setAdID((String)value);
      }
      break;

    case ADP_ID:
      if (value == null) {
        unsetAdpID();
      } else {
        setAdpID((String)value);
      }
      break;

    case AD_SIZE:
      if (value == null) {
        unsetAdSize();
      } else {
        setAdSize((Integer)value);
      }
      break;

    case AD_URL:
      if (value == null) {
        unsetAdUrl();
      } else {
        setAdUrl((String)value);
      }
      break;

    case BID_FLOOR:
      if (value == null) {
        unsetBidFloor();
      } else {
        setBidFloor((Integer)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((Integer)value);
      }
      break;

    case SECOND_PRICE:
      if (value == null) {
        unsetSecondPrice();
      } else {
        setSecondPrice((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case LATENCY:
      if (value == null) {
        unsetLatency();
      } else {
        setLatency((Long)value);
      }
      break;

    case LOG_TYPE:
      if (value == null) {
        unsetLogType();
      } else {
        setLogType((String)value);
      }
      break;

    case LOG_TIME:
      if (value == null) {
        unsetLogTime();
      } else {
        setLogTime((String)value);
      }
      break;

    case LOG_LEVEL:
      if (value == null) {
        unsetLogLevel();
      } else {
        setLogLevel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DSP_ID:
      return Integer.valueOf(getDspID());

    case BID_ID:
      return getBidID();

    case IMP_ID:
      return getImpID();

    case MONITOR_KEY:
      return getMonitorKey();

    case SUV:
      return getSuv();

    case AD_ID:
      return getAdID();

    case ADP_ID:
      return getAdpID();

    case AD_SIZE:
      return Integer.valueOf(getAdSize());

    case AD_URL:
      return getAdUrl();

    case BID_FLOOR:
      return Integer.valueOf(getBidFloor());

    case BID_PRICE:
      return Integer.valueOf(getBidPrice());

    case SECOND_PRICE:
      return Integer.valueOf(getSecondPrice());

    case STATUS:
      return getStatus();

    case LATENCY:
      return Long.valueOf(getLatency());

    case LOG_TYPE:
      return getLogType();

    case LOG_TIME:
      return getLogTime();

    case LOG_LEVEL:
      return getLogLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DSP_ID:
      return isSetDspID();
    case BID_ID:
      return isSetBidID();
    case IMP_ID:
      return isSetImpID();
    case MONITOR_KEY:
      return isSetMonitorKey();
    case SUV:
      return isSetSuv();
    case AD_ID:
      return isSetAdID();
    case ADP_ID:
      return isSetAdpID();
    case AD_SIZE:
      return isSetAdSize();
    case AD_URL:
      return isSetAdUrl();
    case BID_FLOOR:
      return isSetBidFloor();
    case BID_PRICE:
      return isSetBidPrice();
    case SECOND_PRICE:
      return isSetSecondPrice();
    case STATUS:
      return isSetStatus();
    case LATENCY:
      return isSetLatency();
    case LOG_TYPE:
      return isSetLogType();
    case LOG_TIME:
      return isSetLogTime();
    case LOG_LEVEL:
      return isSetLogLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExOperation)
      return this.equals((ExOperation)that);
    return false;
  }

  public boolean equals(ExOperation that) {
    if (that == null)
      return false;

    boolean this_present_dspID = true && this.isSetDspID();
    boolean that_present_dspID = true && that.isSetDspID();
    if (this_present_dspID || that_present_dspID) {
      if (!(this_present_dspID && that_present_dspID))
        return false;
      if (this.dspID != that.dspID)
        return false;
    }

    boolean this_present_bidID = true && this.isSetBidID();
    boolean that_present_bidID = true && that.isSetBidID();
    if (this_present_bidID || that_present_bidID) {
      if (!(this_present_bidID && that_present_bidID))
        return false;
      if (!this.bidID.equals(that.bidID))
        return false;
    }

    boolean this_present_impID = true && this.isSetImpID();
    boolean that_present_impID = true && that.isSetImpID();
    if (this_present_impID || that_present_impID) {
      if (!(this_present_impID && that_present_impID))
        return false;
      if (!this.impID.equals(that.impID))
        return false;
    }

    boolean this_present_monitorKey = true && this.isSetMonitorKey();
    boolean that_present_monitorKey = true && that.isSetMonitorKey();
    if (this_present_monitorKey || that_present_monitorKey) {
      if (!(this_present_monitorKey && that_present_monitorKey))
        return false;
      if (!this.monitorKey.equals(that.monitorKey))
        return false;
    }

    boolean this_present_suv = true && this.isSetSuv();
    boolean that_present_suv = true && that.isSetSuv();
    if (this_present_suv || that_present_suv) {
      if (!(this_present_suv && that_present_suv))
        return false;
      if (!this.suv.equals(that.suv))
        return false;
    }

    boolean this_present_adID = true && this.isSetAdID();
    boolean that_present_adID = true && that.isSetAdID();
    if (this_present_adID || that_present_adID) {
      if (!(this_present_adID && that_present_adID))
        return false;
      if (!this.adID.equals(that.adID))
        return false;
    }

    boolean this_present_adpID = true && this.isSetAdpID();
    boolean that_present_adpID = true && that.isSetAdpID();
    if (this_present_adpID || that_present_adpID) {
      if (!(this_present_adpID && that_present_adpID))
        return false;
      if (!this.adpID.equals(that.adpID))
        return false;
    }

    boolean this_present_adSize = true && this.isSetAdSize();
    boolean that_present_adSize = true && that.isSetAdSize();
    if (this_present_adSize || that_present_adSize) {
      if (!(this_present_adSize && that_present_adSize))
        return false;
      if (this.adSize != that.adSize)
        return false;
    }

    boolean this_present_adUrl = true && this.isSetAdUrl();
    boolean that_present_adUrl = true && that.isSetAdUrl();
    if (this_present_adUrl || that_present_adUrl) {
      if (!(this_present_adUrl && that_present_adUrl))
        return false;
      if (!this.adUrl.equals(that.adUrl))
        return false;
    }

    boolean this_present_bidFloor = true && this.isSetBidFloor();
    boolean that_present_bidFloor = true && that.isSetBidFloor();
    if (this_present_bidFloor || that_present_bidFloor) {
      if (!(this_present_bidFloor && that_present_bidFloor))
        return false;
      if (this.bidFloor != that.bidFloor)
        return false;
    }

    boolean this_present_bidPrice = true && this.isSetBidPrice();
    boolean that_present_bidPrice = true && that.isSetBidPrice();
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (this.bidPrice != that.bidPrice)
        return false;
    }

    boolean this_present_secondPrice = true && this.isSetSecondPrice();
    boolean that_present_secondPrice = true && that.isSetSecondPrice();
    if (this_present_secondPrice || that_present_secondPrice) {
      if (!(this_present_secondPrice && that_present_secondPrice))
        return false;
      if (this.secondPrice != that.secondPrice)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_latency = true && this.isSetLatency();
    boolean that_present_latency = true && that.isSetLatency();
    if (this_present_latency || that_present_latency) {
      if (!(this_present_latency && that_present_latency))
        return false;
      if (this.latency != that.latency)
        return false;
    }

    boolean this_present_logType = true && this.isSetLogType();
    boolean that_present_logType = true && that.isSetLogType();
    if (this_present_logType || that_present_logType) {
      if (!(this_present_logType && that_present_logType))
        return false;
      if (!this.logType.equals(that.logType))
        return false;
    }

    boolean this_present_logTime = true && this.isSetLogTime();
    boolean that_present_logTime = true && that.isSetLogTime();
    if (this_present_logTime || that_present_logTime) {
      if (!(this_present_logTime && that_present_logTime))
        return false;
      if (!this.logTime.equals(that.logTime))
        return false;
    }

    boolean this_present_logLevel = true && this.isSetLogLevel();
    boolean that_present_logLevel = true && that.isSetLogLevel();
    if (this_present_logLevel || that_present_logLevel) {
      if (!(this_present_logLevel && that_present_logLevel))
        return false;
      if (!this.logLevel.equals(that.logLevel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExOperation typedOther = (ExOperation)other;

    lastComparison = Boolean.valueOf(isSetDspID()).compareTo(typedOther.isSetDspID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspID, typedOther.dspID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidID()).compareTo(typedOther.isSetBidID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidID, typedOther.bidID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpID()).compareTo(typedOther.isSetImpID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impID, typedOther.impID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorKey()).compareTo(typedOther.isSetMonitorKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorKey, typedOther.monitorKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuv()).compareTo(typedOther.isSetSuv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suv, typedOther.suv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdID()).compareTo(typedOther.isSetAdID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adID, typedOther.adID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpID()).compareTo(typedOther.isSetAdpID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpID, typedOther.adpID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSize()).compareTo(typedOther.isSetAdSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSize, typedOther.adSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdUrl()).compareTo(typedOther.isSetAdUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adUrl, typedOther.adUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidFloor()).compareTo(typedOther.isSetBidFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidFloor, typedOther.bidFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(typedOther.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, typedOther.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondPrice()).compareTo(typedOther.isSetSecondPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondPrice, typedOther.secondPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatency()).compareTo(typedOther.isSetLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latency, typedOther.latency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogType()).compareTo(typedOther.isSetLogType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logType, typedOther.logType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogTime()).compareTo(typedOther.isSetLogTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logTime, typedOther.logTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogLevel()).compareTo(typedOther.isSetLogLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logLevel, typedOther.logLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExOperation(");
    boolean first = true;

    if (isSetDspID()) {
      sb.append("dspID:");
      sb.append(this.dspID);
      first = false;
    }
    if (isSetBidID()) {
      if (!first) sb.append(", ");
      sb.append("bidID:");
      if (this.bidID == null) {
        sb.append("null");
      } else {
        sb.append(this.bidID);
      }
      first = false;
    }
    if (isSetImpID()) {
      if (!first) sb.append(", ");
      sb.append("impID:");
      if (this.impID == null) {
        sb.append("null");
      } else {
        sb.append(this.impID);
      }
      first = false;
    }
    if (isSetMonitorKey()) {
      if (!first) sb.append(", ");
      sb.append("monitorKey:");
      if (this.monitorKey == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorKey);
      }
      first = false;
    }
    if (isSetSuv()) {
      if (!first) sb.append(", ");
      sb.append("suv:");
      if (this.suv == null) {
        sb.append("null");
      } else {
        sb.append(this.suv);
      }
      first = false;
    }
    if (isSetAdID()) {
      if (!first) sb.append(", ");
      sb.append("adID:");
      if (this.adID == null) {
        sb.append("null");
      } else {
        sb.append(this.adID);
      }
      first = false;
    }
    if (isSetAdpID()) {
      if (!first) sb.append(", ");
      sb.append("adpID:");
      if (this.adpID == null) {
        sb.append("null");
      } else {
        sb.append(this.adpID);
      }
      first = false;
    }
    if (isSetAdSize()) {
      if (!first) sb.append(", ");
      sb.append("adSize:");
      sb.append(this.adSize);
      first = false;
    }
    if (isSetAdUrl()) {
      if (!first) sb.append(", ");
      sb.append("adUrl:");
      if (this.adUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.adUrl);
      }
      first = false;
    }
    if (isSetBidFloor()) {
      if (!first) sb.append(", ");
      sb.append("bidFloor:");
      sb.append(this.bidFloor);
      first = false;
    }
    if (isSetBidPrice()) {
      if (!first) sb.append(", ");
      sb.append("bidPrice:");
      sb.append(this.bidPrice);
      first = false;
    }
    if (isSetSecondPrice()) {
      if (!first) sb.append(", ");
      sb.append("secondPrice:");
      sb.append(this.secondPrice);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetLatency()) {
      if (!first) sb.append(", ");
      sb.append("latency:");
      sb.append(this.latency);
      first = false;
    }
    if (isSetLogType()) {
      if (!first) sb.append(", ");
      sb.append("logType:");
      if (this.logType == null) {
        sb.append("null");
      } else {
        sb.append(this.logType);
      }
      first = false;
    }
    if (isSetLogTime()) {
      if (!first) sb.append(", ");
      sb.append("logTime:");
      if (this.logTime == null) {
        sb.append("null");
      } else {
        sb.append(this.logTime);
      }
      first = false;
    }
    if (isSetLogLevel()) {
      if (!first) sb.append(", ");
      sb.append("logLevel:");
      if (this.logLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.logLevel);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExOperationStandardSchemeFactory implements SchemeFactory {
    public ExOperationStandardScheme getScheme() {
      return new ExOperationStandardScheme();
    }
  }

  private static class ExOperationStandardScheme extends StandardScheme<ExOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DSP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspID = iprot.readI32();
              struct.setDspIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BID_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidID = iprot.readString();
              struct.setBidIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impID = iprot.readString();
              struct.setImpIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONITOR_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorKey = iprot.readString();
              struct.setMonitorKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suv = iprot.readString();
              struct.setSuvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adID = iprot.readString();
              struct.setAdIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adpID = iprot.readString();
              struct.setAdpIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AD_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSize = iprot.readI32();
              struct.setAdSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adUrl = iprot.readString();
              struct.setAdUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BID_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidFloor = iprot.readI32();
              struct.setBidFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidPrice = iprot.readI32();
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SECOND_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondPrice = iprot.readI32();
              struct.setSecondPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latency = iprot.readI64();
              struct.setLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logType = iprot.readString();
              struct.setLogTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logTime = iprot.readString();
              struct.setLogTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logLevel = iprot.readString();
              struct.setLogLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDspID()) {
        oprot.writeFieldBegin(DSP_ID_FIELD_DESC);
        oprot.writeI32(struct.dspID);
        oprot.writeFieldEnd();
      }
      if (struct.bidID != null) {
        if (struct.isSetBidID()) {
          oprot.writeFieldBegin(BID_ID_FIELD_DESC);
          oprot.writeString(struct.bidID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.impID != null) {
        if (struct.isSetImpID()) {
          oprot.writeFieldBegin(IMP_ID_FIELD_DESC);
          oprot.writeString(struct.impID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.monitorKey != null) {
        if (struct.isSetMonitorKey()) {
          oprot.writeFieldBegin(MONITOR_KEY_FIELD_DESC);
          oprot.writeString(struct.monitorKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.suv != null) {
        if (struct.isSetSuv()) {
          oprot.writeFieldBegin(SUV_FIELD_DESC);
          oprot.writeString(struct.suv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adID != null) {
        if (struct.isSetAdID()) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adpID != null) {
        if (struct.isSetAdpID()) {
          oprot.writeFieldBegin(ADP_ID_FIELD_DESC);
          oprot.writeString(struct.adpID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdSize()) {
        oprot.writeFieldBegin(AD_SIZE_FIELD_DESC);
        oprot.writeI32(struct.adSize);
        oprot.writeFieldEnd();
      }
      if (struct.adUrl != null) {
        if (struct.isSetAdUrl()) {
          oprot.writeFieldBegin(AD_URL_FIELD_DESC);
          oprot.writeString(struct.adUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBidFloor()) {
        oprot.writeFieldBegin(BID_FLOOR_FIELD_DESC);
        oprot.writeI32(struct.bidFloor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBidPrice()) {
        oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
        oprot.writeI32(struct.bidPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSecondPrice()) {
        oprot.writeFieldBegin(SECOND_PRICE_FIELD_DESC);
        oprot.writeI32(struct.secondPrice);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLatency()) {
        oprot.writeFieldBegin(LATENCY_FIELD_DESC);
        oprot.writeI64(struct.latency);
        oprot.writeFieldEnd();
      }
      if (struct.logType != null) {
        if (struct.isSetLogType()) {
          oprot.writeFieldBegin(LOG_TYPE_FIELD_DESC);
          oprot.writeString(struct.logType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logTime != null) {
        if (struct.isSetLogTime()) {
          oprot.writeFieldBegin(LOG_TIME_FIELD_DESC);
          oprot.writeString(struct.logTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logLevel != null) {
        if (struct.isSetLogLevel()) {
          oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.logLevel);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExOperationTupleSchemeFactory implements SchemeFactory {
    public ExOperationTupleScheme getScheme() {
      return new ExOperationTupleScheme();
    }
  }

  private static class ExOperationTupleScheme extends TupleScheme<ExOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDspID()) {
        optionals.set(0);
      }
      if (struct.isSetBidID()) {
        optionals.set(1);
      }
      if (struct.isSetImpID()) {
        optionals.set(2);
      }
      if (struct.isSetMonitorKey()) {
        optionals.set(3);
      }
      if (struct.isSetSuv()) {
        optionals.set(4);
      }
      if (struct.isSetAdID()) {
        optionals.set(5);
      }
      if (struct.isSetAdpID()) {
        optionals.set(6);
      }
      if (struct.isSetAdSize()) {
        optionals.set(7);
      }
      if (struct.isSetAdUrl()) {
        optionals.set(8);
      }
      if (struct.isSetBidFloor()) {
        optionals.set(9);
      }
      if (struct.isSetBidPrice()) {
        optionals.set(10);
      }
      if (struct.isSetSecondPrice()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetLatency()) {
        optionals.set(13);
      }
      if (struct.isSetLogType()) {
        optionals.set(14);
      }
      if (struct.isSetLogTime()) {
        optionals.set(15);
      }
      if (struct.isSetLogLevel()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetDspID()) {
        oprot.writeI32(struct.dspID);
      }
      if (struct.isSetBidID()) {
        oprot.writeString(struct.bidID);
      }
      if (struct.isSetImpID()) {
        oprot.writeString(struct.impID);
      }
      if (struct.isSetMonitorKey()) {
        oprot.writeString(struct.monitorKey);
      }
      if (struct.isSetSuv()) {
        oprot.writeString(struct.suv);
      }
      if (struct.isSetAdID()) {
        oprot.writeString(struct.adID);
      }
      if (struct.isSetAdpID()) {
        oprot.writeString(struct.adpID);
      }
      if (struct.isSetAdSize()) {
        oprot.writeI32(struct.adSize);
      }
      if (struct.isSetAdUrl()) {
        oprot.writeString(struct.adUrl);
      }
      if (struct.isSetBidFloor()) {
        oprot.writeI32(struct.bidFloor);
      }
      if (struct.isSetBidPrice()) {
        oprot.writeI32(struct.bidPrice);
      }
      if (struct.isSetSecondPrice()) {
        oprot.writeI32(struct.secondPrice);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetLatency()) {
        oprot.writeI64(struct.latency);
      }
      if (struct.isSetLogType()) {
        oprot.writeString(struct.logType);
      }
      if (struct.isSetLogTime()) {
        oprot.writeString(struct.logTime);
      }
      if (struct.isSetLogLevel()) {
        oprot.writeString(struct.logLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.dspID = iprot.readI32();
        struct.setDspIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bidID = iprot.readString();
        struct.setBidIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.impID = iprot.readString();
        struct.setImpIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.monitorKey = iprot.readString();
        struct.setMonitorKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.suv = iprot.readString();
        struct.setSuvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.adID = iprot.readString();
        struct.setAdIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.adpID = iprot.readString();
        struct.setAdpIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.adSize = iprot.readI32();
        struct.setAdSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.adUrl = iprot.readString();
        struct.setAdUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bidFloor = iprot.readI32();
        struct.setBidFloorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.bidPrice = iprot.readI32();
        struct.setBidPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.secondPrice = iprot.readI32();
        struct.setSecondPriceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.latency = iprot.readI64();
        struct.setLatencyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.logType = iprot.readString();
        struct.setLogTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.logTime = iprot.readString();
        struct.setLogTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.logLevel = iprot.readString();
        struct.setLogLevelIsSet(true);
      }
    }
  }

}

