/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.adrd.data.sessionlog.thrift.operation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CMOperation implements org.apache.thrift.TBase<CMOperation, CMOperation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CMOperation");

  private static final org.apache.thrift.protocol.TField EXT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("extData", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EX_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("exUID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField M_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("suv", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField VER_FIELD_DESC = new org.apache.thrift.protocol.TField("ver", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField YYID_FIELD_DESC = new org.apache.thrift.protocol.TField("yyid", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LOG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("logTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("logLevel", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CMOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CMOperationTupleSchemeFactory());
  }

  public String extData; // optional
  public String exUID; // optional
  public String mID; // optional
  public String suv; // optional
  public List<String> tags; // optional
  public String ver; // optional
  public String yyid; // optional
  public long timestamp; // optional
  public String logTime; // optional
  public String logLevel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXT_DATA((short)1, "extData"),
    EX_UID((short)2, "exUID"),
    M_ID((short)3, "mID"),
    SUV((short)4, "suv"),
    TAGS((short)5, "tags"),
    VER((short)6, "ver"),
    YYID((short)7, "yyid"),
    TIMESTAMP((short)8, "timestamp"),
    LOG_TIME((short)9, "logTime"),
    LOG_LEVEL((short)10, "logLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXT_DATA
          return EXT_DATA;
        case 2: // EX_UID
          return EX_UID;
        case 3: // M_ID
          return M_ID;
        case 4: // SUV
          return SUV;
        case 5: // TAGS
          return TAGS;
        case 6: // VER
          return VER;
        case 7: // YYID
          return YYID;
        case 8: // TIMESTAMP
          return TIMESTAMP;
        case 9: // LOG_TIME
          return LOG_TIME;
        case 10: // LOG_LEVEL
          return LOG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.EXT_DATA,_Fields.EX_UID,_Fields.M_ID,_Fields.SUV,_Fields.TAGS,_Fields.VER,_Fields.YYID,_Fields.TIMESTAMP,_Fields.LOG_TIME,_Fields.LOG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXT_DATA, new org.apache.thrift.meta_data.FieldMetaData("extData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_UID, new org.apache.thrift.meta_data.FieldMetaData("exUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_ID, new org.apache.thrift.meta_data.FieldMetaData("mID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUV, new org.apache.thrift.meta_data.FieldMetaData("suv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VER, new org.apache.thrift.meta_data.FieldMetaData("ver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YYID, new org.apache.thrift.meta_data.FieldMetaData("yyid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_TIME, new org.apache.thrift.meta_data.FieldMetaData("logTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("logLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CMOperation.class, metaDataMap);
  }

  public CMOperation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CMOperation(CMOperation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetExtData()) {
      this.extData = other.extData;
    }
    if (other.isSetExUID()) {
      this.exUID = other.exUID;
    }
    if (other.isSetMID()) {
      this.mID = other.mID;
    }
    if (other.isSetSuv()) {
      this.suv = other.suv;
    }
    if (other.isSetTags()) {
      List<String> __this__tags = new ArrayList<String>();
      for (String other_element : other.tags) {
        __this__tags.add(other_element);
      }
      this.tags = __this__tags;
    }
    if (other.isSetVer()) {
      this.ver = other.ver;
    }
    if (other.isSetYyid()) {
      this.yyid = other.yyid;
    }
    this.timestamp = other.timestamp;
    if (other.isSetLogTime()) {
      this.logTime = other.logTime;
    }
    if (other.isSetLogLevel()) {
      this.logLevel = other.logLevel;
    }
  }

  public CMOperation deepCopy() {
    return new CMOperation(this);
  }

  @Override
  public void clear() {
    this.extData = null;
    this.exUID = null;
    this.mID = null;
    this.suv = null;
    this.tags = null;
    this.ver = null;
    this.yyid = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.logTime = null;
    this.logLevel = null;
  }

  public String getExtData() {
    return this.extData;
  }

  public CMOperation setExtData(String extData) {
    this.extData = extData;
    return this;
  }

  public void unsetExtData() {
    this.extData = null;
  }

  /** Returns true if field extData is set (has been assigned a value) and false otherwise */
  public boolean isSetExtData() {
    return this.extData != null;
  }

  public void setExtDataIsSet(boolean value) {
    if (!value) {
      this.extData = null;
    }
  }

  public String getExUID() {
    return this.exUID;
  }

  public CMOperation setExUID(String exUID) {
    this.exUID = exUID;
    return this;
  }

  public void unsetExUID() {
    this.exUID = null;
  }

  /** Returns true if field exUID is set (has been assigned a value) and false otherwise */
  public boolean isSetExUID() {
    return this.exUID != null;
  }

  public void setExUIDIsSet(boolean value) {
    if (!value) {
      this.exUID = null;
    }
  }

  public String getMID() {
    return this.mID;
  }

  public CMOperation setMID(String mID) {
    this.mID = mID;
    return this;
  }

  public void unsetMID() {
    this.mID = null;
  }

  /** Returns true if field mID is set (has been assigned a value) and false otherwise */
  public boolean isSetMID() {
    return this.mID != null;
  }

  public void setMIDIsSet(boolean value) {
    if (!value) {
      this.mID = null;
    }
  }

  public String getSuv() {
    return this.suv;
  }

  public CMOperation setSuv(String suv) {
    this.suv = suv;
    return this;
  }

  public void unsetSuv() {
    this.suv = null;
  }

  /** Returns true if field suv is set (has been assigned a value) and false otherwise */
  public boolean isSetSuv() {
    return this.suv != null;
  }

  public void setSuvIsSet(boolean value) {
    if (!value) {
      this.suv = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(elem);
  }

  public List<String> getTags() {
    return this.tags;
  }

  public CMOperation setTags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getVer() {
    return this.ver;
  }

  public CMOperation setVer(String ver) {
    this.ver = ver;
    return this;
  }

  public void unsetVer() {
    this.ver = null;
  }

  /** Returns true if field ver is set (has been assigned a value) and false otherwise */
  public boolean isSetVer() {
    return this.ver != null;
  }

  public void setVerIsSet(boolean value) {
    if (!value) {
      this.ver = null;
    }
  }

  public String getYyid() {
    return this.yyid;
  }

  public CMOperation setYyid(String yyid) {
    this.yyid = yyid;
    return this;
  }

  public void unsetYyid() {
    this.yyid = null;
  }

  /** Returns true if field yyid is set (has been assigned a value) and false otherwise */
  public boolean isSetYyid() {
    return this.yyid != null;
  }

  public void setYyidIsSet(boolean value) {
    if (!value) {
      this.yyid = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public CMOperation setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getLogTime() {
    return this.logTime;
  }

  public CMOperation setLogTime(String logTime) {
    this.logTime = logTime;
    return this;
  }

  public void unsetLogTime() {
    this.logTime = null;
  }

  /** Returns true if field logTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLogTime() {
    return this.logTime != null;
  }

  public void setLogTimeIsSet(boolean value) {
    if (!value) {
      this.logTime = null;
    }
  }

  public String getLogLevel() {
    return this.logLevel;
  }

  public CMOperation setLogLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  public void unsetLogLevel() {
    this.logLevel = null;
  }

  /** Returns true if field logLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetLogLevel() {
    return this.logLevel != null;
  }

  public void setLogLevelIsSet(boolean value) {
    if (!value) {
      this.logLevel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXT_DATA:
      if (value == null) {
        unsetExtData();
      } else {
        setExtData((String)value);
      }
      break;

    case EX_UID:
      if (value == null) {
        unsetExUID();
      } else {
        setExUID((String)value);
      }
      break;

    case M_ID:
      if (value == null) {
        unsetMID();
      } else {
        setMID((String)value);
      }
      break;

    case SUV:
      if (value == null) {
        unsetSuv();
      } else {
        setSuv((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<String>)value);
      }
      break;

    case VER:
      if (value == null) {
        unsetVer();
      } else {
        setVer((String)value);
      }
      break;

    case YYID:
      if (value == null) {
        unsetYyid();
      } else {
        setYyid((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case LOG_TIME:
      if (value == null) {
        unsetLogTime();
      } else {
        setLogTime((String)value);
      }
      break;

    case LOG_LEVEL:
      if (value == null) {
        unsetLogLevel();
      } else {
        setLogLevel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXT_DATA:
      return getExtData();

    case EX_UID:
      return getExUID();

    case M_ID:
      return getMID();

    case SUV:
      return getSuv();

    case TAGS:
      return getTags();

    case VER:
      return getVer();

    case YYID:
      return getYyid();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case LOG_TIME:
      return getLogTime();

    case LOG_LEVEL:
      return getLogLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXT_DATA:
      return isSetExtData();
    case EX_UID:
      return isSetExUID();
    case M_ID:
      return isSetMID();
    case SUV:
      return isSetSuv();
    case TAGS:
      return isSetTags();
    case VER:
      return isSetVer();
    case YYID:
      return isSetYyid();
    case TIMESTAMP:
      return isSetTimestamp();
    case LOG_TIME:
      return isSetLogTime();
    case LOG_LEVEL:
      return isSetLogLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CMOperation)
      return this.equals((CMOperation)that);
    return false;
  }

  public boolean equals(CMOperation that) {
    if (that == null)
      return false;

    boolean this_present_extData = true && this.isSetExtData();
    boolean that_present_extData = true && that.isSetExtData();
    if (this_present_extData || that_present_extData) {
      if (!(this_present_extData && that_present_extData))
        return false;
      if (!this.extData.equals(that.extData))
        return false;
    }

    boolean this_present_exUID = true && this.isSetExUID();
    boolean that_present_exUID = true && that.isSetExUID();
    if (this_present_exUID || that_present_exUID) {
      if (!(this_present_exUID && that_present_exUID))
        return false;
      if (!this.exUID.equals(that.exUID))
        return false;
    }

    boolean this_present_mID = true && this.isSetMID();
    boolean that_present_mID = true && that.isSetMID();
    if (this_present_mID || that_present_mID) {
      if (!(this_present_mID && that_present_mID))
        return false;
      if (!this.mID.equals(that.mID))
        return false;
    }

    boolean this_present_suv = true && this.isSetSuv();
    boolean that_present_suv = true && that.isSetSuv();
    if (this_present_suv || that_present_suv) {
      if (!(this_present_suv && that_present_suv))
        return false;
      if (!this.suv.equals(that.suv))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_ver = true && this.isSetVer();
    boolean that_present_ver = true && that.isSetVer();
    if (this_present_ver || that_present_ver) {
      if (!(this_present_ver && that_present_ver))
        return false;
      if (!this.ver.equals(that.ver))
        return false;
    }

    boolean this_present_yyid = true && this.isSetYyid();
    boolean that_present_yyid = true && that.isSetYyid();
    if (this_present_yyid || that_present_yyid) {
      if (!(this_present_yyid && that_present_yyid))
        return false;
      if (!this.yyid.equals(that.yyid))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_logTime = true && this.isSetLogTime();
    boolean that_present_logTime = true && that.isSetLogTime();
    if (this_present_logTime || that_present_logTime) {
      if (!(this_present_logTime && that_present_logTime))
        return false;
      if (!this.logTime.equals(that.logTime))
        return false;
    }

    boolean this_present_logLevel = true && this.isSetLogLevel();
    boolean that_present_logLevel = true && that.isSetLogLevel();
    if (this_present_logLevel || that_present_logLevel) {
      if (!(this_present_logLevel && that_present_logLevel))
        return false;
      if (!this.logLevel.equals(that.logLevel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CMOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CMOperation typedOther = (CMOperation)other;

    lastComparison = Boolean.valueOf(isSetExtData()).compareTo(typedOther.isSetExtData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extData, typedOther.extData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExUID()).compareTo(typedOther.isSetExUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exUID, typedOther.exUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMID()).compareTo(typedOther.isSetMID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mID, typedOther.mID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuv()).compareTo(typedOther.isSetSuv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suv, typedOther.suv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, typedOther.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVer()).compareTo(typedOther.isSetVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ver, typedOther.ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYyid()).compareTo(typedOther.isSetYyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyid, typedOther.yyid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogTime()).compareTo(typedOther.isSetLogTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logTime, typedOther.logTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogLevel()).compareTo(typedOther.isSetLogLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logLevel, typedOther.logLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CMOperation(");
    boolean first = true;

    if (isSetExtData()) {
      sb.append("extData:");
      if (this.extData == null) {
        sb.append("null");
      } else {
        sb.append(this.extData);
      }
      first = false;
    }
    if (isSetExUID()) {
      if (!first) sb.append(", ");
      sb.append("exUID:");
      if (this.exUID == null) {
        sb.append("null");
      } else {
        sb.append(this.exUID);
      }
      first = false;
    }
    if (isSetMID()) {
      if (!first) sb.append(", ");
      sb.append("mID:");
      if (this.mID == null) {
        sb.append("null");
      } else {
        sb.append(this.mID);
      }
      first = false;
    }
    if (isSetSuv()) {
      if (!first) sb.append(", ");
      sb.append("suv:");
      if (this.suv == null) {
        sb.append("null");
      } else {
        sb.append(this.suv);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetVer()) {
      if (!first) sb.append(", ");
      sb.append("ver:");
      if (this.ver == null) {
        sb.append("null");
      } else {
        sb.append(this.ver);
      }
      first = false;
    }
    if (isSetYyid()) {
      if (!first) sb.append(", ");
      sb.append("yyid:");
      if (this.yyid == null) {
        sb.append("null");
      } else {
        sb.append(this.yyid);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetLogTime()) {
      if (!first) sb.append(", ");
      sb.append("logTime:");
      if (this.logTime == null) {
        sb.append("null");
      } else {
        sb.append(this.logTime);
      }
      first = false;
    }
    if (isSetLogLevel()) {
      if (!first) sb.append(", ");
      sb.append("logLevel:");
      if (this.logLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.logLevel);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CMOperationStandardSchemeFactory implements SchemeFactory {
    public CMOperationStandardScheme getScheme() {
      return new CMOperationStandardScheme();
    }
  }

  private static class CMOperationStandardScheme extends StandardScheme<CMOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CMOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extData = iprot.readString();
              struct.setExtDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EX_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exUID = iprot.readString();
              struct.setExUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // M_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mID = iprot.readString();
              struct.setMIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suv = iprot.readString();
              struct.setSuvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.tags.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ver = iprot.readString();
              struct.setVerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // YYID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yyid = iprot.readString();
              struct.setYyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logTime = iprot.readString();
              struct.setLogTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logLevel = iprot.readString();
              struct.setLogLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CMOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.extData != null) {
        if (struct.isSetExtData()) {
          oprot.writeFieldBegin(EXT_DATA_FIELD_DESC);
          oprot.writeString(struct.extData);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exUID != null) {
        if (struct.isSetExUID()) {
          oprot.writeFieldBegin(EX_UID_FIELD_DESC);
          oprot.writeString(struct.exUID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mID != null) {
        if (struct.isSetMID()) {
          oprot.writeFieldBegin(M_ID_FIELD_DESC);
          oprot.writeString(struct.mID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.suv != null) {
        if (struct.isSetSuv()) {
          oprot.writeFieldBegin(SUV_FIELD_DESC);
          oprot.writeString(struct.suv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter3 : struct.tags)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ver != null) {
        if (struct.isSetVer()) {
          oprot.writeFieldBegin(VER_FIELD_DESC);
          oprot.writeString(struct.ver);
          oprot.writeFieldEnd();
        }
      }
      if (struct.yyid != null) {
        if (struct.isSetYyid()) {
          oprot.writeFieldBegin(YYID_FIELD_DESC);
          oprot.writeString(struct.yyid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.logTime != null) {
        if (struct.isSetLogTime()) {
          oprot.writeFieldBegin(LOG_TIME_FIELD_DESC);
          oprot.writeString(struct.logTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logLevel != null) {
        if (struct.isSetLogLevel()) {
          oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.logLevel);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CMOperationTupleSchemeFactory implements SchemeFactory {
    public CMOperationTupleScheme getScheme() {
      return new CMOperationTupleScheme();
    }
  }

  private static class CMOperationTupleScheme extends TupleScheme<CMOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CMOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExtData()) {
        optionals.set(0);
      }
      if (struct.isSetExUID()) {
        optionals.set(1);
      }
      if (struct.isSetMID()) {
        optionals.set(2);
      }
      if (struct.isSetSuv()) {
        optionals.set(3);
      }
      if (struct.isSetTags()) {
        optionals.set(4);
      }
      if (struct.isSetVer()) {
        optionals.set(5);
      }
      if (struct.isSetYyid()) {
        optionals.set(6);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetLogTime()) {
        optionals.set(8);
      }
      if (struct.isSetLogLevel()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetExtData()) {
        oprot.writeString(struct.extData);
      }
      if (struct.isSetExUID()) {
        oprot.writeString(struct.exUID);
      }
      if (struct.isSetMID()) {
        oprot.writeString(struct.mID);
      }
      if (struct.isSetSuv()) {
        oprot.writeString(struct.suv);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter4 : struct.tags)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetVer()) {
        oprot.writeString(struct.ver);
      }
      if (struct.isSetYyid()) {
        oprot.writeString(struct.yyid);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetLogTime()) {
        oprot.writeString(struct.logTime);
      }
      if (struct.isSetLogLevel()) {
        oprot.writeString(struct.logLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CMOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.extData = iprot.readString();
        struct.setExtDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exUID = iprot.readString();
        struct.setExUIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mID = iprot.readString();
        struct.setMIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.suv = iprot.readString();
        struct.setSuvIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7; // required
            _elem7 = iprot.readString();
            struct.tags.add(_elem7);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ver = iprot.readString();
        struct.setVerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.yyid = iprot.readString();
        struct.setYyidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        struct.logTime = iprot.readString();
        struct.setLogTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.logLevel = iprot.readString();
        struct.setLogLevelIsSet(true);
      }
    }
  }

}

