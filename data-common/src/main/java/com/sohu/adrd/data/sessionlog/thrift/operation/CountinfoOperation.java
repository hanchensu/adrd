/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.adrd.data.sessionlog.thrift.operation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CountinfoOperation implements org.apache.thrift.TBase<CountinfoOperation, CountinfoOperation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CountinfoOperation");

  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ADP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adpId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AD_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("adPos", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ADP_X_FIELD_DESC = new org.apache.thrift.protocol.TField("adpX", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ADP_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("adpY", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("adType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BROWSER_FIELD_DESC = new org.apache.thrift.protocol.TField("browser", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLICK_X_FIELD_DESC = new org.apache.thrift.protocol.TField("clickX", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CLICK_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("clickY", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CONTENT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("contentUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("freq", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField GET_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("getUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IMPRESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("impressionId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LATENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("latency", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField MONITOR_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorKey", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REFER_FIELD_DESC = new org.apache.thrift.protocol.TField("refer", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REQ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reqType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("resolution", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("suv", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField TURN_FIELD_DESC = new org.apache.thrift.protocol.TField("turn", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("userIp", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField YY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("yyId", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField SUPPORT_FLASH_FIELD_DESC = new org.apache.thrift.protocol.TField("supportFlash", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pageId", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField ADVERTISER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("advertiserId", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField BID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidType", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField BID_PRICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice2", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField BID_TYPE2_FIELD_DESC = new org.apache.thrift.protocol.TField("bidType2", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField JS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jsVersion", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField CTR_FIELD_DESC = new org.apache.thrift.protocol.TField("ctr", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField CTR2_FIELD_DESC = new org.apache.thrift.protocol.TField("ctr2", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField E_CPM_FIELD_DESC = new org.apache.thrift.protocol.TField("eCPM", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField E_CPM2_FIELD_DESC = new org.apache.thrift.protocol.TField("eCPM2", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField ADGROUP_MK_FIELD_DESC = new org.apache.thrift.protocol.TField("adgroupMK", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField ADVERTISER_ID_MK_FIELD_DESC = new org.apache.thrift.protocol.TField("advertiserIdMK", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField AD_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("adScore", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_MK_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignIdMK", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField ED_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("edContent", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField ED_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("edStatus", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField LINE_ID_MK_FIELD_DESC = new org.apache.thrift.protocol.TField("lineIdMK", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField MATERIAL_MK_FIELD_DESC = new org.apache.thrift.protocol.TField("materialMK", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField LOG_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("logTime", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField LOG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("logLevel", org.apache.thrift.protocol.TType.STRING, (short)51);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CountinfoOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CountinfoOperationTupleSchemeFactory());
  }

  public String adId; // optional
  public String adpId; // optional
  public int adPos; // optional
  public int adpX; // optional
  public int adpY; // optional
  public String adType; // optional
  public String browser; // optional
  public int clickX; // optional
  public int clickY; // optional
  public String contentUrl; // optional
  public String ext; // optional
  public int freq; // optional
  public String getUrl; // optional
  public String impressionId; // optional
  public long latency; // optional
  public String monitorKey; // optional
  public String os; // optional
  public String refer; // optional
  public String region; // optional
  public String reqType; // optional
  public String resolution; // optional
  public String suv; // optional
  public long timestamp; // optional
  public String turn; // optional
  public String userAgent; // optional
  public String userIp; // optional
  public String yyId; // optional
  public int repeat; // optional
  public String supportFlash; // optional
  public String pageId; // optional
  public long statusCode; // optional
  public String advertiserId; // optional
  public double bidPrice; // optional
  public int bidType; // optional
  public double bidPrice2; // optional
  public int bidType2; // optional
  public String jsVersion; // optional
  public double ctr; // optional
  public double ctr2; // optional
  public double eCPM; // optional
  public double eCPM2; // optional
  public String adgroupMK; // optional
  public String advertiserIdMK; // optional
  public String adScore; // optional
  public String campaignIdMK; // optional
  public String edContent; // optional
  public String edStatus; // optional
  public String lineIdMK; // optional
  public String materialMK; // optional
  public String logTime; // optional
  public String logLevel; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_ID((short)1, "adId"),
    ADP_ID((short)2, "adpId"),
    AD_POS((short)3, "adPos"),
    ADP_X((short)4, "adpX"),
    ADP_Y((short)5, "adpY"),
    AD_TYPE((short)6, "adType"),
    BROWSER((short)7, "browser"),
    CLICK_X((short)8, "clickX"),
    CLICK_Y((short)9, "clickY"),
    CONTENT_URL((short)10, "contentUrl"),
    EXT((short)11, "ext"),
    FREQ((short)12, "freq"),
    GET_URL((short)13, "getUrl"),
    IMPRESSION_ID((short)14, "impressionId"),
    LATENCY((short)15, "latency"),
    MONITOR_KEY((short)16, "monitorKey"),
    OS((short)17, "os"),
    REFER((short)18, "refer"),
    REGION((short)19, "region"),
    REQ_TYPE((short)20, "reqType"),
    RESOLUTION((short)21, "resolution"),
    SUV((short)22, "suv"),
    TIMESTAMP((short)23, "timestamp"),
    TURN((short)24, "turn"),
    USER_AGENT((short)25, "userAgent"),
    USER_IP((short)26, "userIp"),
    YY_ID((short)27, "yyId"),
    REPEAT((short)28, "repeat"),
    SUPPORT_FLASH((short)29, "supportFlash"),
    PAGE_ID((short)30, "pageId"),
    STATUS_CODE((short)31, "statusCode"),
    ADVERTISER_ID((short)32, "advertiserId"),
    BID_PRICE((short)33, "bidPrice"),
    BID_TYPE((short)34, "bidType"),
    BID_PRICE2((short)35, "bidPrice2"),
    BID_TYPE2((short)36, "bidType2"),
    JS_VERSION((short)37, "jsVersion"),
    CTR((short)38, "ctr"),
    CTR2((short)39, "ctr2"),
    E_CPM((short)40, "eCPM"),
    E_CPM2((short)41, "eCPM2"),
    ADGROUP_MK((short)42, "adgroupMK"),
    ADVERTISER_ID_MK((short)43, "advertiserIdMK"),
    AD_SCORE((short)44, "adScore"),
    CAMPAIGN_ID_MK((short)45, "campaignIdMK"),
    ED_CONTENT((short)46, "edContent"),
    ED_STATUS((short)47, "edStatus"),
    LINE_ID_MK((short)48, "lineIdMK"),
    MATERIAL_MK((short)49, "materialMK"),
    LOG_TIME((short)50, "logTime"),
    LOG_LEVEL((short)51, "logLevel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_ID
          return AD_ID;
        case 2: // ADP_ID
          return ADP_ID;
        case 3: // AD_POS
          return AD_POS;
        case 4: // ADP_X
          return ADP_X;
        case 5: // ADP_Y
          return ADP_Y;
        case 6: // AD_TYPE
          return AD_TYPE;
        case 7: // BROWSER
          return BROWSER;
        case 8: // CLICK_X
          return CLICK_X;
        case 9: // CLICK_Y
          return CLICK_Y;
        case 10: // CONTENT_URL
          return CONTENT_URL;
        case 11: // EXT
          return EXT;
        case 12: // FREQ
          return FREQ;
        case 13: // GET_URL
          return GET_URL;
        case 14: // IMPRESSION_ID
          return IMPRESSION_ID;
        case 15: // LATENCY
          return LATENCY;
        case 16: // MONITOR_KEY
          return MONITOR_KEY;
        case 17: // OS
          return OS;
        case 18: // REFER
          return REFER;
        case 19: // REGION
          return REGION;
        case 20: // REQ_TYPE
          return REQ_TYPE;
        case 21: // RESOLUTION
          return RESOLUTION;
        case 22: // SUV
          return SUV;
        case 23: // TIMESTAMP
          return TIMESTAMP;
        case 24: // TURN
          return TURN;
        case 25: // USER_AGENT
          return USER_AGENT;
        case 26: // USER_IP
          return USER_IP;
        case 27: // YY_ID
          return YY_ID;
        case 28: // REPEAT
          return REPEAT;
        case 29: // SUPPORT_FLASH
          return SUPPORT_FLASH;
        case 30: // PAGE_ID
          return PAGE_ID;
        case 31: // STATUS_CODE
          return STATUS_CODE;
        case 32: // ADVERTISER_ID
          return ADVERTISER_ID;
        case 33: // BID_PRICE
          return BID_PRICE;
        case 34: // BID_TYPE
          return BID_TYPE;
        case 35: // BID_PRICE2
          return BID_PRICE2;
        case 36: // BID_TYPE2
          return BID_TYPE2;
        case 37: // JS_VERSION
          return JS_VERSION;
        case 38: // CTR
          return CTR;
        case 39: // CTR2
          return CTR2;
        case 40: // E_CPM
          return E_CPM;
        case 41: // E_CPM2
          return E_CPM2;
        case 42: // ADGROUP_MK
          return ADGROUP_MK;
        case 43: // ADVERTISER_ID_MK
          return ADVERTISER_ID_MK;
        case 44: // AD_SCORE
          return AD_SCORE;
        case 45: // CAMPAIGN_ID_MK
          return CAMPAIGN_ID_MK;
        case 46: // ED_CONTENT
          return ED_CONTENT;
        case 47: // ED_STATUS
          return ED_STATUS;
        case 48: // LINE_ID_MK
          return LINE_ID_MK;
        case 49: // MATERIAL_MK
          return MATERIAL_MK;
        case 50: // LOG_TIME
          return LOG_TIME;
        case 51: // LOG_LEVEL
          return LOG_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADPOS_ISSET_ID = 0;
  private static final int __ADPX_ISSET_ID = 1;
  private static final int __ADPY_ISSET_ID = 2;
  private static final int __CLICKX_ISSET_ID = 3;
  private static final int __CLICKY_ISSET_ID = 4;
  private static final int __FREQ_ISSET_ID = 5;
  private static final int __LATENCY_ISSET_ID = 6;
  private static final int __TIMESTAMP_ISSET_ID = 7;
  private static final int __REPEAT_ISSET_ID = 8;
  private static final int __STATUSCODE_ISSET_ID = 9;
  private static final int __BIDPRICE_ISSET_ID = 10;
  private static final int __BIDTYPE_ISSET_ID = 11;
  private static final int __BIDPRICE2_ISSET_ID = 12;
  private static final int __BIDTYPE2_ISSET_ID = 13;
  private static final int __CTR_ISSET_ID = 14;
  private static final int __CTR2_ISSET_ID = 15;
  private static final int __ECPM_ISSET_ID = 16;
  private static final int __ECPM2_ISSET_ID = 17;
  private BitSet __isset_bit_vector = new BitSet(18);
  private _Fields optionals[] = {_Fields.AD_ID,_Fields.ADP_ID,_Fields.AD_POS,_Fields.ADP_X,_Fields.ADP_Y,_Fields.AD_TYPE,_Fields.BROWSER,_Fields.CLICK_X,_Fields.CLICK_Y,_Fields.CONTENT_URL,_Fields.EXT,_Fields.FREQ,_Fields.GET_URL,_Fields.IMPRESSION_ID,_Fields.LATENCY,_Fields.MONITOR_KEY,_Fields.OS,_Fields.REFER,_Fields.REGION,_Fields.REQ_TYPE,_Fields.RESOLUTION,_Fields.SUV,_Fields.TIMESTAMP,_Fields.TURN,_Fields.USER_AGENT,_Fields.USER_IP,_Fields.YY_ID,_Fields.REPEAT,_Fields.SUPPORT_FLASH,_Fields.PAGE_ID,_Fields.STATUS_CODE,_Fields.ADVERTISER_ID,_Fields.BID_PRICE,_Fields.BID_TYPE,_Fields.BID_PRICE2,_Fields.BID_TYPE2,_Fields.JS_VERSION,_Fields.CTR,_Fields.CTR2,_Fields.E_CPM,_Fields.E_CPM2,_Fields.ADGROUP_MK,_Fields.ADVERTISER_ID_MK,_Fields.AD_SCORE,_Fields.CAMPAIGN_ID_MK,_Fields.ED_CONTENT,_Fields.ED_STATUS,_Fields.LINE_ID_MK,_Fields.MATERIAL_MK,_Fields.LOG_TIME,_Fields.LOG_LEVEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_ID, new org.apache.thrift.meta_data.FieldMetaData("adpId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_POS, new org.apache.thrift.meta_data.FieldMetaData("adPos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADP_X, new org.apache.thrift.meta_data.FieldMetaData("adpX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADP_Y, new org.apache.thrift.meta_data.FieldMetaData("adpY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("adType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROWSER, new org.apache.thrift.meta_data.FieldMetaData("browser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLICK_X, new org.apache.thrift.meta_data.FieldMetaData("clickX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_Y, new org.apache.thrift.meta_data.FieldMetaData("clickY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT_URL, new org.apache.thrift.meta_data.FieldMetaData("contentUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREQ, new org.apache.thrift.meta_data.FieldMetaData("freq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GET_URL, new org.apache.thrift.meta_data.FieldMetaData("getUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPRESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("impressionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LATENCY, new org.apache.thrift.meta_data.FieldMetaData("latency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONITOR_KEY, new org.apache.thrift.meta_data.FieldMetaData("monitorKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFER, new org.apache.thrift.meta_data.FieldMetaData("refer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reqType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("resolution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUV, new org.apache.thrift.meta_data.FieldMetaData("suv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TURN, new org.apache.thrift.meta_data.FieldMetaData("turn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("userIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YY_ID, new org.apache.thrift.meta_data.FieldMetaData("yyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPEAT, new org.apache.thrift.meta_data.FieldMetaData("repeat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPORT_FLASH, new org.apache.thrift.meta_data.FieldMetaData("supportFlash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("pageId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADVERTISER_ID, new org.apache.thrift.meta_data.FieldMetaData("advertiserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bidType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID_PRICE2, new org.apache.thrift.meta_data.FieldMetaData("bidPrice2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BID_TYPE2, new org.apache.thrift.meta_data.FieldMetaData("bidType2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jsVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CTR, new org.apache.thrift.meta_data.FieldMetaData("ctr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CTR2, new org.apache.thrift.meta_data.FieldMetaData("ctr2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.E_CPM, new org.apache.thrift.meta_data.FieldMetaData("eCPM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.E_CPM2, new org.apache.thrift.meta_data.FieldMetaData("eCPM2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADGROUP_MK, new org.apache.thrift.meta_data.FieldMetaData("adgroupMK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADVERTISER_ID_MK, new org.apache.thrift.meta_data.FieldMetaData("advertiserIdMK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_SCORE, new org.apache.thrift.meta_data.FieldMetaData("adScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMPAIGN_ID_MK, new org.apache.thrift.meta_data.FieldMetaData("campaignIdMK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ED_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("edContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ED_STATUS, new org.apache.thrift.meta_data.FieldMetaData("edStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_ID_MK, new org.apache.thrift.meta_data.FieldMetaData("lineIdMK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATERIAL_MK, new org.apache.thrift.meta_data.FieldMetaData("materialMK", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_TIME, new org.apache.thrift.meta_data.FieldMetaData("logTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("logLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CountinfoOperation.class, metaDataMap);
  }

  public CountinfoOperation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CountinfoOperation(CountinfoOperation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAdId()) {
      this.adId = other.adId;
    }
    if (other.isSetAdpId()) {
      this.adpId = other.adpId;
    }
    this.adPos = other.adPos;
    this.adpX = other.adpX;
    this.adpY = other.adpY;
    if (other.isSetAdType()) {
      this.adType = other.adType;
    }
    if (other.isSetBrowser()) {
      this.browser = other.browser;
    }
    this.clickX = other.clickX;
    this.clickY = other.clickY;
    if (other.isSetContentUrl()) {
      this.contentUrl = other.contentUrl;
    }
    if (other.isSetExt()) {
      this.ext = other.ext;
    }
    this.freq = other.freq;
    if (other.isSetGetUrl()) {
      this.getUrl = other.getUrl;
    }
    if (other.isSetImpressionId()) {
      this.impressionId = other.impressionId;
    }
    this.latency = other.latency;
    if (other.isSetMonitorKey()) {
      this.monitorKey = other.monitorKey;
    }
    if (other.isSetOs()) {
      this.os = other.os;
    }
    if (other.isSetRefer()) {
      this.refer = other.refer;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetReqType()) {
      this.reqType = other.reqType;
    }
    if (other.isSetResolution()) {
      this.resolution = other.resolution;
    }
    if (other.isSetSuv()) {
      this.suv = other.suv;
    }
    this.timestamp = other.timestamp;
    if (other.isSetTurn()) {
      this.turn = other.turn;
    }
    if (other.isSetUserAgent()) {
      this.userAgent = other.userAgent;
    }
    if (other.isSetUserIp()) {
      this.userIp = other.userIp;
    }
    if (other.isSetYyId()) {
      this.yyId = other.yyId;
    }
    this.repeat = other.repeat;
    if (other.isSetSupportFlash()) {
      this.supportFlash = other.supportFlash;
    }
    if (other.isSetPageId()) {
      this.pageId = other.pageId;
    }
    this.statusCode = other.statusCode;
    if (other.isSetAdvertiserId()) {
      this.advertiserId = other.advertiserId;
    }
    this.bidPrice = other.bidPrice;
    this.bidType = other.bidType;
    this.bidPrice2 = other.bidPrice2;
    this.bidType2 = other.bidType2;
    if (other.isSetJsVersion()) {
      this.jsVersion = other.jsVersion;
    }
    this.ctr = other.ctr;
    this.ctr2 = other.ctr2;
    this.eCPM = other.eCPM;
    this.eCPM2 = other.eCPM2;
    if (other.isSetAdgroupMK()) {
      this.adgroupMK = other.adgroupMK;
    }
    if (other.isSetAdvertiserIdMK()) {
      this.advertiserIdMK = other.advertiserIdMK;
    }
    if (other.isSetAdScore()) {
      this.adScore = other.adScore;
    }
    if (other.isSetCampaignIdMK()) {
      this.campaignIdMK = other.campaignIdMK;
    }
    if (other.isSetEdContent()) {
      this.edContent = other.edContent;
    }
    if (other.isSetEdStatus()) {
      this.edStatus = other.edStatus;
    }
    if (other.isSetLineIdMK()) {
      this.lineIdMK = other.lineIdMK;
    }
    if (other.isSetMaterialMK()) {
      this.materialMK = other.materialMK;
    }
    if (other.isSetLogTime()) {
      this.logTime = other.logTime;
    }
    if (other.isSetLogLevel()) {
      this.logLevel = other.logLevel;
    }
  }

  public CountinfoOperation deepCopy() {
    return new CountinfoOperation(this);
  }

  @Override
  public void clear() {
    this.adId = null;
    this.adpId = null;
    setAdPosIsSet(false);
    this.adPos = 0;
    setAdpXIsSet(false);
    this.adpX = 0;
    setAdpYIsSet(false);
    this.adpY = 0;
    this.adType = null;
    this.browser = null;
    setClickXIsSet(false);
    this.clickX = 0;
    setClickYIsSet(false);
    this.clickY = 0;
    this.contentUrl = null;
    this.ext = null;
    setFreqIsSet(false);
    this.freq = 0;
    this.getUrl = null;
    this.impressionId = null;
    setLatencyIsSet(false);
    this.latency = 0;
    this.monitorKey = null;
    this.os = null;
    this.refer = null;
    this.region = null;
    this.reqType = null;
    this.resolution = null;
    this.suv = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.turn = null;
    this.userAgent = null;
    this.userIp = null;
    this.yyId = null;
    setRepeatIsSet(false);
    this.repeat = 0;
    this.supportFlash = null;
    this.pageId = null;
    setStatusCodeIsSet(false);
    this.statusCode = 0;
    this.advertiserId = null;
    setBidPriceIsSet(false);
    this.bidPrice = 0.0;
    setBidTypeIsSet(false);
    this.bidType = 0;
    setBidPrice2IsSet(false);
    this.bidPrice2 = 0.0;
    setBidType2IsSet(false);
    this.bidType2 = 0;
    this.jsVersion = null;
    setCtrIsSet(false);
    this.ctr = 0.0;
    setCtr2IsSet(false);
    this.ctr2 = 0.0;
    setECPMIsSet(false);
    this.eCPM = 0.0;
    setECPM2IsSet(false);
    this.eCPM2 = 0.0;
    this.adgroupMK = null;
    this.advertiserIdMK = null;
    this.adScore = null;
    this.campaignIdMK = null;
    this.edContent = null;
    this.edStatus = null;
    this.lineIdMK = null;
    this.materialMK = null;
    this.logTime = null;
    this.logLevel = null;
  }

  public String getAdId() {
    return this.adId;
  }

  public CountinfoOperation setAdId(String adId) {
    this.adId = adId;
    return this;
  }

  public void unsetAdId() {
    this.adId = null;
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return this.adId != null;
  }

  public void setAdIdIsSet(boolean value) {
    if (!value) {
      this.adId = null;
    }
  }

  public String getAdpId() {
    return this.adpId;
  }

  public CountinfoOperation setAdpId(String adpId) {
    this.adpId = adpId;
    return this;
  }

  public void unsetAdpId() {
    this.adpId = null;
  }

  /** Returns true if field adpId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpId() {
    return this.adpId != null;
  }

  public void setAdpIdIsSet(boolean value) {
    if (!value) {
      this.adpId = null;
    }
  }

  public int getAdPos() {
    return this.adPos;
  }

  public CountinfoOperation setAdPos(int adPos) {
    this.adPos = adPos;
    setAdPosIsSet(true);
    return this;
  }

  public void unsetAdPos() {
    __isset_bit_vector.clear(__ADPOS_ISSET_ID);
  }

  /** Returns true if field adPos is set (has been assigned a value) and false otherwise */
  public boolean isSetAdPos() {
    return __isset_bit_vector.get(__ADPOS_ISSET_ID);
  }

  public void setAdPosIsSet(boolean value) {
    __isset_bit_vector.set(__ADPOS_ISSET_ID, value);
  }

  public int getAdpX() {
    return this.adpX;
  }

  public CountinfoOperation setAdpX(int adpX) {
    this.adpX = adpX;
    setAdpXIsSet(true);
    return this;
  }

  public void unsetAdpX() {
    __isset_bit_vector.clear(__ADPX_ISSET_ID);
  }

  /** Returns true if field adpX is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpX() {
    return __isset_bit_vector.get(__ADPX_ISSET_ID);
  }

  public void setAdpXIsSet(boolean value) {
    __isset_bit_vector.set(__ADPX_ISSET_ID, value);
  }

  public int getAdpY() {
    return this.adpY;
  }

  public CountinfoOperation setAdpY(int adpY) {
    this.adpY = adpY;
    setAdpYIsSet(true);
    return this;
  }

  public void unsetAdpY() {
    __isset_bit_vector.clear(__ADPY_ISSET_ID);
  }

  /** Returns true if field adpY is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpY() {
    return __isset_bit_vector.get(__ADPY_ISSET_ID);
  }

  public void setAdpYIsSet(boolean value) {
    __isset_bit_vector.set(__ADPY_ISSET_ID, value);
  }

  public String getAdType() {
    return this.adType;
  }

  public CountinfoOperation setAdType(String adType) {
    this.adType = adType;
    return this;
  }

  public void unsetAdType() {
    this.adType = null;
  }

  /** Returns true if field adType is set (has been assigned a value) and false otherwise */
  public boolean isSetAdType() {
    return this.adType != null;
  }

  public void setAdTypeIsSet(boolean value) {
    if (!value) {
      this.adType = null;
    }
  }

  public String getBrowser() {
    return this.browser;
  }

  public CountinfoOperation setBrowser(String browser) {
    this.browser = browser;
    return this;
  }

  public void unsetBrowser() {
    this.browser = null;
  }

  /** Returns true if field browser is set (has been assigned a value) and false otherwise */
  public boolean isSetBrowser() {
    return this.browser != null;
  }

  public void setBrowserIsSet(boolean value) {
    if (!value) {
      this.browser = null;
    }
  }

  public int getClickX() {
    return this.clickX;
  }

  public CountinfoOperation setClickX(int clickX) {
    this.clickX = clickX;
    setClickXIsSet(true);
    return this;
  }

  public void unsetClickX() {
    __isset_bit_vector.clear(__CLICKX_ISSET_ID);
  }

  /** Returns true if field clickX is set (has been assigned a value) and false otherwise */
  public boolean isSetClickX() {
    return __isset_bit_vector.get(__CLICKX_ISSET_ID);
  }

  public void setClickXIsSet(boolean value) {
    __isset_bit_vector.set(__CLICKX_ISSET_ID, value);
  }

  public int getClickY() {
    return this.clickY;
  }

  public CountinfoOperation setClickY(int clickY) {
    this.clickY = clickY;
    setClickYIsSet(true);
    return this;
  }

  public void unsetClickY() {
    __isset_bit_vector.clear(__CLICKY_ISSET_ID);
  }

  /** Returns true if field clickY is set (has been assigned a value) and false otherwise */
  public boolean isSetClickY() {
    return __isset_bit_vector.get(__CLICKY_ISSET_ID);
  }

  public void setClickYIsSet(boolean value) {
    __isset_bit_vector.set(__CLICKY_ISSET_ID, value);
  }

  public String getContentUrl() {
    return this.contentUrl;
  }

  public CountinfoOperation setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  public void unsetContentUrl() {
    this.contentUrl = null;
  }

  /** Returns true if field contentUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetContentUrl() {
    return this.contentUrl != null;
  }

  public void setContentUrlIsSet(boolean value) {
    if (!value) {
      this.contentUrl = null;
    }
  }

  public String getExt() {
    return this.ext;
  }

  public CountinfoOperation setExt(String ext) {
    this.ext = ext;
    return this;
  }

  public void unsetExt() {
    this.ext = null;
  }

  /** Returns true if field ext is set (has been assigned a value) and false otherwise */
  public boolean isSetExt() {
    return this.ext != null;
  }

  public void setExtIsSet(boolean value) {
    if (!value) {
      this.ext = null;
    }
  }

  public int getFreq() {
    return this.freq;
  }

  public CountinfoOperation setFreq(int freq) {
    this.freq = freq;
    setFreqIsSet(true);
    return this;
  }

  public void unsetFreq() {
    __isset_bit_vector.clear(__FREQ_ISSET_ID);
  }

  /** Returns true if field freq is set (has been assigned a value) and false otherwise */
  public boolean isSetFreq() {
    return __isset_bit_vector.get(__FREQ_ISSET_ID);
  }

  public void setFreqIsSet(boolean value) {
    __isset_bit_vector.set(__FREQ_ISSET_ID, value);
  }

  public String getGetUrl() {
    return this.getUrl;
  }

  public CountinfoOperation setGetUrl(String getUrl) {
    this.getUrl = getUrl;
    return this;
  }

  public void unsetGetUrl() {
    this.getUrl = null;
  }

  /** Returns true if field getUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetGetUrl() {
    return this.getUrl != null;
  }

  public void setGetUrlIsSet(boolean value) {
    if (!value) {
      this.getUrl = null;
    }
  }

  public String getImpressionId() {
    return this.impressionId;
  }

  public CountinfoOperation setImpressionId(String impressionId) {
    this.impressionId = impressionId;
    return this;
  }

  public void unsetImpressionId() {
    this.impressionId = null;
  }

  /** Returns true if field impressionId is set (has been assigned a value) and false otherwise */
  public boolean isSetImpressionId() {
    return this.impressionId != null;
  }

  public void setImpressionIdIsSet(boolean value) {
    if (!value) {
      this.impressionId = null;
    }
  }

  public long getLatency() {
    return this.latency;
  }

  public CountinfoOperation setLatency(long latency) {
    this.latency = latency;
    setLatencyIsSet(true);
    return this;
  }

  public void unsetLatency() {
    __isset_bit_vector.clear(__LATENCY_ISSET_ID);
  }

  /** Returns true if field latency is set (has been assigned a value) and false otherwise */
  public boolean isSetLatency() {
    return __isset_bit_vector.get(__LATENCY_ISSET_ID);
  }

  public void setLatencyIsSet(boolean value) {
    __isset_bit_vector.set(__LATENCY_ISSET_ID, value);
  }

  public String getMonitorKey() {
    return this.monitorKey;
  }

  public CountinfoOperation setMonitorKey(String monitorKey) {
    this.monitorKey = monitorKey;
    return this;
  }

  public void unsetMonitorKey() {
    this.monitorKey = null;
  }

  /** Returns true if field monitorKey is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorKey() {
    return this.monitorKey != null;
  }

  public void setMonitorKeyIsSet(boolean value) {
    if (!value) {
      this.monitorKey = null;
    }
  }

  public String getOs() {
    return this.os;
  }

  public CountinfoOperation setOs(String os) {
    this.os = os;
    return this;
  }

  public void unsetOs() {
    this.os = null;
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return this.os != null;
  }

  public void setOsIsSet(boolean value) {
    if (!value) {
      this.os = null;
    }
  }

  public String getRefer() {
    return this.refer;
  }

  public CountinfoOperation setRefer(String refer) {
    this.refer = refer;
    return this;
  }

  public void unsetRefer() {
    this.refer = null;
  }

  /** Returns true if field refer is set (has been assigned a value) and false otherwise */
  public boolean isSetRefer() {
    return this.refer != null;
  }

  public void setReferIsSet(boolean value) {
    if (!value) {
      this.refer = null;
    }
  }

  public String getRegion() {
    return this.region;
  }

  public CountinfoOperation setRegion(String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public String getReqType() {
    return this.reqType;
  }

  public CountinfoOperation setReqType(String reqType) {
    this.reqType = reqType;
    return this;
  }

  public void unsetReqType() {
    this.reqType = null;
  }

  /** Returns true if field reqType is set (has been assigned a value) and false otherwise */
  public boolean isSetReqType() {
    return this.reqType != null;
  }

  public void setReqTypeIsSet(boolean value) {
    if (!value) {
      this.reqType = null;
    }
  }

  public String getResolution() {
    return this.resolution;
  }

  public CountinfoOperation setResolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  public void unsetResolution() {
    this.resolution = null;
  }

  /** Returns true if field resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetResolution() {
    return this.resolution != null;
  }

  public void setResolutionIsSet(boolean value) {
    if (!value) {
      this.resolution = null;
    }
  }

  public String getSuv() {
    return this.suv;
  }

  public CountinfoOperation setSuv(String suv) {
    this.suv = suv;
    return this;
  }

  public void unsetSuv() {
    this.suv = null;
  }

  /** Returns true if field suv is set (has been assigned a value) and false otherwise */
  public boolean isSetSuv() {
    return this.suv != null;
  }

  public void setSuvIsSet(boolean value) {
    if (!value) {
      this.suv = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public CountinfoOperation setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getTurn() {
    return this.turn;
  }

  public CountinfoOperation setTurn(String turn) {
    this.turn = turn;
    return this;
  }

  public void unsetTurn() {
    this.turn = null;
  }

  /** Returns true if field turn is set (has been assigned a value) and false otherwise */
  public boolean isSetTurn() {
    return this.turn != null;
  }

  public void setTurnIsSet(boolean value) {
    if (!value) {
      this.turn = null;
    }
  }

  public String getUserAgent() {
    return this.userAgent;
  }

  public CountinfoOperation setUserAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  public void unsetUserAgent() {
    this.userAgent = null;
  }

  /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgent() {
    return this.userAgent != null;
  }

  public void setUserAgentIsSet(boolean value) {
    if (!value) {
      this.userAgent = null;
    }
  }

  public String getUserIp() {
    return this.userIp;
  }

  public CountinfoOperation setUserIp(String userIp) {
    this.userIp = userIp;
    return this;
  }

  public void unsetUserIp() {
    this.userIp = null;
  }

  /** Returns true if field userIp is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIp() {
    return this.userIp != null;
  }

  public void setUserIpIsSet(boolean value) {
    if (!value) {
      this.userIp = null;
    }
  }

  public String getYyId() {
    return this.yyId;
  }

  public CountinfoOperation setYyId(String yyId) {
    this.yyId = yyId;
    return this;
  }

  public void unsetYyId() {
    this.yyId = null;
  }

  /** Returns true if field yyId is set (has been assigned a value) and false otherwise */
  public boolean isSetYyId() {
    return this.yyId != null;
  }

  public void setYyIdIsSet(boolean value) {
    if (!value) {
      this.yyId = null;
    }
  }

  public int getRepeat() {
    return this.repeat;
  }

  public CountinfoOperation setRepeat(int repeat) {
    this.repeat = repeat;
    setRepeatIsSet(true);
    return this;
  }

  public void unsetRepeat() {
    __isset_bit_vector.clear(__REPEAT_ISSET_ID);
  }

  /** Returns true if field repeat is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat() {
    return __isset_bit_vector.get(__REPEAT_ISSET_ID);
  }

  public void setRepeatIsSet(boolean value) {
    __isset_bit_vector.set(__REPEAT_ISSET_ID, value);
  }

  public String getSupportFlash() {
    return this.supportFlash;
  }

  public CountinfoOperation setSupportFlash(String supportFlash) {
    this.supportFlash = supportFlash;
    return this;
  }

  public void unsetSupportFlash() {
    this.supportFlash = null;
  }

  /** Returns true if field supportFlash is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportFlash() {
    return this.supportFlash != null;
  }

  public void setSupportFlashIsSet(boolean value) {
    if (!value) {
      this.supportFlash = null;
    }
  }

  public String getPageId() {
    return this.pageId;
  }

  public CountinfoOperation setPageId(String pageId) {
    this.pageId = pageId;
    return this;
  }

  public void unsetPageId() {
    this.pageId = null;
  }

  /** Returns true if field pageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPageId() {
    return this.pageId != null;
  }

  public void setPageIdIsSet(boolean value) {
    if (!value) {
      this.pageId = null;
    }
  }

  public long getStatusCode() {
    return this.statusCode;
  }

  public CountinfoOperation setStatusCode(long statusCode) {
    this.statusCode = statusCode;
    setStatusCodeIsSet(true);
    return this;
  }

  public void unsetStatusCode() {
    __isset_bit_vector.clear(__STATUSCODE_ISSET_ID);
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return __isset_bit_vector.get(__STATUSCODE_ISSET_ID);
  }

  public void setStatusCodeIsSet(boolean value) {
    __isset_bit_vector.set(__STATUSCODE_ISSET_ID, value);
  }

  public String getAdvertiserId() {
    return this.advertiserId;
  }

  public CountinfoOperation setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  public void unsetAdvertiserId() {
    this.advertiserId = null;
  }

  /** Returns true if field advertiserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvertiserId() {
    return this.advertiserId != null;
  }

  public void setAdvertiserIdIsSet(boolean value) {
    if (!value) {
      this.advertiserId = null;
    }
  }

  public double getBidPrice() {
    return this.bidPrice;
  }

  public CountinfoOperation setBidPrice(double bidPrice) {
    this.bidPrice = bidPrice;
    setBidPriceIsSet(true);
    return this;
  }

  public void unsetBidPrice() {
    __isset_bit_vector.clear(__BIDPRICE_ISSET_ID);
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return __isset_bit_vector.get(__BIDPRICE_ISSET_ID);
  }

  public void setBidPriceIsSet(boolean value) {
    __isset_bit_vector.set(__BIDPRICE_ISSET_ID, value);
  }

  public int getBidType() {
    return this.bidType;
  }

  public CountinfoOperation setBidType(int bidType) {
    this.bidType = bidType;
    setBidTypeIsSet(true);
    return this;
  }

  public void unsetBidType() {
    __isset_bit_vector.clear(__BIDTYPE_ISSET_ID);
  }

  /** Returns true if field bidType is set (has been assigned a value) and false otherwise */
  public boolean isSetBidType() {
    return __isset_bit_vector.get(__BIDTYPE_ISSET_ID);
  }

  public void setBidTypeIsSet(boolean value) {
    __isset_bit_vector.set(__BIDTYPE_ISSET_ID, value);
  }

  public double getBidPrice2() {
    return this.bidPrice2;
  }

  public CountinfoOperation setBidPrice2(double bidPrice2) {
    this.bidPrice2 = bidPrice2;
    setBidPrice2IsSet(true);
    return this;
  }

  public void unsetBidPrice2() {
    __isset_bit_vector.clear(__BIDPRICE2_ISSET_ID);
  }

  /** Returns true if field bidPrice2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice2() {
    return __isset_bit_vector.get(__BIDPRICE2_ISSET_ID);
  }

  public void setBidPrice2IsSet(boolean value) {
    __isset_bit_vector.set(__BIDPRICE2_ISSET_ID, value);
  }

  public int getBidType2() {
    return this.bidType2;
  }

  public CountinfoOperation setBidType2(int bidType2) {
    this.bidType2 = bidType2;
    setBidType2IsSet(true);
    return this;
  }

  public void unsetBidType2() {
    __isset_bit_vector.clear(__BIDTYPE2_ISSET_ID);
  }

  /** Returns true if field bidType2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBidType2() {
    return __isset_bit_vector.get(__BIDTYPE2_ISSET_ID);
  }

  public void setBidType2IsSet(boolean value) {
    __isset_bit_vector.set(__BIDTYPE2_ISSET_ID, value);
  }

  public String getJsVersion() {
    return this.jsVersion;
  }

  public CountinfoOperation setJsVersion(String jsVersion) {
    this.jsVersion = jsVersion;
    return this;
  }

  public void unsetJsVersion() {
    this.jsVersion = null;
  }

  /** Returns true if field jsVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJsVersion() {
    return this.jsVersion != null;
  }

  public void setJsVersionIsSet(boolean value) {
    if (!value) {
      this.jsVersion = null;
    }
  }

  public double getCtr() {
    return this.ctr;
  }

  public CountinfoOperation setCtr(double ctr) {
    this.ctr = ctr;
    setCtrIsSet(true);
    return this;
  }

  public void unsetCtr() {
    __isset_bit_vector.clear(__CTR_ISSET_ID);
  }

  /** Returns true if field ctr is set (has been assigned a value) and false otherwise */
  public boolean isSetCtr() {
    return __isset_bit_vector.get(__CTR_ISSET_ID);
  }

  public void setCtrIsSet(boolean value) {
    __isset_bit_vector.set(__CTR_ISSET_ID, value);
  }

  public double getCtr2() {
    return this.ctr2;
  }

  public CountinfoOperation setCtr2(double ctr2) {
    this.ctr2 = ctr2;
    setCtr2IsSet(true);
    return this;
  }

  public void unsetCtr2() {
    __isset_bit_vector.clear(__CTR2_ISSET_ID);
  }

  /** Returns true if field ctr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCtr2() {
    return __isset_bit_vector.get(__CTR2_ISSET_ID);
  }

  public void setCtr2IsSet(boolean value) {
    __isset_bit_vector.set(__CTR2_ISSET_ID, value);
  }

  public double getECPM() {
    return this.eCPM;
  }

  public CountinfoOperation setECPM(double eCPM) {
    this.eCPM = eCPM;
    setECPMIsSet(true);
    return this;
  }

  public void unsetECPM() {
    __isset_bit_vector.clear(__ECPM_ISSET_ID);
  }

  /** Returns true if field eCPM is set (has been assigned a value) and false otherwise */
  public boolean isSetECPM() {
    return __isset_bit_vector.get(__ECPM_ISSET_ID);
  }

  public void setECPMIsSet(boolean value) {
    __isset_bit_vector.set(__ECPM_ISSET_ID, value);
  }

  public double getECPM2() {
    return this.eCPM2;
  }

  public CountinfoOperation setECPM2(double eCPM2) {
    this.eCPM2 = eCPM2;
    setECPM2IsSet(true);
    return this;
  }

  public void unsetECPM2() {
    __isset_bit_vector.clear(__ECPM2_ISSET_ID);
  }

  /** Returns true if field eCPM2 is set (has been assigned a value) and false otherwise */
  public boolean isSetECPM2() {
    return __isset_bit_vector.get(__ECPM2_ISSET_ID);
  }

  public void setECPM2IsSet(boolean value) {
    __isset_bit_vector.set(__ECPM2_ISSET_ID, value);
  }

  public String getAdgroupMK() {
    return this.adgroupMK;
  }

  public CountinfoOperation setAdgroupMK(String adgroupMK) {
    this.adgroupMK = adgroupMK;
    return this;
  }

  public void unsetAdgroupMK() {
    this.adgroupMK = null;
  }

  /** Returns true if field adgroupMK is set (has been assigned a value) and false otherwise */
  public boolean isSetAdgroupMK() {
    return this.adgroupMK != null;
  }

  public void setAdgroupMKIsSet(boolean value) {
    if (!value) {
      this.adgroupMK = null;
    }
  }

  public String getAdvertiserIdMK() {
    return this.advertiserIdMK;
  }

  public CountinfoOperation setAdvertiserIdMK(String advertiserIdMK) {
    this.advertiserIdMK = advertiserIdMK;
    return this;
  }

  public void unsetAdvertiserIdMK() {
    this.advertiserIdMK = null;
  }

  /** Returns true if field advertiserIdMK is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvertiserIdMK() {
    return this.advertiserIdMK != null;
  }

  public void setAdvertiserIdMKIsSet(boolean value) {
    if (!value) {
      this.advertiserIdMK = null;
    }
  }

  public String getAdScore() {
    return this.adScore;
  }

  public CountinfoOperation setAdScore(String adScore) {
    this.adScore = adScore;
    return this;
  }

  public void unsetAdScore() {
    this.adScore = null;
  }

  /** Returns true if field adScore is set (has been assigned a value) and false otherwise */
  public boolean isSetAdScore() {
    return this.adScore != null;
  }

  public void setAdScoreIsSet(boolean value) {
    if (!value) {
      this.adScore = null;
    }
  }

  public String getCampaignIdMK() {
    return this.campaignIdMK;
  }

  public CountinfoOperation setCampaignIdMK(String campaignIdMK) {
    this.campaignIdMK = campaignIdMK;
    return this;
  }

  public void unsetCampaignIdMK() {
    this.campaignIdMK = null;
  }

  /** Returns true if field campaignIdMK is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignIdMK() {
    return this.campaignIdMK != null;
  }

  public void setCampaignIdMKIsSet(boolean value) {
    if (!value) {
      this.campaignIdMK = null;
    }
  }

  public String getEdContent() {
    return this.edContent;
  }

  public CountinfoOperation setEdContent(String edContent) {
    this.edContent = edContent;
    return this;
  }

  public void unsetEdContent() {
    this.edContent = null;
  }

  /** Returns true if field edContent is set (has been assigned a value) and false otherwise */
  public boolean isSetEdContent() {
    return this.edContent != null;
  }

  public void setEdContentIsSet(boolean value) {
    if (!value) {
      this.edContent = null;
    }
  }

  public String getEdStatus() {
    return this.edStatus;
  }

  public CountinfoOperation setEdStatus(String edStatus) {
    this.edStatus = edStatus;
    return this;
  }

  public void unsetEdStatus() {
    this.edStatus = null;
  }

  /** Returns true if field edStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEdStatus() {
    return this.edStatus != null;
  }

  public void setEdStatusIsSet(boolean value) {
    if (!value) {
      this.edStatus = null;
    }
  }

  public String getLineIdMK() {
    return this.lineIdMK;
  }

  public CountinfoOperation setLineIdMK(String lineIdMK) {
    this.lineIdMK = lineIdMK;
    return this;
  }

  public void unsetLineIdMK() {
    this.lineIdMK = null;
  }

  /** Returns true if field lineIdMK is set (has been assigned a value) and false otherwise */
  public boolean isSetLineIdMK() {
    return this.lineIdMK != null;
  }

  public void setLineIdMKIsSet(boolean value) {
    if (!value) {
      this.lineIdMK = null;
    }
  }

  public String getMaterialMK() {
    return this.materialMK;
  }

  public CountinfoOperation setMaterialMK(String materialMK) {
    this.materialMK = materialMK;
    return this;
  }

  public void unsetMaterialMK() {
    this.materialMK = null;
  }

  /** Returns true if field materialMK is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterialMK() {
    return this.materialMK != null;
  }

  public void setMaterialMKIsSet(boolean value) {
    if (!value) {
      this.materialMK = null;
    }
  }

  public String getLogTime() {
    return this.logTime;
  }

  public CountinfoOperation setLogTime(String logTime) {
    this.logTime = logTime;
    return this;
  }

  public void unsetLogTime() {
    this.logTime = null;
  }

  /** Returns true if field logTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLogTime() {
    return this.logTime != null;
  }

  public void setLogTimeIsSet(boolean value) {
    if (!value) {
      this.logTime = null;
    }
  }

  public String getLogLevel() {
    return this.logLevel;
  }

  public CountinfoOperation setLogLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  public void unsetLogLevel() {
    this.logLevel = null;
  }

  /** Returns true if field logLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetLogLevel() {
    return this.logLevel != null;
  }

  public void setLogLevelIsSet(boolean value) {
    if (!value) {
      this.logLevel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((String)value);
      }
      break;

    case ADP_ID:
      if (value == null) {
        unsetAdpId();
      } else {
        setAdpId((String)value);
      }
      break;

    case AD_POS:
      if (value == null) {
        unsetAdPos();
      } else {
        setAdPos((Integer)value);
      }
      break;

    case ADP_X:
      if (value == null) {
        unsetAdpX();
      } else {
        setAdpX((Integer)value);
      }
      break;

    case ADP_Y:
      if (value == null) {
        unsetAdpY();
      } else {
        setAdpY((Integer)value);
      }
      break;

    case AD_TYPE:
      if (value == null) {
        unsetAdType();
      } else {
        setAdType((String)value);
      }
      break;

    case BROWSER:
      if (value == null) {
        unsetBrowser();
      } else {
        setBrowser((String)value);
      }
      break;

    case CLICK_X:
      if (value == null) {
        unsetClickX();
      } else {
        setClickX((Integer)value);
      }
      break;

    case CLICK_Y:
      if (value == null) {
        unsetClickY();
      } else {
        setClickY((Integer)value);
      }
      break;

    case CONTENT_URL:
      if (value == null) {
        unsetContentUrl();
      } else {
        setContentUrl((String)value);
      }
      break;

    case EXT:
      if (value == null) {
        unsetExt();
      } else {
        setExt((String)value);
      }
      break;

    case FREQ:
      if (value == null) {
        unsetFreq();
      } else {
        setFreq((Integer)value);
      }
      break;

    case GET_URL:
      if (value == null) {
        unsetGetUrl();
      } else {
        setGetUrl((String)value);
      }
      break;

    case IMPRESSION_ID:
      if (value == null) {
        unsetImpressionId();
      } else {
        setImpressionId((String)value);
      }
      break;

    case LATENCY:
      if (value == null) {
        unsetLatency();
      } else {
        setLatency((Long)value);
      }
      break;

    case MONITOR_KEY:
      if (value == null) {
        unsetMonitorKey();
      } else {
        setMonitorKey((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((String)value);
      }
      break;

    case REFER:
      if (value == null) {
        unsetRefer();
      } else {
        setRefer((String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((String)value);
      }
      break;

    case REQ_TYPE:
      if (value == null) {
        unsetReqType();
      } else {
        setReqType((String)value);
      }
      break;

    case RESOLUTION:
      if (value == null) {
        unsetResolution();
      } else {
        setResolution((String)value);
      }
      break;

    case SUV:
      if (value == null) {
        unsetSuv();
      } else {
        setSuv((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case TURN:
      if (value == null) {
        unsetTurn();
      } else {
        setTurn((String)value);
      }
      break;

    case USER_AGENT:
      if (value == null) {
        unsetUserAgent();
      } else {
        setUserAgent((String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIp();
      } else {
        setUserIp((String)value);
      }
      break;

    case YY_ID:
      if (value == null) {
        unsetYyId();
      } else {
        setYyId((String)value);
      }
      break;

    case REPEAT:
      if (value == null) {
        unsetRepeat();
      } else {
        setRepeat((Integer)value);
      }
      break;

    case SUPPORT_FLASH:
      if (value == null) {
        unsetSupportFlash();
      } else {
        setSupportFlash((String)value);
      }
      break;

    case PAGE_ID:
      if (value == null) {
        unsetPageId();
      } else {
        setPageId((String)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((Long)value);
      }
      break;

    case ADVERTISER_ID:
      if (value == null) {
        unsetAdvertiserId();
      } else {
        setAdvertiserId((String)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((Double)value);
      }
      break;

    case BID_TYPE:
      if (value == null) {
        unsetBidType();
      } else {
        setBidType((Integer)value);
      }
      break;

    case BID_PRICE2:
      if (value == null) {
        unsetBidPrice2();
      } else {
        setBidPrice2((Double)value);
      }
      break;

    case BID_TYPE2:
      if (value == null) {
        unsetBidType2();
      } else {
        setBidType2((Integer)value);
      }
      break;

    case JS_VERSION:
      if (value == null) {
        unsetJsVersion();
      } else {
        setJsVersion((String)value);
      }
      break;

    case CTR:
      if (value == null) {
        unsetCtr();
      } else {
        setCtr((Double)value);
      }
      break;

    case CTR2:
      if (value == null) {
        unsetCtr2();
      } else {
        setCtr2((Double)value);
      }
      break;

    case E_CPM:
      if (value == null) {
        unsetECPM();
      } else {
        setECPM((Double)value);
      }
      break;

    case E_CPM2:
      if (value == null) {
        unsetECPM2();
      } else {
        setECPM2((Double)value);
      }
      break;

    case ADGROUP_MK:
      if (value == null) {
        unsetAdgroupMK();
      } else {
        setAdgroupMK((String)value);
      }
      break;

    case ADVERTISER_ID_MK:
      if (value == null) {
        unsetAdvertiserIdMK();
      } else {
        setAdvertiserIdMK((String)value);
      }
      break;

    case AD_SCORE:
      if (value == null) {
        unsetAdScore();
      } else {
        setAdScore((String)value);
      }
      break;

    case CAMPAIGN_ID_MK:
      if (value == null) {
        unsetCampaignIdMK();
      } else {
        setCampaignIdMK((String)value);
      }
      break;

    case ED_CONTENT:
      if (value == null) {
        unsetEdContent();
      } else {
        setEdContent((String)value);
      }
      break;

    case ED_STATUS:
      if (value == null) {
        unsetEdStatus();
      } else {
        setEdStatus((String)value);
      }
      break;

    case LINE_ID_MK:
      if (value == null) {
        unsetLineIdMK();
      } else {
        setLineIdMK((String)value);
      }
      break;

    case MATERIAL_MK:
      if (value == null) {
        unsetMaterialMK();
      } else {
        setMaterialMK((String)value);
      }
      break;

    case LOG_TIME:
      if (value == null) {
        unsetLogTime();
      } else {
        setLogTime((String)value);
      }
      break;

    case LOG_LEVEL:
      if (value == null) {
        unsetLogLevel();
      } else {
        setLogLevel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_ID:
      return getAdId();

    case ADP_ID:
      return getAdpId();

    case AD_POS:
      return Integer.valueOf(getAdPos());

    case ADP_X:
      return Integer.valueOf(getAdpX());

    case ADP_Y:
      return Integer.valueOf(getAdpY());

    case AD_TYPE:
      return getAdType();

    case BROWSER:
      return getBrowser();

    case CLICK_X:
      return Integer.valueOf(getClickX());

    case CLICK_Y:
      return Integer.valueOf(getClickY());

    case CONTENT_URL:
      return getContentUrl();

    case EXT:
      return getExt();

    case FREQ:
      return Integer.valueOf(getFreq());

    case GET_URL:
      return getGetUrl();

    case IMPRESSION_ID:
      return getImpressionId();

    case LATENCY:
      return Long.valueOf(getLatency());

    case MONITOR_KEY:
      return getMonitorKey();

    case OS:
      return getOs();

    case REFER:
      return getRefer();

    case REGION:
      return getRegion();

    case REQ_TYPE:
      return getReqType();

    case RESOLUTION:
      return getResolution();

    case SUV:
      return getSuv();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case TURN:
      return getTurn();

    case USER_AGENT:
      return getUserAgent();

    case USER_IP:
      return getUserIp();

    case YY_ID:
      return getYyId();

    case REPEAT:
      return Integer.valueOf(getRepeat());

    case SUPPORT_FLASH:
      return getSupportFlash();

    case PAGE_ID:
      return getPageId();

    case STATUS_CODE:
      return Long.valueOf(getStatusCode());

    case ADVERTISER_ID:
      return getAdvertiserId();

    case BID_PRICE:
      return Double.valueOf(getBidPrice());

    case BID_TYPE:
      return Integer.valueOf(getBidType());

    case BID_PRICE2:
      return Double.valueOf(getBidPrice2());

    case BID_TYPE2:
      return Integer.valueOf(getBidType2());

    case JS_VERSION:
      return getJsVersion();

    case CTR:
      return Double.valueOf(getCtr());

    case CTR2:
      return Double.valueOf(getCtr2());

    case E_CPM:
      return Double.valueOf(getECPM());

    case E_CPM2:
      return Double.valueOf(getECPM2());

    case ADGROUP_MK:
      return getAdgroupMK();

    case ADVERTISER_ID_MK:
      return getAdvertiserIdMK();

    case AD_SCORE:
      return getAdScore();

    case CAMPAIGN_ID_MK:
      return getCampaignIdMK();

    case ED_CONTENT:
      return getEdContent();

    case ED_STATUS:
      return getEdStatus();

    case LINE_ID_MK:
      return getLineIdMK();

    case MATERIAL_MK:
      return getMaterialMK();

    case LOG_TIME:
      return getLogTime();

    case LOG_LEVEL:
      return getLogLevel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_ID:
      return isSetAdId();
    case ADP_ID:
      return isSetAdpId();
    case AD_POS:
      return isSetAdPos();
    case ADP_X:
      return isSetAdpX();
    case ADP_Y:
      return isSetAdpY();
    case AD_TYPE:
      return isSetAdType();
    case BROWSER:
      return isSetBrowser();
    case CLICK_X:
      return isSetClickX();
    case CLICK_Y:
      return isSetClickY();
    case CONTENT_URL:
      return isSetContentUrl();
    case EXT:
      return isSetExt();
    case FREQ:
      return isSetFreq();
    case GET_URL:
      return isSetGetUrl();
    case IMPRESSION_ID:
      return isSetImpressionId();
    case LATENCY:
      return isSetLatency();
    case MONITOR_KEY:
      return isSetMonitorKey();
    case OS:
      return isSetOs();
    case REFER:
      return isSetRefer();
    case REGION:
      return isSetRegion();
    case REQ_TYPE:
      return isSetReqType();
    case RESOLUTION:
      return isSetResolution();
    case SUV:
      return isSetSuv();
    case TIMESTAMP:
      return isSetTimestamp();
    case TURN:
      return isSetTurn();
    case USER_AGENT:
      return isSetUserAgent();
    case USER_IP:
      return isSetUserIp();
    case YY_ID:
      return isSetYyId();
    case REPEAT:
      return isSetRepeat();
    case SUPPORT_FLASH:
      return isSetSupportFlash();
    case PAGE_ID:
      return isSetPageId();
    case STATUS_CODE:
      return isSetStatusCode();
    case ADVERTISER_ID:
      return isSetAdvertiserId();
    case BID_PRICE:
      return isSetBidPrice();
    case BID_TYPE:
      return isSetBidType();
    case BID_PRICE2:
      return isSetBidPrice2();
    case BID_TYPE2:
      return isSetBidType2();
    case JS_VERSION:
      return isSetJsVersion();
    case CTR:
      return isSetCtr();
    case CTR2:
      return isSetCtr2();
    case E_CPM:
      return isSetECPM();
    case E_CPM2:
      return isSetECPM2();
    case ADGROUP_MK:
      return isSetAdgroupMK();
    case ADVERTISER_ID_MK:
      return isSetAdvertiserIdMK();
    case AD_SCORE:
      return isSetAdScore();
    case CAMPAIGN_ID_MK:
      return isSetCampaignIdMK();
    case ED_CONTENT:
      return isSetEdContent();
    case ED_STATUS:
      return isSetEdStatus();
    case LINE_ID_MK:
      return isSetLineIdMK();
    case MATERIAL_MK:
      return isSetMaterialMK();
    case LOG_TIME:
      return isSetLogTime();
    case LOG_LEVEL:
      return isSetLogLevel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CountinfoOperation)
      return this.equals((CountinfoOperation)that);
    return false;
  }

  public boolean equals(CountinfoOperation that) {
    if (that == null)
      return false;

    boolean this_present_adId = true && this.isSetAdId();
    boolean that_present_adId = true && that.isSetAdId();
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (!this.adId.equals(that.adId))
        return false;
    }

    boolean this_present_adpId = true && this.isSetAdpId();
    boolean that_present_adpId = true && that.isSetAdpId();
    if (this_present_adpId || that_present_adpId) {
      if (!(this_present_adpId && that_present_adpId))
        return false;
      if (!this.adpId.equals(that.adpId))
        return false;
    }

    boolean this_present_adPos = true && this.isSetAdPos();
    boolean that_present_adPos = true && that.isSetAdPos();
    if (this_present_adPos || that_present_adPos) {
      if (!(this_present_adPos && that_present_adPos))
        return false;
      if (this.adPos != that.adPos)
        return false;
    }

    boolean this_present_adpX = true && this.isSetAdpX();
    boolean that_present_adpX = true && that.isSetAdpX();
    if (this_present_adpX || that_present_adpX) {
      if (!(this_present_adpX && that_present_adpX))
        return false;
      if (this.adpX != that.adpX)
        return false;
    }

    boolean this_present_adpY = true && this.isSetAdpY();
    boolean that_present_adpY = true && that.isSetAdpY();
    if (this_present_adpY || that_present_adpY) {
      if (!(this_present_adpY && that_present_adpY))
        return false;
      if (this.adpY != that.adpY)
        return false;
    }

    boolean this_present_adType = true && this.isSetAdType();
    boolean that_present_adType = true && that.isSetAdType();
    if (this_present_adType || that_present_adType) {
      if (!(this_present_adType && that_present_adType))
        return false;
      if (!this.adType.equals(that.adType))
        return false;
    }

    boolean this_present_browser = true && this.isSetBrowser();
    boolean that_present_browser = true && that.isSetBrowser();
    if (this_present_browser || that_present_browser) {
      if (!(this_present_browser && that_present_browser))
        return false;
      if (!this.browser.equals(that.browser))
        return false;
    }

    boolean this_present_clickX = true && this.isSetClickX();
    boolean that_present_clickX = true && that.isSetClickX();
    if (this_present_clickX || that_present_clickX) {
      if (!(this_present_clickX && that_present_clickX))
        return false;
      if (this.clickX != that.clickX)
        return false;
    }

    boolean this_present_clickY = true && this.isSetClickY();
    boolean that_present_clickY = true && that.isSetClickY();
    if (this_present_clickY || that_present_clickY) {
      if (!(this_present_clickY && that_present_clickY))
        return false;
      if (this.clickY != that.clickY)
        return false;
    }

    boolean this_present_contentUrl = true && this.isSetContentUrl();
    boolean that_present_contentUrl = true && that.isSetContentUrl();
    if (this_present_contentUrl || that_present_contentUrl) {
      if (!(this_present_contentUrl && that_present_contentUrl))
        return false;
      if (!this.contentUrl.equals(that.contentUrl))
        return false;
    }

    boolean this_present_ext = true && this.isSetExt();
    boolean that_present_ext = true && that.isSetExt();
    if (this_present_ext || that_present_ext) {
      if (!(this_present_ext && that_present_ext))
        return false;
      if (!this.ext.equals(that.ext))
        return false;
    }

    boolean this_present_freq = true && this.isSetFreq();
    boolean that_present_freq = true && that.isSetFreq();
    if (this_present_freq || that_present_freq) {
      if (!(this_present_freq && that_present_freq))
        return false;
      if (this.freq != that.freq)
        return false;
    }

    boolean this_present_getUrl = true && this.isSetGetUrl();
    boolean that_present_getUrl = true && that.isSetGetUrl();
    if (this_present_getUrl || that_present_getUrl) {
      if (!(this_present_getUrl && that_present_getUrl))
        return false;
      if (!this.getUrl.equals(that.getUrl))
        return false;
    }

    boolean this_present_impressionId = true && this.isSetImpressionId();
    boolean that_present_impressionId = true && that.isSetImpressionId();
    if (this_present_impressionId || that_present_impressionId) {
      if (!(this_present_impressionId && that_present_impressionId))
        return false;
      if (!this.impressionId.equals(that.impressionId))
        return false;
    }

    boolean this_present_latency = true && this.isSetLatency();
    boolean that_present_latency = true && that.isSetLatency();
    if (this_present_latency || that_present_latency) {
      if (!(this_present_latency && that_present_latency))
        return false;
      if (this.latency != that.latency)
        return false;
    }

    boolean this_present_monitorKey = true && this.isSetMonitorKey();
    boolean that_present_monitorKey = true && that.isSetMonitorKey();
    if (this_present_monitorKey || that_present_monitorKey) {
      if (!(this_present_monitorKey && that_present_monitorKey))
        return false;
      if (!this.monitorKey.equals(that.monitorKey))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_refer = true && this.isSetRefer();
    boolean that_present_refer = true && that.isSetRefer();
    if (this_present_refer || that_present_refer) {
      if (!(this_present_refer && that_present_refer))
        return false;
      if (!this.refer.equals(that.refer))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_reqType = true && this.isSetReqType();
    boolean that_present_reqType = true && that.isSetReqType();
    if (this_present_reqType || that_present_reqType) {
      if (!(this_present_reqType && that_present_reqType))
        return false;
      if (!this.reqType.equals(that.reqType))
        return false;
    }

    boolean this_present_resolution = true && this.isSetResolution();
    boolean that_present_resolution = true && that.isSetResolution();
    if (this_present_resolution || that_present_resolution) {
      if (!(this_present_resolution && that_present_resolution))
        return false;
      if (!this.resolution.equals(that.resolution))
        return false;
    }

    boolean this_present_suv = true && this.isSetSuv();
    boolean that_present_suv = true && that.isSetSuv();
    if (this_present_suv || that_present_suv) {
      if (!(this_present_suv && that_present_suv))
        return false;
      if (!this.suv.equals(that.suv))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_turn = true && this.isSetTurn();
    boolean that_present_turn = true && that.isSetTurn();
    if (this_present_turn || that_present_turn) {
      if (!(this_present_turn && that_present_turn))
        return false;
      if (!this.turn.equals(that.turn))
        return false;
    }

    boolean this_present_userAgent = true && this.isSetUserAgent();
    boolean that_present_userAgent = true && that.isSetUserAgent();
    if (this_present_userAgent || that_present_userAgent) {
      if (!(this_present_userAgent && that_present_userAgent))
        return false;
      if (!this.userAgent.equals(that.userAgent))
        return false;
    }

    boolean this_present_userIp = true && this.isSetUserIp();
    boolean that_present_userIp = true && that.isSetUserIp();
    if (this_present_userIp || that_present_userIp) {
      if (!(this_present_userIp && that_present_userIp))
        return false;
      if (!this.userIp.equals(that.userIp))
        return false;
    }

    boolean this_present_yyId = true && this.isSetYyId();
    boolean that_present_yyId = true && that.isSetYyId();
    if (this_present_yyId || that_present_yyId) {
      if (!(this_present_yyId && that_present_yyId))
        return false;
      if (!this.yyId.equals(that.yyId))
        return false;
    }

    boolean this_present_repeat = true && this.isSetRepeat();
    boolean that_present_repeat = true && that.isSetRepeat();
    if (this_present_repeat || that_present_repeat) {
      if (!(this_present_repeat && that_present_repeat))
        return false;
      if (this.repeat != that.repeat)
        return false;
    }

    boolean this_present_supportFlash = true && this.isSetSupportFlash();
    boolean that_present_supportFlash = true && that.isSetSupportFlash();
    if (this_present_supportFlash || that_present_supportFlash) {
      if (!(this_present_supportFlash && that_present_supportFlash))
        return false;
      if (!this.supportFlash.equals(that.supportFlash))
        return false;
    }

    boolean this_present_pageId = true && this.isSetPageId();
    boolean that_present_pageId = true && that.isSetPageId();
    if (this_present_pageId || that_present_pageId) {
      if (!(this_present_pageId && that_present_pageId))
        return false;
      if (!this.pageId.equals(that.pageId))
        return false;
    }

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (this.statusCode != that.statusCode)
        return false;
    }

    boolean this_present_advertiserId = true && this.isSetAdvertiserId();
    boolean that_present_advertiserId = true && that.isSetAdvertiserId();
    if (this_present_advertiserId || that_present_advertiserId) {
      if (!(this_present_advertiserId && that_present_advertiserId))
        return false;
      if (!this.advertiserId.equals(that.advertiserId))
        return false;
    }

    boolean this_present_bidPrice = true && this.isSetBidPrice();
    boolean that_present_bidPrice = true && that.isSetBidPrice();
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (this.bidPrice != that.bidPrice)
        return false;
    }

    boolean this_present_bidType = true && this.isSetBidType();
    boolean that_present_bidType = true && that.isSetBidType();
    if (this_present_bidType || that_present_bidType) {
      if (!(this_present_bidType && that_present_bidType))
        return false;
      if (this.bidType != that.bidType)
        return false;
    }

    boolean this_present_bidPrice2 = true && this.isSetBidPrice2();
    boolean that_present_bidPrice2 = true && that.isSetBidPrice2();
    if (this_present_bidPrice2 || that_present_bidPrice2) {
      if (!(this_present_bidPrice2 && that_present_bidPrice2))
        return false;
      if (this.bidPrice2 != that.bidPrice2)
        return false;
    }

    boolean this_present_bidType2 = true && this.isSetBidType2();
    boolean that_present_bidType2 = true && that.isSetBidType2();
    if (this_present_bidType2 || that_present_bidType2) {
      if (!(this_present_bidType2 && that_present_bidType2))
        return false;
      if (this.bidType2 != that.bidType2)
        return false;
    }

    boolean this_present_jsVersion = true && this.isSetJsVersion();
    boolean that_present_jsVersion = true && that.isSetJsVersion();
    if (this_present_jsVersion || that_present_jsVersion) {
      if (!(this_present_jsVersion && that_present_jsVersion))
        return false;
      if (!this.jsVersion.equals(that.jsVersion))
        return false;
    }

    boolean this_present_ctr = true && this.isSetCtr();
    boolean that_present_ctr = true && that.isSetCtr();
    if (this_present_ctr || that_present_ctr) {
      if (!(this_present_ctr && that_present_ctr))
        return false;
      if (this.ctr != that.ctr)
        return false;
    }

    boolean this_present_ctr2 = true && this.isSetCtr2();
    boolean that_present_ctr2 = true && that.isSetCtr2();
    if (this_present_ctr2 || that_present_ctr2) {
      if (!(this_present_ctr2 && that_present_ctr2))
        return false;
      if (this.ctr2 != that.ctr2)
        return false;
    }

    boolean this_present_eCPM = true && this.isSetECPM();
    boolean that_present_eCPM = true && that.isSetECPM();
    if (this_present_eCPM || that_present_eCPM) {
      if (!(this_present_eCPM && that_present_eCPM))
        return false;
      if (this.eCPM != that.eCPM)
        return false;
    }

    boolean this_present_eCPM2 = true && this.isSetECPM2();
    boolean that_present_eCPM2 = true && that.isSetECPM2();
    if (this_present_eCPM2 || that_present_eCPM2) {
      if (!(this_present_eCPM2 && that_present_eCPM2))
        return false;
      if (this.eCPM2 != that.eCPM2)
        return false;
    }

    boolean this_present_adgroupMK = true && this.isSetAdgroupMK();
    boolean that_present_adgroupMK = true && that.isSetAdgroupMK();
    if (this_present_adgroupMK || that_present_adgroupMK) {
      if (!(this_present_adgroupMK && that_present_adgroupMK))
        return false;
      if (!this.adgroupMK.equals(that.adgroupMK))
        return false;
    }

    boolean this_present_advertiserIdMK = true && this.isSetAdvertiserIdMK();
    boolean that_present_advertiserIdMK = true && that.isSetAdvertiserIdMK();
    if (this_present_advertiserIdMK || that_present_advertiserIdMK) {
      if (!(this_present_advertiserIdMK && that_present_advertiserIdMK))
        return false;
      if (!this.advertiserIdMK.equals(that.advertiserIdMK))
        return false;
    }

    boolean this_present_adScore = true && this.isSetAdScore();
    boolean that_present_adScore = true && that.isSetAdScore();
    if (this_present_adScore || that_present_adScore) {
      if (!(this_present_adScore && that_present_adScore))
        return false;
      if (!this.adScore.equals(that.adScore))
        return false;
    }

    boolean this_present_campaignIdMK = true && this.isSetCampaignIdMK();
    boolean that_present_campaignIdMK = true && that.isSetCampaignIdMK();
    if (this_present_campaignIdMK || that_present_campaignIdMK) {
      if (!(this_present_campaignIdMK && that_present_campaignIdMK))
        return false;
      if (!this.campaignIdMK.equals(that.campaignIdMK))
        return false;
    }

    boolean this_present_edContent = true && this.isSetEdContent();
    boolean that_present_edContent = true && that.isSetEdContent();
    if (this_present_edContent || that_present_edContent) {
      if (!(this_present_edContent && that_present_edContent))
        return false;
      if (!this.edContent.equals(that.edContent))
        return false;
    }

    boolean this_present_edStatus = true && this.isSetEdStatus();
    boolean that_present_edStatus = true && that.isSetEdStatus();
    if (this_present_edStatus || that_present_edStatus) {
      if (!(this_present_edStatus && that_present_edStatus))
        return false;
      if (!this.edStatus.equals(that.edStatus))
        return false;
    }

    boolean this_present_lineIdMK = true && this.isSetLineIdMK();
    boolean that_present_lineIdMK = true && that.isSetLineIdMK();
    if (this_present_lineIdMK || that_present_lineIdMK) {
      if (!(this_present_lineIdMK && that_present_lineIdMK))
        return false;
      if (!this.lineIdMK.equals(that.lineIdMK))
        return false;
    }

    boolean this_present_materialMK = true && this.isSetMaterialMK();
    boolean that_present_materialMK = true && that.isSetMaterialMK();
    if (this_present_materialMK || that_present_materialMK) {
      if (!(this_present_materialMK && that_present_materialMK))
        return false;
      if (!this.materialMK.equals(that.materialMK))
        return false;
    }

    boolean this_present_logTime = true && this.isSetLogTime();
    boolean that_present_logTime = true && that.isSetLogTime();
    if (this_present_logTime || that_present_logTime) {
      if (!(this_present_logTime && that_present_logTime))
        return false;
      if (!this.logTime.equals(that.logTime))
        return false;
    }

    boolean this_present_logLevel = true && this.isSetLogLevel();
    boolean that_present_logLevel = true && that.isSetLogLevel();
    if (this_present_logLevel || that_present_logLevel) {
      if (!(this_present_logLevel && that_present_logLevel))
        return false;
      if (!this.logLevel.equals(that.logLevel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CountinfoOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CountinfoOperation typedOther = (CountinfoOperation)other;

    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(typedOther.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, typedOther.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpId()).compareTo(typedOther.isSetAdpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpId, typedOther.adpId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdPos()).compareTo(typedOther.isSetAdPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adPos, typedOther.adPos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpX()).compareTo(typedOther.isSetAdpX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpX, typedOther.adpX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpY()).compareTo(typedOther.isSetAdpY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpY, typedOther.adpY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdType()).compareTo(typedOther.isSetAdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adType, typedOther.adType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrowser()).compareTo(typedOther.isSetBrowser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrowser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.browser, typedOther.browser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickX()).compareTo(typedOther.isSetClickX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickX, typedOther.clickX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickY()).compareTo(typedOther.isSetClickY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickY, typedOther.clickY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentUrl()).compareTo(typedOther.isSetContentUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentUrl, typedOther.contentUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExt()).compareTo(typedOther.isSetExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, typedOther.ext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreq()).compareTo(typedOther.isSetFreq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freq, typedOther.freq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGetUrl()).compareTo(typedOther.isSetGetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getUrl, typedOther.getUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpressionId()).compareTo(typedOther.isSetImpressionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpressionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impressionId, typedOther.impressionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatency()).compareTo(typedOther.isSetLatency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latency, typedOther.latency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorKey()).compareTo(typedOther.isSetMonitorKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorKey, typedOther.monitorKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(typedOther.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, typedOther.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefer()).compareTo(typedOther.isSetRefer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refer, typedOther.refer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(typedOther.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, typedOther.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqType()).compareTo(typedOther.isSetReqType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqType, typedOther.reqType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolution()).compareTo(typedOther.isSetResolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolution, typedOther.resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuv()).compareTo(typedOther.isSetSuv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suv, typedOther.suv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurn()).compareTo(typedOther.isSetTurn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turn, typedOther.turn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(typedOther.isSetUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, typedOther.userAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIp()).compareTo(typedOther.isSetUserIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIp, typedOther.userIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYyId()).compareTo(typedOther.isSetYyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyId, typedOther.yyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeat()).compareTo(typedOther.isSetRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat, typedOther.repeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportFlash()).compareTo(typedOther.isSetSupportFlash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportFlash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportFlash, typedOther.supportFlash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageId()).compareTo(typedOther.isSetPageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageId, typedOther.pageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(typedOther.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, typedOther.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvertiserId()).compareTo(typedOther.isSetAdvertiserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvertiserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advertiserId, typedOther.advertiserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(typedOther.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, typedOther.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidType()).compareTo(typedOther.isSetBidType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidType, typedOther.bidType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice2()).compareTo(typedOther.isSetBidPrice2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice2, typedOther.bidPrice2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidType2()).compareTo(typedOther.isSetBidType2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidType2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidType2, typedOther.bidType2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJsVersion()).compareTo(typedOther.isSetJsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsVersion, typedOther.jsVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtr()).compareTo(typedOther.isSetCtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctr, typedOther.ctr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtr2()).compareTo(typedOther.isSetCtr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctr2, typedOther.ctr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetECPM()).compareTo(typedOther.isSetECPM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetECPM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eCPM, typedOther.eCPM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetECPM2()).compareTo(typedOther.isSetECPM2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetECPM2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eCPM2, typedOther.eCPM2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdgroupMK()).compareTo(typedOther.isSetAdgroupMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdgroupMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adgroupMK, typedOther.adgroupMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvertiserIdMK()).compareTo(typedOther.isSetAdvertiserIdMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvertiserIdMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advertiserIdMK, typedOther.advertiserIdMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdScore()).compareTo(typedOther.isSetAdScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adScore, typedOther.adScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignIdMK()).compareTo(typedOther.isSetCampaignIdMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignIdMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignIdMK, typedOther.campaignIdMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdContent()).compareTo(typedOther.isSetEdContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edContent, typedOther.edContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdStatus()).compareTo(typedOther.isSetEdStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edStatus, typedOther.edStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineIdMK()).compareTo(typedOther.isSetLineIdMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineIdMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineIdMK, typedOther.lineIdMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterialMK()).compareTo(typedOther.isSetMaterialMK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterialMK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialMK, typedOther.materialMK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogTime()).compareTo(typedOther.isSetLogTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logTime, typedOther.logTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogLevel()).compareTo(typedOther.isSetLogLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logLevel, typedOther.logLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CountinfoOperation(");
    boolean first = true;

    if (isSetAdId()) {
      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
    }
    if (isSetAdpId()) {
      if (!first) sb.append(", ");
      sb.append("adpId:");
      if (this.adpId == null) {
        sb.append("null");
      } else {
        sb.append(this.adpId);
      }
      first = false;
    }
    if (isSetAdPos()) {
      if (!first) sb.append(", ");
      sb.append("adPos:");
      sb.append(this.adPos);
      first = false;
    }
    if (isSetAdpX()) {
      if (!first) sb.append(", ");
      sb.append("adpX:");
      sb.append(this.adpX);
      first = false;
    }
    if (isSetAdpY()) {
      if (!first) sb.append(", ");
      sb.append("adpY:");
      sb.append(this.adpY);
      first = false;
    }
    if (isSetAdType()) {
      if (!first) sb.append(", ");
      sb.append("adType:");
      if (this.adType == null) {
        sb.append("null");
      } else {
        sb.append(this.adType);
      }
      first = false;
    }
    if (isSetBrowser()) {
      if (!first) sb.append(", ");
      sb.append("browser:");
      if (this.browser == null) {
        sb.append("null");
      } else {
        sb.append(this.browser);
      }
      first = false;
    }
    if (isSetClickX()) {
      if (!first) sb.append(", ");
      sb.append("clickX:");
      sb.append(this.clickX);
      first = false;
    }
    if (isSetClickY()) {
      if (!first) sb.append(", ");
      sb.append("clickY:");
      sb.append(this.clickY);
      first = false;
    }
    if (isSetContentUrl()) {
      if (!first) sb.append(", ");
      sb.append("contentUrl:");
      if (this.contentUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.contentUrl);
      }
      first = false;
    }
    if (isSetExt()) {
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
    }
    if (isSetFreq()) {
      if (!first) sb.append(", ");
      sb.append("freq:");
      sb.append(this.freq);
      first = false;
    }
    if (isSetGetUrl()) {
      if (!first) sb.append(", ");
      sb.append("getUrl:");
      if (this.getUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.getUrl);
      }
      first = false;
    }
    if (isSetImpressionId()) {
      if (!first) sb.append(", ");
      sb.append("impressionId:");
      if (this.impressionId == null) {
        sb.append("null");
      } else {
        sb.append(this.impressionId);
      }
      first = false;
    }
    if (isSetLatency()) {
      if (!first) sb.append(", ");
      sb.append("latency:");
      sb.append(this.latency);
      first = false;
    }
    if (isSetMonitorKey()) {
      if (!first) sb.append(", ");
      sb.append("monitorKey:");
      if (this.monitorKey == null) {
        sb.append("null");
      } else {
        sb.append(this.monitorKey);
      }
      first = false;
    }
    if (isSetOs()) {
      if (!first) sb.append(", ");
      sb.append("os:");
      if (this.os == null) {
        sb.append("null");
      } else {
        sb.append(this.os);
      }
      first = false;
    }
    if (isSetRefer()) {
      if (!first) sb.append(", ");
      sb.append("refer:");
      if (this.refer == null) {
        sb.append("null");
      } else {
        sb.append(this.refer);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetReqType()) {
      if (!first) sb.append(", ");
      sb.append("reqType:");
      if (this.reqType == null) {
        sb.append("null");
      } else {
        sb.append(this.reqType);
      }
      first = false;
    }
    if (isSetResolution()) {
      if (!first) sb.append(", ");
      sb.append("resolution:");
      if (this.resolution == null) {
        sb.append("null");
      } else {
        sb.append(this.resolution);
      }
      first = false;
    }
    if (isSetSuv()) {
      if (!first) sb.append(", ");
      sb.append("suv:");
      if (this.suv == null) {
        sb.append("null");
      } else {
        sb.append(this.suv);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetTurn()) {
      if (!first) sb.append(", ");
      sb.append("turn:");
      if (this.turn == null) {
        sb.append("null");
      } else {
        sb.append(this.turn);
      }
      first = false;
    }
    if (isSetUserAgent()) {
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
    }
    if (isSetUserIp()) {
      if (!first) sb.append(", ");
      sb.append("userIp:");
      if (this.userIp == null) {
        sb.append("null");
      } else {
        sb.append(this.userIp);
      }
      first = false;
    }
    if (isSetYyId()) {
      if (!first) sb.append(", ");
      sb.append("yyId:");
      if (this.yyId == null) {
        sb.append("null");
      } else {
        sb.append(this.yyId);
      }
      first = false;
    }
    if (isSetRepeat()) {
      if (!first) sb.append(", ");
      sb.append("repeat:");
      sb.append(this.repeat);
      first = false;
    }
    if (isSetSupportFlash()) {
      if (!first) sb.append(", ");
      sb.append("supportFlash:");
      if (this.supportFlash == null) {
        sb.append("null");
      } else {
        sb.append(this.supportFlash);
      }
      first = false;
    }
    if (isSetPageId()) {
      if (!first) sb.append(", ");
      sb.append("pageId:");
      if (this.pageId == null) {
        sb.append("null");
      } else {
        sb.append(this.pageId);
      }
      first = false;
    }
    if (isSetStatusCode()) {
      if (!first) sb.append(", ");
      sb.append("statusCode:");
      sb.append(this.statusCode);
      first = false;
    }
    if (isSetAdvertiserId()) {
      if (!first) sb.append(", ");
      sb.append("advertiserId:");
      if (this.advertiserId == null) {
        sb.append("null");
      } else {
        sb.append(this.advertiserId);
      }
      first = false;
    }
    if (isSetBidPrice()) {
      if (!first) sb.append(", ");
      sb.append("bidPrice:");
      sb.append(this.bidPrice);
      first = false;
    }
    if (isSetBidType()) {
      if (!first) sb.append(", ");
      sb.append("bidType:");
      sb.append(this.bidType);
      first = false;
    }
    if (isSetBidPrice2()) {
      if (!first) sb.append(", ");
      sb.append("bidPrice2:");
      sb.append(this.bidPrice2);
      first = false;
    }
    if (isSetBidType2()) {
      if (!first) sb.append(", ");
      sb.append("bidType2:");
      sb.append(this.bidType2);
      first = false;
    }
    if (isSetJsVersion()) {
      if (!first) sb.append(", ");
      sb.append("jsVersion:");
      if (this.jsVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.jsVersion);
      }
      first = false;
    }
    if (isSetCtr()) {
      if (!first) sb.append(", ");
      sb.append("ctr:");
      sb.append(this.ctr);
      first = false;
    }
    if (isSetCtr2()) {
      if (!first) sb.append(", ");
      sb.append("ctr2:");
      sb.append(this.ctr2);
      first = false;
    }
    if (isSetECPM()) {
      if (!first) sb.append(", ");
      sb.append("eCPM:");
      sb.append(this.eCPM);
      first = false;
    }
    if (isSetECPM2()) {
      if (!first) sb.append(", ");
      sb.append("eCPM2:");
      sb.append(this.eCPM2);
      first = false;
    }
    if (isSetAdgroupMK()) {
      if (!first) sb.append(", ");
      sb.append("adgroupMK:");
      if (this.adgroupMK == null) {
        sb.append("null");
      } else {
        sb.append(this.adgroupMK);
      }
      first = false;
    }
    if (isSetAdvertiserIdMK()) {
      if (!first) sb.append(", ");
      sb.append("advertiserIdMK:");
      if (this.advertiserIdMK == null) {
        sb.append("null");
      } else {
        sb.append(this.advertiserIdMK);
      }
      first = false;
    }
    if (isSetAdScore()) {
      if (!first) sb.append(", ");
      sb.append("adScore:");
      if (this.adScore == null) {
        sb.append("null");
      } else {
        sb.append(this.adScore);
      }
      first = false;
    }
    if (isSetCampaignIdMK()) {
      if (!first) sb.append(", ");
      sb.append("campaignIdMK:");
      if (this.campaignIdMK == null) {
        sb.append("null");
      } else {
        sb.append(this.campaignIdMK);
      }
      first = false;
    }
    if (isSetEdContent()) {
      if (!first) sb.append(", ");
      sb.append("edContent:");
      if (this.edContent == null) {
        sb.append("null");
      } else {
        sb.append(this.edContent);
      }
      first = false;
    }
    if (isSetEdStatus()) {
      if (!first) sb.append(", ");
      sb.append("edStatus:");
      if (this.edStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.edStatus);
      }
      first = false;
    }
    if (isSetLineIdMK()) {
      if (!first) sb.append(", ");
      sb.append("lineIdMK:");
      if (this.lineIdMK == null) {
        sb.append("null");
      } else {
        sb.append(this.lineIdMK);
      }
      first = false;
    }
    if (isSetMaterialMK()) {
      if (!first) sb.append(", ");
      sb.append("materialMK:");
      if (this.materialMK == null) {
        sb.append("null");
      } else {
        sb.append(this.materialMK);
      }
      first = false;
    }
    if (isSetLogTime()) {
      if (!first) sb.append(", ");
      sb.append("logTime:");
      if (this.logTime == null) {
        sb.append("null");
      } else {
        sb.append(this.logTime);
      }
      first = false;
    }
    if (isSetLogLevel()) {
      if (!first) sb.append(", ");
      sb.append("logLevel:");
      if (this.logLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.logLevel);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CountinfoOperationStandardSchemeFactory implements SchemeFactory {
    public CountinfoOperationStandardScheme getScheme() {
      return new CountinfoOperationStandardScheme();
    }
  }

  private static class CountinfoOperationStandardScheme extends StandardScheme<CountinfoOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CountinfoOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adId = iprot.readString();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adpId = iprot.readString();
              struct.setAdpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AD_POS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adPos = iprot.readI32();
              struct.setAdPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADP_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adpX = iprot.readI32();
              struct.setAdpXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADP_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adpY = iprot.readI32();
              struct.setAdpYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adType = iprot.readString();
              struct.setAdTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BROWSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.browser = iprot.readString();
              struct.setBrowserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLICK_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clickX = iprot.readI32();
              struct.setClickXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLICK_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clickY = iprot.readI32();
              struct.setClickYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTENT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentUrl = iprot.readString();
              struct.setContentUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ext = iprot.readString();
              struct.setExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freq = iprot.readI32();
              struct.setFreqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GET_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.getUrl = iprot.readString();
              struct.setGetUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IMPRESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impressionId = iprot.readString();
              struct.setImpressionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LATENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latency = iprot.readI64();
              struct.setLatencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MONITOR_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorKey = iprot.readString();
              struct.setMonitorKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os = iprot.readString();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refer = iprot.readString();
              struct.setReferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REQ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqType = iprot.readString();
              struct.setReqTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resolution = iprot.readString();
              struct.setResolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suv = iprot.readString();
              struct.setSuvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TURN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.turn = iprot.readString();
              struct.setTurnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAgent = iprot.readString();
              struct.setUserAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userIp = iprot.readString();
              struct.setUserIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // YY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yyId = iprot.readString();
              struct.setYyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeat = iprot.readI32();
              struct.setRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SUPPORT_FLASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supportFlash = iprot.readString();
              struct.setSupportFlashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageId = iprot.readString();
              struct.setPageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.statusCode = iprot.readI64();
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ADVERTISER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.advertiserId = iprot.readString();
              struct.setAdvertiserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice = iprot.readDouble();
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // BID_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidType = iprot.readI32();
              struct.setBidTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // BID_PRICE2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidPrice2 = iprot.readDouble();
              struct.setBidPrice2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // BID_TYPE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidType2 = iprot.readI32();
              struct.setBidType2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // JS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsVersion = iprot.readString();
              struct.setJsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // CTR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ctr = iprot.readDouble();
              struct.setCtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // CTR2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ctr2 = iprot.readDouble();
              struct.setCtr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // E_CPM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.eCPM = iprot.readDouble();
              struct.setECPMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // E_CPM2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.eCPM2 = iprot.readDouble();
              struct.setECPM2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ADGROUP_MK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adgroupMK = iprot.readString();
              struct.setAdgroupMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // ADVERTISER_ID_MK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.advertiserIdMK = iprot.readString();
              struct.setAdvertiserIdMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // AD_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adScore = iprot.readString();
              struct.setAdScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // CAMPAIGN_ID_MK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.campaignIdMK = iprot.readString();
              struct.setCampaignIdMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // ED_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.edContent = iprot.readString();
              struct.setEdContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // ED_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.edStatus = iprot.readString();
              struct.setEdStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // LINE_ID_MK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineIdMK = iprot.readString();
              struct.setLineIdMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // MATERIAL_MK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.materialMK = iprot.readString();
              struct.setMaterialMKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // LOG_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logTime = iprot.readString();
              struct.setLogTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // LOG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logLevel = iprot.readString();
              struct.setLogLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CountinfoOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.adId != null) {
        if (struct.isSetAdId()) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adpId != null) {
        if (struct.isSetAdpId()) {
          oprot.writeFieldBegin(ADP_ID_FIELD_DESC);
          oprot.writeString(struct.adpId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdPos()) {
        oprot.writeFieldBegin(AD_POS_FIELD_DESC);
        oprot.writeI32(struct.adPos);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdpX()) {
        oprot.writeFieldBegin(ADP_X_FIELD_DESC);
        oprot.writeI32(struct.adpX);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdpY()) {
        oprot.writeFieldBegin(ADP_Y_FIELD_DESC);
        oprot.writeI32(struct.adpY);
        oprot.writeFieldEnd();
      }
      if (struct.adType != null) {
        if (struct.isSetAdType()) {
          oprot.writeFieldBegin(AD_TYPE_FIELD_DESC);
          oprot.writeString(struct.adType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.browser != null) {
        if (struct.isSetBrowser()) {
          oprot.writeFieldBegin(BROWSER_FIELD_DESC);
          oprot.writeString(struct.browser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClickX()) {
        oprot.writeFieldBegin(CLICK_X_FIELD_DESC);
        oprot.writeI32(struct.clickX);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClickY()) {
        oprot.writeFieldBegin(CLICK_Y_FIELD_DESC);
        oprot.writeI32(struct.clickY);
        oprot.writeFieldEnd();
      }
      if (struct.contentUrl != null) {
        if (struct.isSetContentUrl()) {
          oprot.writeFieldBegin(CONTENT_URL_FIELD_DESC);
          oprot.writeString(struct.contentUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ext != null) {
        if (struct.isSetExt()) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFreq()) {
        oprot.writeFieldBegin(FREQ_FIELD_DESC);
        oprot.writeI32(struct.freq);
        oprot.writeFieldEnd();
      }
      if (struct.getUrl != null) {
        if (struct.isSetGetUrl()) {
          oprot.writeFieldBegin(GET_URL_FIELD_DESC);
          oprot.writeString(struct.getUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.impressionId != null) {
        if (struct.isSetImpressionId()) {
          oprot.writeFieldBegin(IMPRESSION_ID_FIELD_DESC);
          oprot.writeString(struct.impressionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLatency()) {
        oprot.writeFieldBegin(LATENCY_FIELD_DESC);
        oprot.writeI64(struct.latency);
        oprot.writeFieldEnd();
      }
      if (struct.monitorKey != null) {
        if (struct.isSetMonitorKey()) {
          oprot.writeFieldBegin(MONITOR_KEY_FIELD_DESC);
          oprot.writeString(struct.monitorKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.os != null) {
        if (struct.isSetOs()) {
          oprot.writeFieldBegin(OS_FIELD_DESC);
          oprot.writeString(struct.os);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refer != null) {
        if (struct.isSetRefer()) {
          oprot.writeFieldBegin(REFER_FIELD_DESC);
          oprot.writeString(struct.refer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reqType != null) {
        if (struct.isSetReqType()) {
          oprot.writeFieldBegin(REQ_TYPE_FIELD_DESC);
          oprot.writeString(struct.reqType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resolution != null) {
        if (struct.isSetResolution()) {
          oprot.writeFieldBegin(RESOLUTION_FIELD_DESC);
          oprot.writeString(struct.resolution);
          oprot.writeFieldEnd();
        }
      }
      if (struct.suv != null) {
        if (struct.isSetSuv()) {
          oprot.writeFieldBegin(SUV_FIELD_DESC);
          oprot.writeString(struct.suv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.turn != null) {
        if (struct.isSetTurn()) {
          oprot.writeFieldBegin(TURN_FIELD_DESC);
          oprot.writeString(struct.turn);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userAgent != null) {
        if (struct.isSetUserAgent()) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userIp != null) {
        if (struct.isSetUserIp()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.userIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.yyId != null) {
        if (struct.isSetYyId()) {
          oprot.writeFieldBegin(YY_ID_FIELD_DESC);
          oprot.writeString(struct.yyId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRepeat()) {
        oprot.writeFieldBegin(REPEAT_FIELD_DESC);
        oprot.writeI32(struct.repeat);
        oprot.writeFieldEnd();
      }
      if (struct.supportFlash != null) {
        if (struct.isSetSupportFlash()) {
          oprot.writeFieldBegin(SUPPORT_FLASH_FIELD_DESC);
          oprot.writeString(struct.supportFlash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pageId != null) {
        if (struct.isSetPageId()) {
          oprot.writeFieldBegin(PAGE_ID_FIELD_DESC);
          oprot.writeString(struct.pageId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatusCode()) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI64(struct.statusCode);
        oprot.writeFieldEnd();
      }
      if (struct.advertiserId != null) {
        if (struct.isSetAdvertiserId()) {
          oprot.writeFieldBegin(ADVERTISER_ID_FIELD_DESC);
          oprot.writeString(struct.advertiserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBidPrice()) {
        oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.bidPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBidType()) {
        oprot.writeFieldBegin(BID_TYPE_FIELD_DESC);
        oprot.writeI32(struct.bidType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBidPrice2()) {
        oprot.writeFieldBegin(BID_PRICE2_FIELD_DESC);
        oprot.writeDouble(struct.bidPrice2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBidType2()) {
        oprot.writeFieldBegin(BID_TYPE2_FIELD_DESC);
        oprot.writeI32(struct.bidType2);
        oprot.writeFieldEnd();
      }
      if (struct.jsVersion != null) {
        if (struct.isSetJsVersion()) {
          oprot.writeFieldBegin(JS_VERSION_FIELD_DESC);
          oprot.writeString(struct.jsVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCtr()) {
        oprot.writeFieldBegin(CTR_FIELD_DESC);
        oprot.writeDouble(struct.ctr);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCtr2()) {
        oprot.writeFieldBegin(CTR2_FIELD_DESC);
        oprot.writeDouble(struct.ctr2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetECPM()) {
        oprot.writeFieldBegin(E_CPM_FIELD_DESC);
        oprot.writeDouble(struct.eCPM);
        oprot.writeFieldEnd();
      }
      if (struct.isSetECPM2()) {
        oprot.writeFieldBegin(E_CPM2_FIELD_DESC);
        oprot.writeDouble(struct.eCPM2);
        oprot.writeFieldEnd();
      }
      if (struct.adgroupMK != null) {
        if (struct.isSetAdgroupMK()) {
          oprot.writeFieldBegin(ADGROUP_MK_FIELD_DESC);
          oprot.writeString(struct.adgroupMK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.advertiserIdMK != null) {
        if (struct.isSetAdvertiserIdMK()) {
          oprot.writeFieldBegin(ADVERTISER_ID_MK_FIELD_DESC);
          oprot.writeString(struct.advertiserIdMK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adScore != null) {
        if (struct.isSetAdScore()) {
          oprot.writeFieldBegin(AD_SCORE_FIELD_DESC);
          oprot.writeString(struct.adScore);
          oprot.writeFieldEnd();
        }
      }
      if (struct.campaignIdMK != null) {
        if (struct.isSetCampaignIdMK()) {
          oprot.writeFieldBegin(CAMPAIGN_ID_MK_FIELD_DESC);
          oprot.writeString(struct.campaignIdMK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.edContent != null) {
        if (struct.isSetEdContent()) {
          oprot.writeFieldBegin(ED_CONTENT_FIELD_DESC);
          oprot.writeString(struct.edContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.edStatus != null) {
        if (struct.isSetEdStatus()) {
          oprot.writeFieldBegin(ED_STATUS_FIELD_DESC);
          oprot.writeString(struct.edStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lineIdMK != null) {
        if (struct.isSetLineIdMK()) {
          oprot.writeFieldBegin(LINE_ID_MK_FIELD_DESC);
          oprot.writeString(struct.lineIdMK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.materialMK != null) {
        if (struct.isSetMaterialMK()) {
          oprot.writeFieldBegin(MATERIAL_MK_FIELD_DESC);
          oprot.writeString(struct.materialMK);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logTime != null) {
        if (struct.isSetLogTime()) {
          oprot.writeFieldBegin(LOG_TIME_FIELD_DESC);
          oprot.writeString(struct.logTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logLevel != null) {
        if (struct.isSetLogLevel()) {
          oprot.writeFieldBegin(LOG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.logLevel);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CountinfoOperationTupleSchemeFactory implements SchemeFactory {
    public CountinfoOperationTupleScheme getScheme() {
      return new CountinfoOperationTupleScheme();
    }
  }

  private static class CountinfoOperationTupleScheme extends TupleScheme<CountinfoOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CountinfoOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAdId()) {
        optionals.set(0);
      }
      if (struct.isSetAdpId()) {
        optionals.set(1);
      }
      if (struct.isSetAdPos()) {
        optionals.set(2);
      }
      if (struct.isSetAdpX()) {
        optionals.set(3);
      }
      if (struct.isSetAdpY()) {
        optionals.set(4);
      }
      if (struct.isSetAdType()) {
        optionals.set(5);
      }
      if (struct.isSetBrowser()) {
        optionals.set(6);
      }
      if (struct.isSetClickX()) {
        optionals.set(7);
      }
      if (struct.isSetClickY()) {
        optionals.set(8);
      }
      if (struct.isSetContentUrl()) {
        optionals.set(9);
      }
      if (struct.isSetExt()) {
        optionals.set(10);
      }
      if (struct.isSetFreq()) {
        optionals.set(11);
      }
      if (struct.isSetGetUrl()) {
        optionals.set(12);
      }
      if (struct.isSetImpressionId()) {
        optionals.set(13);
      }
      if (struct.isSetLatency()) {
        optionals.set(14);
      }
      if (struct.isSetMonitorKey()) {
        optionals.set(15);
      }
      if (struct.isSetOs()) {
        optionals.set(16);
      }
      if (struct.isSetRefer()) {
        optionals.set(17);
      }
      if (struct.isSetRegion()) {
        optionals.set(18);
      }
      if (struct.isSetReqType()) {
        optionals.set(19);
      }
      if (struct.isSetResolution()) {
        optionals.set(20);
      }
      if (struct.isSetSuv()) {
        optionals.set(21);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(22);
      }
      if (struct.isSetTurn()) {
        optionals.set(23);
      }
      if (struct.isSetUserAgent()) {
        optionals.set(24);
      }
      if (struct.isSetUserIp()) {
        optionals.set(25);
      }
      if (struct.isSetYyId()) {
        optionals.set(26);
      }
      if (struct.isSetRepeat()) {
        optionals.set(27);
      }
      if (struct.isSetSupportFlash()) {
        optionals.set(28);
      }
      if (struct.isSetPageId()) {
        optionals.set(29);
      }
      if (struct.isSetStatusCode()) {
        optionals.set(30);
      }
      if (struct.isSetAdvertiserId()) {
        optionals.set(31);
      }
      if (struct.isSetBidPrice()) {
        optionals.set(32);
      }
      if (struct.isSetBidType()) {
        optionals.set(33);
      }
      if (struct.isSetBidPrice2()) {
        optionals.set(34);
      }
      if (struct.isSetBidType2()) {
        optionals.set(35);
      }
      if (struct.isSetJsVersion()) {
        optionals.set(36);
      }
      if (struct.isSetCtr()) {
        optionals.set(37);
      }
      if (struct.isSetCtr2()) {
        optionals.set(38);
      }
      if (struct.isSetECPM()) {
        optionals.set(39);
      }
      if (struct.isSetECPM2()) {
        optionals.set(40);
      }
      if (struct.isSetAdgroupMK()) {
        optionals.set(41);
      }
      if (struct.isSetAdvertiserIdMK()) {
        optionals.set(42);
      }
      if (struct.isSetAdScore()) {
        optionals.set(43);
      }
      if (struct.isSetCampaignIdMK()) {
        optionals.set(44);
      }
      if (struct.isSetEdContent()) {
        optionals.set(45);
      }
      if (struct.isSetEdStatus()) {
        optionals.set(46);
      }
      if (struct.isSetLineIdMK()) {
        optionals.set(47);
      }
      if (struct.isSetMaterialMK()) {
        optionals.set(48);
      }
      if (struct.isSetLogTime()) {
        optionals.set(49);
      }
      if (struct.isSetLogLevel()) {
        optionals.set(50);
      }
      oprot.writeBitSet(optionals, 51);
      if (struct.isSetAdId()) {
        oprot.writeString(struct.adId);
      }
      if (struct.isSetAdpId()) {
        oprot.writeString(struct.adpId);
      }
      if (struct.isSetAdPos()) {
        oprot.writeI32(struct.adPos);
      }
      if (struct.isSetAdpX()) {
        oprot.writeI32(struct.adpX);
      }
      if (struct.isSetAdpY()) {
        oprot.writeI32(struct.adpY);
      }
      if (struct.isSetAdType()) {
        oprot.writeString(struct.adType);
      }
      if (struct.isSetBrowser()) {
        oprot.writeString(struct.browser);
      }
      if (struct.isSetClickX()) {
        oprot.writeI32(struct.clickX);
      }
      if (struct.isSetClickY()) {
        oprot.writeI32(struct.clickY);
      }
      if (struct.isSetContentUrl()) {
        oprot.writeString(struct.contentUrl);
      }
      if (struct.isSetExt()) {
        oprot.writeString(struct.ext);
      }
      if (struct.isSetFreq()) {
        oprot.writeI32(struct.freq);
      }
      if (struct.isSetGetUrl()) {
        oprot.writeString(struct.getUrl);
      }
      if (struct.isSetImpressionId()) {
        oprot.writeString(struct.impressionId);
      }
      if (struct.isSetLatency()) {
        oprot.writeI64(struct.latency);
      }
      if (struct.isSetMonitorKey()) {
        oprot.writeString(struct.monitorKey);
      }
      if (struct.isSetOs()) {
        oprot.writeString(struct.os);
      }
      if (struct.isSetRefer()) {
        oprot.writeString(struct.refer);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetReqType()) {
        oprot.writeString(struct.reqType);
      }
      if (struct.isSetResolution()) {
        oprot.writeString(struct.resolution);
      }
      if (struct.isSetSuv()) {
        oprot.writeString(struct.suv);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetTurn()) {
        oprot.writeString(struct.turn);
      }
      if (struct.isSetUserAgent()) {
        oprot.writeString(struct.userAgent);
      }
      if (struct.isSetUserIp()) {
        oprot.writeString(struct.userIp);
      }
      if (struct.isSetYyId()) {
        oprot.writeString(struct.yyId);
      }
      if (struct.isSetRepeat()) {
        oprot.writeI32(struct.repeat);
      }
      if (struct.isSetSupportFlash()) {
        oprot.writeString(struct.supportFlash);
      }
      if (struct.isSetPageId()) {
        oprot.writeString(struct.pageId);
      }
      if (struct.isSetStatusCode()) {
        oprot.writeI64(struct.statusCode);
      }
      if (struct.isSetAdvertiserId()) {
        oprot.writeString(struct.advertiserId);
      }
      if (struct.isSetBidPrice()) {
        oprot.writeDouble(struct.bidPrice);
      }
      if (struct.isSetBidType()) {
        oprot.writeI32(struct.bidType);
      }
      if (struct.isSetBidPrice2()) {
        oprot.writeDouble(struct.bidPrice2);
      }
      if (struct.isSetBidType2()) {
        oprot.writeI32(struct.bidType2);
      }
      if (struct.isSetJsVersion()) {
        oprot.writeString(struct.jsVersion);
      }
      if (struct.isSetCtr()) {
        oprot.writeDouble(struct.ctr);
      }
      if (struct.isSetCtr2()) {
        oprot.writeDouble(struct.ctr2);
      }
      if (struct.isSetECPM()) {
        oprot.writeDouble(struct.eCPM);
      }
      if (struct.isSetECPM2()) {
        oprot.writeDouble(struct.eCPM2);
      }
      if (struct.isSetAdgroupMK()) {
        oprot.writeString(struct.adgroupMK);
      }
      if (struct.isSetAdvertiserIdMK()) {
        oprot.writeString(struct.advertiserIdMK);
      }
      if (struct.isSetAdScore()) {
        oprot.writeString(struct.adScore);
      }
      if (struct.isSetCampaignIdMK()) {
        oprot.writeString(struct.campaignIdMK);
      }
      if (struct.isSetEdContent()) {
        oprot.writeString(struct.edContent);
      }
      if (struct.isSetEdStatus()) {
        oprot.writeString(struct.edStatus);
      }
      if (struct.isSetLineIdMK()) {
        oprot.writeString(struct.lineIdMK);
      }
      if (struct.isSetMaterialMK()) {
        oprot.writeString(struct.materialMK);
      }
      if (struct.isSetLogTime()) {
        oprot.writeString(struct.logTime);
      }
      if (struct.isSetLogLevel()) {
        oprot.writeString(struct.logLevel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CountinfoOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(51);
      if (incoming.get(0)) {
        struct.adId = iprot.readString();
        struct.setAdIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.adpId = iprot.readString();
        struct.setAdpIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.adPos = iprot.readI32();
        struct.setAdPosIsSet(true);
      }
      if (incoming.get(3)) {
        struct.adpX = iprot.readI32();
        struct.setAdpXIsSet(true);
      }
      if (incoming.get(4)) {
        struct.adpY = iprot.readI32();
        struct.setAdpYIsSet(true);
      }
      if (incoming.get(5)) {
        struct.adType = iprot.readString();
        struct.setAdTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.browser = iprot.readString();
        struct.setBrowserIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clickX = iprot.readI32();
        struct.setClickXIsSet(true);
      }
      if (incoming.get(8)) {
        struct.clickY = iprot.readI32();
        struct.setClickYIsSet(true);
      }
      if (incoming.get(9)) {
        struct.contentUrl = iprot.readString();
        struct.setContentUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ext = iprot.readString();
        struct.setExtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.freq = iprot.readI32();
        struct.setFreqIsSet(true);
      }
      if (incoming.get(12)) {
        struct.getUrl = iprot.readString();
        struct.setGetUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.impressionId = iprot.readString();
        struct.setImpressionIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.latency = iprot.readI64();
        struct.setLatencyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.monitorKey = iprot.readString();
        struct.setMonitorKeyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.os = iprot.readString();
        struct.setOsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.refer = iprot.readString();
        struct.setReferIsSet(true);
      }
      if (incoming.get(18)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reqType = iprot.readString();
        struct.setReqTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.resolution = iprot.readString();
        struct.setResolutionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.suv = iprot.readString();
        struct.setSuvIsSet(true);
      }
      if (incoming.get(22)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(23)) {
        struct.turn = iprot.readString();
        struct.setTurnIsSet(true);
      }
      if (incoming.get(24)) {
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
      if (incoming.get(25)) {
        struct.userIp = iprot.readString();
        struct.setUserIpIsSet(true);
      }
      if (incoming.get(26)) {
        struct.yyId = iprot.readString();
        struct.setYyIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.repeat = iprot.readI32();
        struct.setRepeatIsSet(true);
      }
      if (incoming.get(28)) {
        struct.supportFlash = iprot.readString();
        struct.setSupportFlashIsSet(true);
      }
      if (incoming.get(29)) {
        struct.pageId = iprot.readString();
        struct.setPageIdIsSet(true);
      }
      if (incoming.get(30)) {
        struct.statusCode = iprot.readI64();
        struct.setStatusCodeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.advertiserId = iprot.readString();
        struct.setAdvertiserIdIsSet(true);
      }
      if (incoming.get(32)) {
        struct.bidPrice = iprot.readDouble();
        struct.setBidPriceIsSet(true);
      }
      if (incoming.get(33)) {
        struct.bidType = iprot.readI32();
        struct.setBidTypeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.bidPrice2 = iprot.readDouble();
        struct.setBidPrice2IsSet(true);
      }
      if (incoming.get(35)) {
        struct.bidType2 = iprot.readI32();
        struct.setBidType2IsSet(true);
      }
      if (incoming.get(36)) {
        struct.jsVersion = iprot.readString();
        struct.setJsVersionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.ctr = iprot.readDouble();
        struct.setCtrIsSet(true);
      }
      if (incoming.get(38)) {
        struct.ctr2 = iprot.readDouble();
        struct.setCtr2IsSet(true);
      }
      if (incoming.get(39)) {
        struct.eCPM = iprot.readDouble();
        struct.setECPMIsSet(true);
      }
      if (incoming.get(40)) {
        struct.eCPM2 = iprot.readDouble();
        struct.setECPM2IsSet(true);
      }
      if (incoming.get(41)) {
        struct.adgroupMK = iprot.readString();
        struct.setAdgroupMKIsSet(true);
      }
      if (incoming.get(42)) {
        struct.advertiserIdMK = iprot.readString();
        struct.setAdvertiserIdMKIsSet(true);
      }
      if (incoming.get(43)) {
        struct.adScore = iprot.readString();
        struct.setAdScoreIsSet(true);
      }
      if (incoming.get(44)) {
        struct.campaignIdMK = iprot.readString();
        struct.setCampaignIdMKIsSet(true);
      }
      if (incoming.get(45)) {
        struct.edContent = iprot.readString();
        struct.setEdContentIsSet(true);
      }
      if (incoming.get(46)) {
        struct.edStatus = iprot.readString();
        struct.setEdStatusIsSet(true);
      }
      if (incoming.get(47)) {
        struct.lineIdMK = iprot.readString();
        struct.setLineIdMKIsSet(true);
      }
      if (incoming.get(48)) {
        struct.materialMK = iprot.readString();
        struct.setMaterialMKIsSet(true);
      }
      if (incoming.get(49)) {
        struct.logTime = iprot.readString();
        struct.setLogTimeIsSet(true);
      }
      if (incoming.get(50)) {
        struct.logLevel = iprot.readString();
        struct.setLogLevelIsSet(true);
      }
    }
  }

}

