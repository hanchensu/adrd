/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.adrd.data.sessionlog.thrift.operation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PvOperation implements org.apache.thrift.TBase<PvOperation, PvOperation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PvOperation");

  private static final org.apache.thrift.protocol.TField YYID_FIELD_DESC = new org.apache.thrift.protocol.TField("yyid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOHUPASS_FIELD_DESC = new org.apache.thrift.protocol.TField("sohupass", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUV_FIELD_DESC = new org.apache.thrift.protocol.TField("suv", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USERAGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("useragent", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField REF_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("refUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusCode", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PvOperationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PvOperationTupleSchemeFactory());
  }

  public String yyid; // optional
  public String sohupass; // optional
  public String suv; // optional
  public String ip; // optional
  public String useragent; // optional
  public String region; // optional
  public long timestamp; // optional
  public String url; // optional
  public byte flag; // optional
  public String refUrl; // optional
  public int statusCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YYID((short)1, "yyid"),
    SOHUPASS((short)2, "sohupass"),
    SUV((short)3, "suv"),
    IP((short)4, "ip"),
    USERAGENT((short)5, "useragent"),
    REGION((short)6, "region"),
    TIMESTAMP((short)7, "timestamp"),
    URL((short)8, "url"),
    FLAG((short)9, "flag"),
    REF_URL((short)10, "refUrl"),
    STATUS_CODE((short)11, "statusCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YYID
          return YYID;
        case 2: // SOHUPASS
          return SOHUPASS;
        case 3: // SUV
          return SUV;
        case 4: // IP
          return IP;
        case 5: // USERAGENT
          return USERAGENT;
        case 6: // REGION
          return REGION;
        case 7: // TIMESTAMP
          return TIMESTAMP;
        case 8: // URL
          return URL;
        case 9: // FLAG
          return FLAG;
        case 10: // REF_URL
          return REF_URL;
        case 11: // STATUS_CODE
          return STATUS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __FLAG_ISSET_ID = 1;
  private static final int __STATUSCODE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.YYID,_Fields.SOHUPASS,_Fields.SUV,_Fields.IP,_Fields.USERAGENT,_Fields.REGION,_Fields.TIMESTAMP,_Fields.URL,_Fields.FLAG,_Fields.REF_URL,_Fields.STATUS_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YYID, new org.apache.thrift.meta_data.FieldMetaData("yyid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOHUPASS, new org.apache.thrift.meta_data.FieldMetaData("sohupass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUV, new org.apache.thrift.meta_data.FieldMetaData("suv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERAGENT, new org.apache.thrift.meta_data.FieldMetaData("useragent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REF_URL, new org.apache.thrift.meta_data.FieldMetaData("refUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("statusCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PvOperation.class, metaDataMap);
  }

  public PvOperation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PvOperation(PvOperation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetYyid()) {
      this.yyid = other.yyid;
    }
    if (other.isSetSohupass()) {
      this.sohupass = other.sohupass;
    }
    if (other.isSetSuv()) {
      this.suv = other.suv;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetUseragent()) {
      this.useragent = other.useragent;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    this.timestamp = other.timestamp;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.flag = other.flag;
    if (other.isSetRefUrl()) {
      this.refUrl = other.refUrl;
    }
    this.statusCode = other.statusCode;
  }

  public PvOperation deepCopy() {
    return new PvOperation(this);
  }

  @Override
  public void clear() {
    this.yyid = null;
    this.sohupass = null;
    this.suv = null;
    this.ip = null;
    this.useragent = null;
    this.region = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.url = null;
    setFlagIsSet(false);
    this.flag = 0;
    this.refUrl = null;
    setStatusCodeIsSet(false);
    this.statusCode = 0;
  }

  public String getYyid() {
    return this.yyid;
  }

  public PvOperation setYyid(String yyid) {
    this.yyid = yyid;
    return this;
  }

  public void unsetYyid() {
    this.yyid = null;
  }

  /** Returns true if field yyid is set (has been assigned a value) and false otherwise */
  public boolean isSetYyid() {
    return this.yyid != null;
  }

  public void setYyidIsSet(boolean value) {
    if (!value) {
      this.yyid = null;
    }
  }

  public String getSohupass() {
    return this.sohupass;
  }

  public PvOperation setSohupass(String sohupass) {
    this.sohupass = sohupass;
    return this;
  }

  public void unsetSohupass() {
    this.sohupass = null;
  }

  /** Returns true if field sohupass is set (has been assigned a value) and false otherwise */
  public boolean isSetSohupass() {
    return this.sohupass != null;
  }

  public void setSohupassIsSet(boolean value) {
    if (!value) {
      this.sohupass = null;
    }
  }

  public String getSuv() {
    return this.suv;
  }

  public PvOperation setSuv(String suv) {
    this.suv = suv;
    return this;
  }

  public void unsetSuv() {
    this.suv = null;
  }

  /** Returns true if field suv is set (has been assigned a value) and false otherwise */
  public boolean isSetSuv() {
    return this.suv != null;
  }

  public void setSuvIsSet(boolean value) {
    if (!value) {
      this.suv = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public PvOperation setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getUseragent() {
    return this.useragent;
  }

  public PvOperation setUseragent(String useragent) {
    this.useragent = useragent;
    return this;
  }

  public void unsetUseragent() {
    this.useragent = null;
  }

  /** Returns true if field useragent is set (has been assigned a value) and false otherwise */
  public boolean isSetUseragent() {
    return this.useragent != null;
  }

  public void setUseragentIsSet(boolean value) {
    if (!value) {
      this.useragent = null;
    }
  }

  public String getRegion() {
    return this.region;
  }

  public PvOperation setRegion(String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public PvOperation setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public PvOperation setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public byte getFlag() {
    return this.flag;
  }

  public PvOperation setFlag(byte flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bit_vector.clear(__FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return __isset_bit_vector.get(__FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bit_vector.set(__FLAG_ISSET_ID, value);
  }

  public String getRefUrl() {
    return this.refUrl;
  }

  public PvOperation setRefUrl(String refUrl) {
    this.refUrl = refUrl;
    return this;
  }

  public void unsetRefUrl() {
    this.refUrl = null;
  }

  /** Returns true if field refUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRefUrl() {
    return this.refUrl != null;
  }

  public void setRefUrlIsSet(boolean value) {
    if (!value) {
      this.refUrl = null;
    }
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public PvOperation setStatusCode(int statusCode) {
    this.statusCode = statusCode;
    setStatusCodeIsSet(true);
    return this;
  }

  public void unsetStatusCode() {
    __isset_bit_vector.clear(__STATUSCODE_ISSET_ID);
  }

  /** Returns true if field statusCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusCode() {
    return __isset_bit_vector.get(__STATUSCODE_ISSET_ID);
  }

  public void setStatusCodeIsSet(boolean value) {
    __isset_bit_vector.set(__STATUSCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YYID:
      if (value == null) {
        unsetYyid();
      } else {
        setYyid((String)value);
      }
      break;

    case SOHUPASS:
      if (value == null) {
        unsetSohupass();
      } else {
        setSohupass((String)value);
      }
      break;

    case SUV:
      if (value == null) {
        unsetSuv();
      } else {
        setSuv((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case USERAGENT:
      if (value == null) {
        unsetUseragent();
      } else {
        setUseragent((String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Byte)value);
      }
      break;

    case REF_URL:
      if (value == null) {
        unsetRefUrl();
      } else {
        setRefUrl((String)value);
      }
      break;

    case STATUS_CODE:
      if (value == null) {
        unsetStatusCode();
      } else {
        setStatusCode((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YYID:
      return getYyid();

    case SOHUPASS:
      return getSohupass();

    case SUV:
      return getSuv();

    case IP:
      return getIp();

    case USERAGENT:
      return getUseragent();

    case REGION:
      return getRegion();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case URL:
      return getUrl();

    case FLAG:
      return Byte.valueOf(getFlag());

    case REF_URL:
      return getRefUrl();

    case STATUS_CODE:
      return Integer.valueOf(getStatusCode());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YYID:
      return isSetYyid();
    case SOHUPASS:
      return isSetSohupass();
    case SUV:
      return isSetSuv();
    case IP:
      return isSetIp();
    case USERAGENT:
      return isSetUseragent();
    case REGION:
      return isSetRegion();
    case TIMESTAMP:
      return isSetTimestamp();
    case URL:
      return isSetUrl();
    case FLAG:
      return isSetFlag();
    case REF_URL:
      return isSetRefUrl();
    case STATUS_CODE:
      return isSetStatusCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PvOperation)
      return this.equals((PvOperation)that);
    return false;
  }

  public boolean equals(PvOperation that) {
    if (that == null)
      return false;

    boolean this_present_yyid = true && this.isSetYyid();
    boolean that_present_yyid = true && that.isSetYyid();
    if (this_present_yyid || that_present_yyid) {
      if (!(this_present_yyid && that_present_yyid))
        return false;
      if (!this.yyid.equals(that.yyid))
        return false;
    }

    boolean this_present_sohupass = true && this.isSetSohupass();
    boolean that_present_sohupass = true && that.isSetSohupass();
    if (this_present_sohupass || that_present_sohupass) {
      if (!(this_present_sohupass && that_present_sohupass))
        return false;
      if (!this.sohupass.equals(that.sohupass))
        return false;
    }

    boolean this_present_suv = true && this.isSetSuv();
    boolean that_present_suv = true && that.isSetSuv();
    if (this_present_suv || that_present_suv) {
      if (!(this_present_suv && that_present_suv))
        return false;
      if (!this.suv.equals(that.suv))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_useragent = true && this.isSetUseragent();
    boolean that_present_useragent = true && that.isSetUseragent();
    if (this_present_useragent || that_present_useragent) {
      if (!(this_present_useragent && that_present_useragent))
        return false;
      if (!this.useragent.equals(that.useragent))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_flag = true && this.isSetFlag();
    boolean that_present_flag = true && that.isSetFlag();
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_refUrl = true && this.isSetRefUrl();
    boolean that_present_refUrl = true && that.isSetRefUrl();
    if (this_present_refUrl || that_present_refUrl) {
      if (!(this_present_refUrl && that_present_refUrl))
        return false;
      if (!this.refUrl.equals(that.refUrl))
        return false;
    }

    boolean this_present_statusCode = true && this.isSetStatusCode();
    boolean that_present_statusCode = true && that.isSetStatusCode();
    if (this_present_statusCode || that_present_statusCode) {
      if (!(this_present_statusCode && that_present_statusCode))
        return false;
      if (this.statusCode != that.statusCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PvOperation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PvOperation typedOther = (PvOperation)other;

    lastComparison = Boolean.valueOf(isSetYyid()).compareTo(typedOther.isSetYyid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYyid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yyid, typedOther.yyid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSohupass()).compareTo(typedOther.isSetSohupass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSohupass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sohupass, typedOther.sohupass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuv()).compareTo(typedOther.isSetSuv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suv, typedOther.suv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseragent()).compareTo(typedOther.isSetUseragent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseragent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useragent, typedOther.useragent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(typedOther.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, typedOther.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(typedOther.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, typedOther.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefUrl()).compareTo(typedOther.isSetRefUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refUrl, typedOther.refUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusCode()).compareTo(typedOther.isSetStatusCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCode, typedOther.statusCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PvOperation(");
    boolean first = true;

    if (isSetYyid()) {
      sb.append("yyid:");
      if (this.yyid == null) {
        sb.append("null");
      } else {
        sb.append(this.yyid);
      }
      first = false;
    }
    if (isSetSohupass()) {
      if (!first) sb.append(", ");
      sb.append("sohupass:");
      if (this.sohupass == null) {
        sb.append("null");
      } else {
        sb.append(this.sohupass);
      }
      first = false;
    }
    if (isSetSuv()) {
      if (!first) sb.append(", ");
      sb.append("suv:");
      if (this.suv == null) {
        sb.append("null");
      } else {
        sb.append(this.suv);
      }
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetUseragent()) {
      if (!first) sb.append(", ");
      sb.append("useragent:");
      if (this.useragent == null) {
        sb.append("null");
      } else {
        sb.append(this.useragent);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetFlag()) {
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
    }
    if (isSetRefUrl()) {
      if (!first) sb.append(", ");
      sb.append("refUrl:");
      if (this.refUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.refUrl);
      }
      first = false;
    }
    if (isSetStatusCode()) {
      if (!first) sb.append(", ");
      sb.append("statusCode:");
      sb.append(this.statusCode);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PvOperationStandardSchemeFactory implements SchemeFactory {
    public PvOperationStandardScheme getScheme() {
      return new PvOperationStandardScheme();
    }
  }

  private static class PvOperationStandardScheme extends StandardScheme<PvOperation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PvOperation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YYID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yyid = iprot.readString();
              struct.setYyidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOHUPASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sohupass = iprot.readString();
              struct.setSohupassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suv = iprot.readString();
              struct.setSuvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERAGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useragent = iprot.readString();
              struct.setUseragentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.flag = iprot.readByte();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REF_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refUrl = iprot.readString();
              struct.setRefUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusCode = iprot.readI32();
              struct.setStatusCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PvOperation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.yyid != null) {
        if (struct.isSetYyid()) {
          oprot.writeFieldBegin(YYID_FIELD_DESC);
          oprot.writeString(struct.yyid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sohupass != null) {
        if (struct.isSetSohupass()) {
          oprot.writeFieldBegin(SOHUPASS_FIELD_DESC);
          oprot.writeString(struct.sohupass);
          oprot.writeFieldEnd();
        }
      }
      if (struct.suv != null) {
        if (struct.isSetSuv()) {
          oprot.writeFieldBegin(SUV_FIELD_DESC);
          oprot.writeString(struct.suv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.useragent != null) {
        if (struct.isSetUseragent()) {
          oprot.writeFieldBegin(USERAGENT_FIELD_DESC);
          oprot.writeString(struct.useragent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlag()) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeByte(struct.flag);
        oprot.writeFieldEnd();
      }
      if (struct.refUrl != null) {
        if (struct.isSetRefUrl()) {
          oprot.writeFieldBegin(REF_URL_FIELD_DESC);
          oprot.writeString(struct.refUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatusCode()) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI32(struct.statusCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PvOperationTupleSchemeFactory implements SchemeFactory {
    public PvOperationTupleScheme getScheme() {
      return new PvOperationTupleScheme();
    }
  }

  private static class PvOperationTupleScheme extends TupleScheme<PvOperation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PvOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetYyid()) {
        optionals.set(0);
      }
      if (struct.isSetSohupass()) {
        optionals.set(1);
      }
      if (struct.isSetSuv()) {
        optionals.set(2);
      }
      if (struct.isSetIp()) {
        optionals.set(3);
      }
      if (struct.isSetUseragent()) {
        optionals.set(4);
      }
      if (struct.isSetRegion()) {
        optionals.set(5);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetUrl()) {
        optionals.set(7);
      }
      if (struct.isSetFlag()) {
        optionals.set(8);
      }
      if (struct.isSetRefUrl()) {
        optionals.set(9);
      }
      if (struct.isSetStatusCode()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetYyid()) {
        oprot.writeString(struct.yyid);
      }
      if (struct.isSetSohupass()) {
        oprot.writeString(struct.sohupass);
      }
      if (struct.isSetSuv()) {
        oprot.writeString(struct.suv);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetUseragent()) {
        oprot.writeString(struct.useragent);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetFlag()) {
        oprot.writeByte(struct.flag);
      }
      if (struct.isSetRefUrl()) {
        oprot.writeString(struct.refUrl);
      }
      if (struct.isSetStatusCode()) {
        oprot.writeI32(struct.statusCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PvOperation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.yyid = iprot.readString();
        struct.setYyidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sohupass = iprot.readString();
        struct.setSohupassIsSet(true);
      }
      if (incoming.get(2)) {
        struct.suv = iprot.readString();
        struct.setSuvIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.useragent = iprot.readString();
        struct.setUseragentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flag = iprot.readByte();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.refUrl = iprot.readString();
        struct.setRefUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.statusCode = iprot.readI32();
        struct.setStatusCodeIsSet(true);
      }
    }
  }

}

